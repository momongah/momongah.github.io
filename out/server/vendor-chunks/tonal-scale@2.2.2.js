"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tonal-scale@2.2.2";
exports.ids = ["vendor-chunks/tonal-scale@2.2.2"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/tonal-scale@2.2.2/node_modules/tonal-scale/build/es5.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/tonal-scale@2.2.2/node_modules/tonal-scale/build/es5.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar tonalNote = __webpack_require__(/*! tonal-note */ \"(ssr)/./node_modules/.pnpm/tonal-note@2.2.2/node_modules/tonal-note/build/es5.js\");\nvar tonalPcset = __webpack_require__(/*! tonal-pcset */ \"(ssr)/./node_modules/.pnpm/tonal-pcset@2.2.2/node_modules/tonal-pcset/build/es5.js\");\nvar tonalDistance = __webpack_require__(/*! tonal-distance */ \"(ssr)/./node_modules/.pnpm/tonal-distance@2.2.2/node_modules/tonal-distance/build/es5.js\");\nvar tonalDictionary = __webpack_require__(/*! tonal-dictionary */ \"(ssr)/./node_modules/.pnpm/tonal-dictionary@2.2.2/node_modules/tonal-dictionary/build/es5.js\");\nvar tonalArray = __webpack_require__(/*! tonal-array */ \"(ssr)/./node_modules/.pnpm/tonal-array@2.2.2/node_modules/tonal-array/build/es5.js\");\n\n/**\n * [![npm version](https://img.shields.io/npm/v/tonal-scale.svg?style=flat-square)](https://www.npmjs.com/package/tonal-scale)\n *\n * A scale is a collection of pitches in ascending or descending order.\n *\n * This module provides functions to get and manipulate scales.\n *\n * @example\n * // es6\n * import * as Scale from \"tonal-scale\"\n * // es5\n * const Scale = require(\"tonal-scale\");\n *\n * @example\n * Scale.notes(\"Ab bebop\") // => [ \"Ab\", \"Bb\", \"C\", \"Db\", \"Eb\", \"F\", \"Gb\", \"G\" ]\n * Scale.names() => [\"major\", \"minor\", ...]\n * @module Scale\n */\n\nvar NO_SCALE = Object.freeze({\n  name: null,\n  intervals: [],\n  names: [],\n  chroma: null,\n  setnum: null\n});\n\nvar properties = function (name) {\n  var intervals = tonalDictionary.scale(name);\n  if (!intervals) { return NO_SCALE; }\n  var s = { intervals: intervals, name: name };\n  s.chroma = tonalPcset.chroma(intervals);\n  s.setnum = parseInt(s.chroma, 2);\n  s.names = tonalDictionary.scale.names(s.chroma);\n  return Object.freeze(s);\n};\n\nvar memoize = function (fn, cache) { return function (str) { return cache[str] || (cache[str] = fn(str)); }; };\n\n/**\n * Get scale properties. It returns an object with:\n * - name: the scale name\n * - names: a list with all possible names (includes the current)\n * - intervals: an array with the scale intervals\n * - chroma:  scale croma (see pcset)\n * - setnum: scale chroma number\n *\n * @function\n * @param {string} name - the scale name (without tonic)\n * @return {Object}\n */\nvar props = memoize(properties, {});\n\n/**\n * Return the available scale names\n *\n * @function\n * @param {boolean} [aliases=false] - true to include aliases\n * @return {Array} the scale names\n *\n * @example\n * Scale.names() // => [\"maj7\", ...]\n */\nvar names = tonalDictionary.scale.names;\n\n/**\n * Given a scale name, return its intervals. The name can be the type and\n * optionally the tonic (which is ignored)\n *\n * It retruns an empty array when no scale found\n *\n * @function\n * @param {string} name - the scale name (tonic and type, tonic is optional)\n * @return {Array<string>} the scale intervals if is a known scale or an empty\n * array if no scale found\n * @example\n * Scale.intervals(\"major\") // => [ \"1P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\" ]\n */\nvar intervals = function (name) {\n  var p = tokenize(name);\n  return props(p[1]).intervals;\n};\n\n/**\n * Get the notes (pitch classes) of a scale.\n *\n * Note that it always returns an array, and the values are only pitch classes.\n *\n * @function\n * @param {string} tonic\n * @param {string} nameOrTonic - the scale name or tonic (if 2nd param)\n * @param {string} [name] - the scale name without tonic\n * @return {Array} a pitch classes array\n *\n * @example\n * Scale.notes(\"C\", \"major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"C major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"C4\", \"major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"A4\", \"no-scale\") // => []\n * Scale.notes(\"blah\", \"major\") // => []\n */\nfunction notes(nameOrTonic, name) {\n  var p = tokenize(nameOrTonic);\n  name = name || p[1];\n  return intervals(name).map(tonalDistance.transpose(p[0]));\n}\n\n/**\n * Check if the given name is a known scale from the scales dictionary\n *\n * @function\n * @param {string} name - the scale name\n * @return {Boolean}\n */\nfunction exists(name) {\n  var p = tokenize(name);\n  return tonalDictionary.scale(p[1]) !== undefined;\n}\n\n/**\n * Given a string with a scale name and (optionally) a tonic, split\n * that components.\n *\n * It retuns an array with the form [ name, tonic ] where tonic can be a\n * note name or null and name can be any arbitrary string\n * (this function doesn\"t check if that scale name exists)\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array} an array [tonic, name]\n * @example\n * Scale.tokenize(\"C mixolydean\") // => [\"C\", \"mixolydean\"]\n * Scale.tokenize(\"anything is valid\") // => [\"\", \"anything is valid\"]\n * Scale.tokenize() // => [\"\", \"\"]\n */\nfunction tokenize(str) {\n  if (typeof str !== \"string\") { return [\"\", \"\"]; }\n  var i = str.indexOf(\" \");\n  var tonic = tonalNote.name(str.substring(0, i)) || tonalNote.name(str) || \"\";\n  var name = tonic !== \"\" ? str.substring(tonic.length + 1) : str;\n  return [tonic, name.length ? name : \"\"];\n}\n\n/**\n * Find mode names of a scale\n *\n * @function\n * @param {string} name - scale name\n * @example\n * Scale.modeNames(\"C pentatonic\") // => [\n *   [\"C\", \"major pentatonic\"],\n *   [\"D\", \"egyptian\"],\n *   [\"E\", \"malkos raga\"],\n *   [\"G\", \"ritusen\"],\n *   [\"A\", \"minor pentatonic\"]\n * ]\n */\nvar modeNames = function (name) {\n  var ivls = intervals(name);\n  var tonics = notes(name);\n\n  return tonalPcset.modes(ivls)\n    .map(function (chroma, i) {\n      var name = tonalDictionary.scale.names(chroma)[0];\n      if (name) { return [tonics[i] || ivls[i], name]; }\n    })\n    .filter(function (x) { return x; });\n};\n\n/**\n * Get all chords that fits a given scale\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array<string>} - the chord names\n *\n * @example\n * Scale.chords(\"pentatonic\") // => [\"5\", \"64\", \"M\", \"M6\", \"Madd9\", \"Msus2\"]\n */\nvar chords = function (name) {\n  var inScale = tonalPcset.isSubsetOf(intervals(name));\n  return tonalDictionary.chord.names().filter(function (name) { return inScale(tonalDictionary.chord(name)); });\n};\n\n/**\n * Given an array of notes, return the scale: a pitch class set starting from\n * the first note of the array\n *\n * @function\n * @param {Array} notes\n * @return {Array}\n * @example\n * Scale.toScale(['C4', 'c3', 'C5', 'C4', 'c4']) // => [\"C\"]\n * Scale.toScale(['D4', 'c#5', 'A5', 'F#6']) // => [\"D\", \"F#\", \"A\", \"C#\"]\n */\nvar toScale = function (notes) {\n  var pcset = tonalArray.compact(notes.map(tonalNote.pc));\n  if (!pcset.length) { return pcset; }\n  var tonic = pcset[0];\n  var scale = tonalArray.unique(pcset);\n  return tonalArray.rotate(scale.indexOf(tonic), scale);\n};\n\n/**\n * Get all scales names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n * @example\n * Scale.supersets(\"major\") // => [\"bebop\", \"bebop dominant\", \"bebop major\", \"chromatic\", \"ichikosucho\"]\n */\nvar supersets = function (name) {\n  if (!intervals(name).length) { return []; }\n  var isSuperset = tonalPcset.isSupersetOf(intervals(name));\n  return tonalDictionary.scale.names().filter(function (name) { return isSuperset(tonalDictionary.scale(name)); });\n};\n\n/**\n * Find all scales names that are a subset of the given one\n * (has less notes but all from the given scale)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n *\n * @example\n * Scale.subsets(\"major\") // => [\"ionian pentatonic\", \"major pentatonic\", \"ritusen\"]\n */\nvar subsets = function (name) {\n  var isSubset = tonalPcset.isSubsetOf(intervals(name));\n  return tonalDictionary.scale.names().filter(function (name) { return isSubset(tonalDictionary.scale(name)); });\n};\n\nexports.props = props;\nexports.names = names;\nexports.intervals = intervals;\nexports.notes = notes;\nexports.exists = exists;\nexports.tokenize = tokenize;\nexports.modeNames = modeNames;\nexports.chords = chords;\nexports.toScale = toScale;\nexports.supersets = supersets;\nexports.subsets = subsets;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/tonal-scale@2.2.2/node_modules/tonal-scale/build/es5.js\n");

/***/ })

};
;