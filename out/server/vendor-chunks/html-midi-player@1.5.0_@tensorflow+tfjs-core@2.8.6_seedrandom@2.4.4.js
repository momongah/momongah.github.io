"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/html-midi-player@1.5.0_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4";
exports.ids = ["vendor-chunks/html-midi-player@1.5.0_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/html-midi-player@1.5.0_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/html-midi-player/dist/esm/index.js":
/*!************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/html-midi-player@1.5.0_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/html-midi-player/dist/esm/index.js ***!
  \************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PlayerElement: () => (/* binding */ PlayerElement),\n/* harmony export */   VisualizerElement: () => (/* binding */ VisualizerElement)\n/* harmony export */ });\n/* harmony import */ var _magenta_music_esm_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @magenta/music/esm/core.js */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core.js\");\n/**\n * html-midi-player@1.5.0\n * https://github.com/cifkao/html-midi-player.git\n * @author Ondřej Cífka (@cifkao)\n * @license BSD-2-Clause\n */\n\n\n\nvar playIcon = \"<svg width=\\\"24\\\" height=\\\"24\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 6.35 6.35\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n <path d=\\\"m4.4979 3.175-2.1167 1.5875v-3.175z\\\" stroke-width=\\\".70201\\\"/>\\n</svg>\\n\";\n\nvar pauseIcon = \"<svg width=\\\"24\\\" height=\\\"24\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 6.35 6.35\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n <path d=\\\"m1.8521 1.5875v3.175h0.92604v-3.175zm1.7198 0v3.175h0.92604v-3.175z\\\" stroke-width=\\\".24153\\\"/>\\n</svg>\\n\";\n\nvar errorIcon = \"<svg width=\\\"24\\\" height=\\\"24\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 6.35 6.35\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n <path transform=\\\"scale(.26458)\\\" d=\\\"m12 3.5a8.4993 8.4993 0 0 0-8.5 8.5 8.4993 8.4993 0 0 0 8.5 8.5 8.4993 8.4993 0 0 0 8.5-8.5 8.4993 8.4993 0 0 0-8.5-8.5zm-1.4062 3.5h3v6h-3v-6zm0 8h3v2h-3v-2z\\\"/>\\n</svg>\\n\";\n\nvar controlsCSS = \":host {\\n  display: inline-block;\\n  width: 300px;\\n  margin: 3px;\\n  vertical-align: bottom;\\n  font-family: sans-serif;\\n  font-size: 14px;\\n}\\n\\n:focus:not(.focus-visible) {\\n  outline: none;\\n}\\n\\n.controls {\\n  width: inherit;\\n  height: inherit;\\n  box-sizing: border-box;\\n  display: flex;\\n  flex-direction: row;\\n  position: relative;\\n  overflow: hidden;\\n  align-items: center;\\n  border-radius: 100px;\\n  background: #f2f5f6;\\n  padding: 0 0.25em;\\n  user-select: none;\\n}\\n.controls > * {\\n  margin: 0.8em 0.45em;\\n}\\n.controls input, .controls button {\\n  cursor: pointer;\\n}\\n.controls input:disabled, .controls button:disabled {\\n  cursor: inherit;\\n}\\n.controls button {\\n  text-align: center;\\n  background: rgba(204, 204, 204, 0);\\n  border: none;\\n  width: 32px;\\n  height: 32px;\\n  border-radius: 100%;\\n  transition: background-color 0.25s ease 0s;\\n  padding: 0;\\n}\\n.controls button:not(:disabled):hover {\\n  background: rgba(204, 204, 204, 0.3);\\n}\\n.controls button:not(:disabled):active {\\n  background: rgba(204, 204, 204, 0.6);\\n}\\n.controls button .icon {\\n  display: none;\\n}\\n.controls button .icon, .controls button .icon svg {\\n  vertical-align: middle;\\n}\\n.controls button .icon svg {\\n  fill: currentColor;\\n}\\n.controls .seek-bar {\\n  flex: 1;\\n  min-width: 0;\\n  margin-right: 1.1em;\\n  background: transparent;\\n}\\n.controls .seek-bar::-moz-range-track {\\n  background-color: #555;\\n}\\n.controls.stopped .play-icon, .controls.playing .stop-icon, .controls.error .error-icon {\\n  display: inherit;\\n}\\n.controls.frozen > div, .controls > button:disabled .icon {\\n  opacity: 0.5;\\n}\\n.controls .overlay {\\n  z-index: 0;\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  margin: 0;\\n  box-sizing: border-box;\\n  display: none;\\n  opacity: 1;\\n}\\n.controls.loading .loading-overlay {\\n  display: block;\\n  background: linear-gradient(110deg, #92929200 5%, #92929288 25%, #92929200 45%);\\n  background-size: 250% 100%;\\n  background-repeat: repeat-y;\\n  animation: shimmer 1.5s linear infinite;\\n}\\n\\n@keyframes shimmer {\\n  0% {\\n    background-position: 125% 0;\\n  }\\n  100% {\\n    background-position: -200% 0;\\n  }\\n}\";\n\nvar visualizerCSS = \":host {\\n  display: block;\\n}\\n\\n::slotted(.piano-roll-visualizer) {\\n  overflow-x: auto;\\n}\";\n\n/// <reference path=\"imports.d.ts\"/>\nconst controlsTemplate = document.createElement('template');\ncontrolsTemplate.innerHTML = `\n<style>\n${controlsCSS}\n</style>\n<div class=\"controls stopped frozen\" part=\"control-panel\">\n  <button class=\"play\" part=\"play-button\" disabled>\n    <span class=\"icon play-icon\">${playIcon}</span>\n    <span class=\"icon stop-icon\">${pauseIcon}</span>\n    <span class=\"icon error-icon\">${errorIcon}</span>\n  </button>\n  <div part=\"time\"><span class=\"current-time\" part=\"current-time\">0:00</span> / <span class=\"total-time\" part=\"total-time\">0:00</span></div>\n  <input type=\"range\" min=\"0\" max=\"0\" value=\"0\" step=\"any\" class=\"seek-bar\" part=\"seek-bar\" disabled>\n  <div class=\"overlay loading-overlay\" part=\"loading-overlay\"></div>\n</div>\n`;\nconst visualizerTemplate = document.createElement('template');\nvisualizerTemplate.innerHTML = `\n<style>\n${visualizerCSS}\n</style>\n<slot>\n</slot>\n`;\n\nfunction formatTime(seconds) {\n    const negative = (seconds < 0);\n    seconds = Math.floor(Math.abs(seconds || 0));\n    const s = seconds % 60;\n    const m = (seconds - s) / 60;\n    const h = (seconds - s - 60 * m) / 3600;\n    const sStr = (s > 9) ? `${s}` : `0${s}`;\n    const mStr = (m > 9 || !h) ? `${m}:` : `0${m}:`;\n    const hStr = h ? `${h}:` : '';\n    return (negative ? '-' : '') + hStr + mStr + sStr;\n}\n\nconst VISUALIZER_TYPES = ['piano-roll', 'waterfall', 'staff'];\n/**\n * MIDI visualizer element.\n *\n * The visualizer is implemented via SVG elements which support styling as described\n * [here](https://magenta.github.io/magenta-js/music/demos/visualizer.html).\n *\n * See also the\n * [`@magenta/music/core/visualizer` docs](https://magenta.github.io/magenta-js/music/modules/_core_visualizer_.html).\n *\n * @prop src - MIDI file URL\n * @prop type - Visualizer type\n * @prop noteSequence - Magenta note sequence object representing the currently displayed content\n * @prop config - Magenta visualizer config object\n */\nclass VisualizerElement extends HTMLElement {\n    constructor() {\n        super(...arguments);\n        this.domInitialized = false;\n        this.ns = null;\n        this._config = {};\n    }\n    static get observedAttributes() { return ['src', 'type']; }\n    connectedCallback() {\n        this.attachShadow({ mode: 'open' });\n        this.shadowRoot.appendChild(visualizerTemplate.content.cloneNode(true));\n        if (this.domInitialized) {\n            return;\n        }\n        this.domInitialized = true;\n        this.wrapper = document.createElement('div');\n        this.appendChild(this.wrapper);\n        this.initVisualizerNow();\n    }\n    attributeChangedCallback(name, _oldValue, _newValue) {\n        if (name === 'src' || name === 'type') {\n            this.initVisualizer();\n        }\n    }\n    initVisualizer() {\n        if (this.initTimeout == null) {\n            this.initTimeout = window.setTimeout(() => this.initVisualizerNow());\n        }\n    }\n    async initVisualizerNow() {\n        this.initTimeout = null;\n        if (!this.domInitialized) {\n            return;\n        }\n        if (this.src) {\n            this.ns = null;\n            this.ns = await (0,_magenta_music_esm_core_js__WEBPACK_IMPORTED_MODULE_0__.urlToNoteSequence)(this.src);\n        }\n        this.wrapper.innerHTML = '';\n        if (!this.ns) {\n            return;\n        }\n        if (this.type === 'piano-roll') {\n            this.wrapper.classList.add('piano-roll-visualizer');\n            const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n            this.wrapper.appendChild(svg);\n            this.visualizer = new _magenta_music_esm_core_js__WEBPACK_IMPORTED_MODULE_0__.PianoRollSVGVisualizer(this.ns, svg, this._config);\n        }\n        else if (this.type === 'waterfall') {\n            this.wrapper.classList.add('waterfall-visualizer');\n            this.visualizer = new _magenta_music_esm_core_js__WEBPACK_IMPORTED_MODULE_0__.WaterfallSVGVisualizer(this.ns, this.wrapper, this._config);\n        }\n        else if (this.type === 'staff') {\n            this.wrapper.classList.add('staff-visualizer');\n            const div = document.createElement('div');\n            this.wrapper.appendChild(div);\n            this.visualizer = new _magenta_music_esm_core_js__WEBPACK_IMPORTED_MODULE_0__.StaffSVGVisualizer(this.ns, div, this._config);\n        }\n    }\n    reload() {\n        this.initVisualizerNow();\n    }\n    redraw(activeNote) {\n        if (this.visualizer) {\n            this.visualizer.redraw(activeNote, activeNote != null);\n        }\n    }\n    clearActiveNotes() {\n        if (this.visualizer) {\n            this.visualizer.clearActiveNotes();\n        }\n    }\n    get noteSequence() {\n        return this.ns;\n    }\n    set noteSequence(value) {\n        if (this.ns == value) {\n            return;\n        }\n        this.ns = value;\n        this.removeAttribute('src'); // Triggers initVisualizer only if src was present.\n        this.initVisualizer();\n    }\n    get src() {\n        return this.getAttribute('src');\n    }\n    set src(value) {\n        this.ns = null;\n        this.setOrRemoveAttribute('src', value); // Triggers initVisualizer only if src was present.\n        this.initVisualizer();\n    }\n    get type() {\n        let value = this.getAttribute('type');\n        if (VISUALIZER_TYPES.indexOf(value) < 0) {\n            value = 'piano-roll';\n        }\n        return value;\n    }\n    set type(value) {\n        if (value != null && VISUALIZER_TYPES.indexOf(value) < 0) {\n            throw new Error(`Unknown visualizer type ${value}. Allowed values: ${VISUALIZER_TYPES.join(', ')}`);\n        }\n        this.setOrRemoveAttribute('type', value);\n    }\n    get config() {\n        return this._config;\n    }\n    set config(value) {\n        this._config = value;\n        this.initVisualizer();\n    }\n    setOrRemoveAttribute(name, value) {\n        if (value == null) {\n            this.removeAttribute(name);\n        }\n        else {\n            this.setAttribute(name, value);\n        }\n    }\n}\n\nconst VISUALIZER_EVENTS = ['start', 'stop', 'note'];\nconst DEFAULT_SOUNDFONT = 'https://storage.googleapis.com/magentadata/js/soundfonts/sgm_plus';\nlet playingPlayer = null;\n/**\n * MIDI player element.\n * See also the [`@magenta/music/core/player` docs](https://magenta.github.io/magenta-js/music/modules/_core_player_.html).\n *\n * The element supports styling using the CSS [`::part` syntax](https://developer.mozilla.org/docs/Web/CSS/::part)\n * (see the list of shadow parts [below](#css-shadow-parts)). For example:\n * ```css\n * midi-player::part(control-panel) {\n *     background: aquamarine;\n *     border-radius: 0px;\n * }\n * ```\n *\n * @prop src - MIDI file URL\n * @prop soundFont - Magenta SoundFont URL, an empty string to use the default SoundFont, or `null` to use a simple oscillator synth\n * @prop noteSequence - Magenta note sequence object representing the currently loaded content\n * @prop loop - Indicates whether the player should loop\n * @prop currentTime - Current playback position in seconds\n * @prop duration - Content duration in seconds\n * @prop playing - Indicates whether the player is currently playing\n * @attr visualizer - A selector matching `midi-visualizer` elements to bind to this player\n *\n * @fires load - The content is loaded and ready to play\n * @fires start - The player has started playing\n * @fires stop - The player has stopped playing\n * @fires loop - The player has automatically restarted playback after reaching the end\n * @fires note - A note starts\n *\n * @csspart control-panel - `<div>` containing all the controls\n * @csspart play-button - Play button\n * @csspart time - Numeric time indicator\n * @csspart current-time - Elapsed time\n * @csspart total-time - Total duration\n * @csspart seek-bar - `<input type=\"range\">` showing playback position\n * @csspart loading-overlay - Overlay with shimmer animation\n */\nclass PlayerElement extends HTMLElement {\n    constructor() {\n        super();\n        this.domInitialized = false;\n        this.needInitNs = false;\n        this.visualizerListeners = new Map();\n        this.ns = null;\n        this._playing = false;\n        this.seeking = false;\n        this.attachShadow({ mode: 'open' });\n        this.shadowRoot.appendChild(controlsTemplate.content.cloneNode(true));\n        this.controlPanel = this.shadowRoot.querySelector('.controls');\n        this.playButton = this.controlPanel.querySelector('.play');\n        this.currentTimeLabel = this.controlPanel.querySelector('.current-time');\n        this.totalTimeLabel = this.controlPanel.querySelector('.total-time');\n        this.seekBar = this.controlPanel.querySelector('.seek-bar');\n    }\n    static get observedAttributes() { return ['sound-font', 'src', 'visualizer']; }\n    connectedCallback() {\n        if (this.domInitialized) {\n            return;\n        }\n        this.domInitialized = true;\n        const applyFocusVisiblePolyfill = window.applyFocusVisiblePolyfill;\n        if (applyFocusVisiblePolyfill != null) {\n            applyFocusVisiblePolyfill(this.shadowRoot);\n        }\n        this.playButton.addEventListener('click', () => {\n            if (this.player.isPlaying()) {\n                this.stop();\n            }\n            else {\n                this.start();\n            }\n        });\n        this.seekBar.addEventListener('input', () => {\n            // Pause playback while the user is manipulating the control\n            this.seeking = true;\n            if (this.player && this.player.getPlayState() === 'started') {\n                this.player.pause();\n            }\n        });\n        this.seekBar.addEventListener('change', () => {\n            const time = this.currentTime; // This returns the seek bar value as a number\n            this.currentTimeLabel.textContent = formatTime(time);\n            if (this.player) {\n                if (this.player.isPlaying()) {\n                    this.player.seekTo(time);\n                    if (this.player.getPlayState() === 'paused') {\n                        this.player.resume();\n                    }\n                }\n            }\n            this.seeking = false;\n        });\n        this.initPlayerNow();\n    }\n    attributeChangedCallback(name, _oldValue, newValue) {\n        if (!this.hasAttribute(name)) {\n            newValue = null;\n        }\n        if (name === 'sound-font' || name === 'src') {\n            this.initPlayer();\n        }\n        else if (name === 'visualizer') {\n            const fn = () => { this.setVisualizerSelector(newValue); };\n            if (document.readyState === 'loading') {\n                window.addEventListener('DOMContentLoaded', fn);\n            }\n            else {\n                fn();\n            }\n        }\n    }\n    initPlayer(initNs = true) {\n        this.needInitNs = this.needInitNs || initNs;\n        if (this.initTimeout == null) {\n            this.stop();\n            this.setLoading();\n            this.initTimeout = window.setTimeout(() => this.initPlayerNow(this.needInitNs));\n        }\n    }\n    async initPlayerNow(initNs = true) {\n        this.initTimeout = null;\n        this.needInitNs = false;\n        if (!this.domInitialized) {\n            return;\n        }\n        try {\n            let ns = null;\n            if (initNs) {\n                if (this.src) {\n                    this.ns = null;\n                    this.ns = await (0,_magenta_music_esm_core_js__WEBPACK_IMPORTED_MODULE_0__.urlToNoteSequence)(this.src);\n                }\n                this.currentTime = 0;\n                if (!this.ns) {\n                    this.setError('No content loaded');\n                }\n            }\n            ns = this.ns;\n            if (ns) {\n                this.seekBar.max = String(ns.totalTime);\n                this.totalTimeLabel.textContent = formatTime(ns.totalTime);\n            }\n            else {\n                this.seekBar.max = '0';\n                this.totalTimeLabel.textContent = formatTime(0);\n                return;\n            }\n            let soundFont = this.soundFont;\n            const callbackObject = {\n                // Call callbacks only if we are still playing the same note sequence.\n                run: (n) => (this.ns === ns) && this.noteCallback(n),\n                stop: () => { }\n            };\n            if (soundFont === null) {\n                this.player = new _magenta_music_esm_core_js__WEBPACK_IMPORTED_MODULE_0__.Player(false, callbackObject);\n            }\n            else {\n                if (soundFont === \"\") {\n                    soundFont = DEFAULT_SOUNDFONT;\n                }\n                this.player = new _magenta_music_esm_core_js__WEBPACK_IMPORTED_MODULE_0__.SoundFontPlayer(soundFont, undefined, undefined, undefined, callbackObject);\n                await this.player.loadSamples(ns);\n            }\n            if (this.ns !== ns) {\n                // If we started loading a different sequence in the meantime...\n                return;\n            }\n            this.setLoaded();\n            this.dispatchEvent(new CustomEvent('load'));\n        }\n        catch (error) {\n            this.setError(String(error));\n            throw error;\n        }\n    }\n    reload() {\n        this.initPlayerNow();\n    }\n    start() {\n        this._start();\n    }\n    _start(looped = false) {\n        (async () => {\n            if (this.player) {\n                if (this.player.getPlayState() == 'stopped') {\n                    if (playingPlayer && playingPlayer.playing && !(playingPlayer == this && looped)) {\n                        playingPlayer.stop();\n                    }\n                    playingPlayer = this;\n                    this._playing = true;\n                    let offset = this.currentTime;\n                    // Jump to the start if there are no notes left to play.\n                    if (this.ns.notes.filter((note) => note.startTime > offset).length == 0) {\n                        offset = 0;\n                    }\n                    this.currentTime = offset;\n                    this.controlPanel.classList.remove('stopped');\n                    this.controlPanel.classList.add('playing');\n                    try {\n                        // Force reload visualizers to prevent stuttering at playback start\n                        for (const visualizer of this.visualizerListeners.keys()) {\n                            if (visualizer.noteSequence != this.ns) {\n                                visualizer.noteSequence = this.ns;\n                                visualizer.reload();\n                            }\n                        }\n                        const promise = this.player.start(this.ns, undefined, offset);\n                        if (!looped) {\n                            this.dispatchEvent(new CustomEvent('start'));\n                        }\n                        else {\n                            this.dispatchEvent(new CustomEvent('loop'));\n                        }\n                        await promise;\n                        this.handleStop(true);\n                    }\n                    catch (error) {\n                        this.handleStop();\n                        throw error;\n                    }\n                }\n                else if (this.player.getPlayState() == 'paused') {\n                    // This normally should not happen, since we pause playback only when seeking.\n                    this.player.resume();\n                }\n            }\n        })();\n    }\n    stop() {\n        if (this.player && this.player.isPlaying()) {\n            this.player.stop();\n        }\n        this.handleStop(false);\n    }\n    addVisualizer(visualizer) {\n        const listeners = {\n            start: () => { visualizer.noteSequence = this.noteSequence; },\n            stop: () => { visualizer.clearActiveNotes(); },\n            note: (event) => { visualizer.redraw(event.detail.note); },\n        };\n        for (const name of VISUALIZER_EVENTS) {\n            this.addEventListener(name, listeners[name]);\n        }\n        this.visualizerListeners.set(visualizer, listeners);\n    }\n    removeVisualizer(visualizer) {\n        const listeners = this.visualizerListeners.get(visualizer);\n        for (const name of VISUALIZER_EVENTS) {\n            this.removeEventListener(name, listeners[name]);\n        }\n        this.visualizerListeners.delete(visualizer);\n    }\n    noteCallback(note) {\n        if (!this.playing) {\n            return;\n        }\n        this.dispatchEvent(new CustomEvent('note', { detail: { note } }));\n        if (this.seeking) {\n            return;\n        }\n        this.seekBar.value = String(note.startTime);\n        this.currentTimeLabel.textContent = formatTime(note.startTime);\n    }\n    handleStop(finished = false) {\n        if (finished) {\n            if (this.loop) {\n                this.currentTime = 0;\n                this._start(true);\n                return;\n            }\n            this.currentTime = this.duration;\n        }\n        this.controlPanel.classList.remove('playing');\n        this.controlPanel.classList.add('stopped');\n        if (this._playing) {\n            this._playing = false;\n            this.dispatchEvent(new CustomEvent('stop', { detail: { finished } }));\n        }\n    }\n    setVisualizerSelector(selector) {\n        // Remove old listeners\n        for (const listeners of this.visualizerListeners.values()) {\n            for (const name of VISUALIZER_EVENTS) {\n                this.removeEventListener(name, listeners[name]);\n            }\n        }\n        this.visualizerListeners.clear();\n        // Match visualizers and add them as listeners\n        if (selector != null) {\n            for (const element of document.querySelectorAll(selector)) {\n                if (!(element instanceof VisualizerElement)) {\n                    console.warn(`Selector ${selector} matched non-visualizer element`, element);\n                    continue;\n                }\n                this.addVisualizer(element);\n            }\n        }\n    }\n    setLoading() {\n        this.playButton.disabled = true;\n        this.seekBar.disabled = true;\n        this.controlPanel.classList.remove('error');\n        this.controlPanel.classList.add('loading', 'frozen');\n        this.controlPanel.removeAttribute('title');\n    }\n    setLoaded() {\n        this.controlPanel.classList.remove('loading', 'frozen');\n        this.playButton.disabled = false;\n        this.seekBar.disabled = false;\n    }\n    setError(error) {\n        this.playButton.disabled = true;\n        this.seekBar.disabled = true;\n        this.controlPanel.classList.remove('loading', 'stopped', 'playing');\n        this.controlPanel.classList.add('error', 'frozen');\n        this.controlPanel.title = error;\n    }\n    get noteSequence() {\n        return this.ns;\n    }\n    set noteSequence(value) {\n        if (this.ns == value) {\n            return;\n        }\n        this.ns = value;\n        this.removeAttribute('src'); // Triggers initPlayer only if src was present.\n        this.initPlayer();\n    }\n    get src() {\n        return this.getAttribute('src');\n    }\n    set src(value) {\n        this.ns = null;\n        this.setOrRemoveAttribute('src', value); // Triggers initPlayer only if src was present.\n        this.initPlayer();\n    }\n    /**\n     * @attr sound-font\n     */\n    get soundFont() {\n        return this.getAttribute('sound-font');\n    }\n    set soundFont(value) {\n        this.setOrRemoveAttribute('sound-font', value);\n    }\n    /**\n     * @attr loop\n     */\n    get loop() {\n        return this.getAttribute('loop') != null;\n    }\n    set loop(value) {\n        this.setOrRemoveAttribute('loop', value ? '' : null);\n    }\n    get currentTime() {\n        return parseFloat(this.seekBar.value);\n    }\n    set currentTime(value) {\n        this.seekBar.value = String(value);\n        this.currentTimeLabel.textContent = formatTime(this.currentTime);\n        if (this.player && this.player.isPlaying()) {\n            this.player.seekTo(value);\n        }\n    }\n    get duration() {\n        return parseFloat(this.seekBar.max);\n    }\n    get playing() {\n        return this._playing;\n    }\n    setOrRemoveAttribute(name, value) {\n        if (value == null) {\n            this.removeAttribute(name);\n        }\n        else {\n            this.setAttribute(name, value);\n        }\n    }\n}\n\nwindow.customElements.define('midi-player', PlayerElement);\nwindow.customElements.define('midi-visualizer', VisualizerElement);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/html-midi-player@1.5.0_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/html-midi-player/dist/esm/index.js\n");

/***/ })

};
;