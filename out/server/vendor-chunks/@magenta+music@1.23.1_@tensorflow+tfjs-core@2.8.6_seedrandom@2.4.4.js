"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4";
exports.ids = ["vendor-chunks/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core.js":
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core.js ***!
  \***************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePlayer: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.BasePlayer),\n/* harmony export */   BasePlayerCallback: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.BasePlayerCallback),\n/* harmony export */   BaseRecorderCallback: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.BaseRecorderCallback),\n/* harmony export */   BaseSVGVisualizer: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.BaseSVGVisualizer),\n/* harmony export */   BaseVisualizer: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.BaseVisualizer),\n/* harmony export */   MIDIPlayer: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.MIDIPlayer),\n/* harmony export */   Metronome: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.Metronome),\n/* harmony export */   MetronomeCallbackObject: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.MetronomeCallbackObject),\n/* harmony export */   MidiConversionError: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.MidiConversionError),\n/* harmony export */   PianoRollCanvasVisualizer: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.PianoRollCanvasVisualizer),\n/* harmony export */   PianoRollSVGVisualizer: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.PianoRollSVGVisualizer),\n/* harmony export */   Player: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.Player),\n/* harmony export */   PlayerWithClick: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.PlayerWithClick),\n/* harmony export */   Recorder: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.Recorder),\n/* harmony export */   ScrollType: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.ScrollType),\n/* harmony export */   SoundFontPlayer: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.SoundFontPlayer),\n/* harmony export */   StaffSVGVisualizer: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.StaffSVGVisualizer),\n/* harmony export */   Visualizer: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.Visualizer),\n/* harmony export */   WaterfallSVGVisualizer: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.WaterfallSVGVisualizer),\n/* harmony export */   aux_inputs: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.aux_inputs),\n/* harmony export */   blobToNoteSequence: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.blobToNoteSequence),\n/* harmony export */   chords: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.chords),\n/* harmony export */   constants: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.constants),\n/* harmony export */   data: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.data),\n/* harmony export */   logging: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.logging),\n/* harmony export */   melodies: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.melodies),\n/* harmony export */   midiToSequenceProto: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.midiToSequenceProto),\n/* harmony export */   performance: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.performance),\n/* harmony export */   sequenceProtoToMidi: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.sequenceProtoToMidi),\n/* harmony export */   sequences: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.sequences),\n/* harmony export */   urlToBlob: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.urlToBlob),\n/* harmony export */   urlToNoteSequence: () => (/* reexport safe */ _core_index__WEBPACK_IMPORTED_MODULE_0__.urlToNoteSequence)\n/* harmony export */ });\n/* harmony import */ var _core_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/index */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/index.js\");\n\n//# sourceMappingURL=core.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1hZ2VudGErbXVzaWNAMS4yMy4xX0B0ZW5zb3JmbG93K3RmanMtY29yZUAyLjguNl9zZWVkcmFuZG9tQDIuNC40L25vZGVfbW9kdWxlcy9AbWFnZW50YS9tdXNpYy9lc20vY29yZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb21vbmdhaC5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvLnBucG0vQG1hZ2VudGErbXVzaWNAMS4yMy4xX0B0ZW5zb3JmbG93K3RmanMtY29yZUAyLjguNl9zZWVkcmFuZG9tQDIuNC40L25vZGVfbW9kdWxlcy9AbWFnZW50YS9tdXNpYy9lc20vY29yZS5qcz84OWJjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vY29yZS9pbmRleCc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb3JlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/aux_inputs.js":
/*!**************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/aux_inputs.js ***!
  \**************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuxiliaryInput: () => (/* binding */ AuxiliaryInput),\n/* harmony export */   BinaryCounter: () => (/* binding */ BinaryCounter),\n/* harmony export */   auxiliaryInputFromSpec: () => (/* binding */ auxiliaryInputFromSpec)\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs */ \"(ssr)/./node_modules/.pnpm/@tensorflow+tfjs@2.8.6_seedrandom@2.4.4/node_modules/@tensorflow/tfjs/dist/tf.node.js\");\n/* harmony import */ var _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction auxiliaryInputFromSpec(spec) {\n    switch (spec.type) {\n        case 'BinaryCounter':\n            return new BinaryCounter(spec.args);\n        default:\n            throw new Error(`Unknown auxiliary input: ${spec}`);\n    }\n}\nclass AuxiliaryInput {\n    constructor(depth) {\n        this.depth = depth;\n    }\n}\nclass BinaryCounter extends AuxiliaryInput {\n    constructor(args) {\n        super(args.numBits);\n    }\n    getTensors(numSteps) {\n        const buffer = _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.buffer([numSteps, this.depth]);\n        for (let step = 0; step < numSteps; ++step) {\n            for (let i = 0; i < this.depth; ++i) {\n                buffer.set(Math.floor((step + 1) / Math.pow(2, i)) % 2 ? 1.0 : -1.0, step, i);\n            }\n        }\n        return buffer.toTensor().as2D(numSteps, this.depth);\n    }\n}\n//# sourceMappingURL=aux_inputs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1hZ2VudGErbXVzaWNAMS4yMy4xX0B0ZW5zb3JmbG93K3RmanMtY29yZUAyLjguNl9zZWVkcmFuZG9tQDIuNC40L25vZGVfbW9kdWxlcy9AbWFnZW50YS9tdXNpYy9lc20vY29yZS9hdXhfaW5wdXRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXVDO0FBQ2hDO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsS0FBSztBQUM3RDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsb0RBQVM7QUFDaEMsMkJBQTJCLGlCQUFpQjtBQUM1Qyw0QkFBNEIsZ0JBQWdCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9tb25nYWguZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtYWdlbnRhK211c2ljQDEuMjMuMV9AdGVuc29yZmxvdyt0ZmpzLWNvcmVAMi44LjZfc2VlZHJhbmRvbUAyLjQuNC9ub2RlX21vZHVsZXMvQG1hZ2VudGEvbXVzaWMvZXNtL2NvcmUvYXV4X2lucHV0cy5qcz9hOTE4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRmIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGF1eGlsaWFyeUlucHV0RnJvbVNwZWMoc3BlYykge1xuICAgIHN3aXRjaCAoc3BlYy50eXBlKSB7XG4gICAgICAgIGNhc2UgJ0JpbmFyeUNvdW50ZXInOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBCaW5hcnlDb3VudGVyKHNwZWMuYXJncyk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gYXV4aWxpYXJ5IGlucHV0OiAke3NwZWN9YCk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEF1eGlsaWFyeUlucHV0IHtcbiAgICBjb25zdHJ1Y3RvcihkZXB0aCkge1xuICAgICAgICB0aGlzLmRlcHRoID0gZGVwdGg7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEJpbmFyeUNvdW50ZXIgZXh0ZW5kcyBBdXhpbGlhcnlJbnB1dCB7XG4gICAgY29uc3RydWN0b3IoYXJncykge1xuICAgICAgICBzdXBlcihhcmdzLm51bUJpdHMpO1xuICAgIH1cbiAgICBnZXRUZW5zb3JzKG51bVN0ZXBzKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IHRmLmJ1ZmZlcihbbnVtU3RlcHMsIHRoaXMuZGVwdGhdKTtcbiAgICAgICAgZm9yIChsZXQgc3RlcCA9IDA7IHN0ZXAgPCBudW1TdGVwczsgKytzdGVwKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGVwdGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGJ1ZmZlci5zZXQoTWF0aC5mbG9vcigoc3RlcCArIDEpIC8gTWF0aC5wb3coMiwgaSkpICUgMiA/IDEuMCA6IC0xLjAsIHN0ZXAsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWZmZXIudG9UZW5zb3IoKS5hczJEKG51bVN0ZXBzLCB0aGlzLmRlcHRoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdXhfaW5wdXRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/aux_inputs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/chords.js":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/chords.js ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChordEncoder: () => (/* binding */ ChordEncoder),\n/* harmony export */   ChordEncodingException: () => (/* binding */ ChordEncodingException),\n/* harmony export */   ChordQuality: () => (/* binding */ ChordQuality),\n/* harmony export */   ChordSymbolException: () => (/* binding */ ChordSymbolException),\n/* harmony export */   ChordSymbols: () => (/* binding */ ChordSymbols),\n/* harmony export */   MajorMinorChordEncoder: () => (/* binding */ MajorMinorChordEncoder),\n/* harmony export */   PitchChordEncoder: () => (/* binding */ PitchChordEncoder),\n/* harmony export */   TriadChordEncoder: () => (/* binding */ TriadChordEncoder),\n/* harmony export */   chordEncoderFromType: () => (/* binding */ chordEncoderFromType)\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs */ \"(ssr)/./node_modules/.pnpm/@tensorflow+tfjs@2.8.6_seedrandom@2.4.4/node_modules/@tensorflow/tfjs/dist/tf.node.js\");\n/* harmony import */ var _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var tonal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tonal */ \"(ssr)/./node_modules/.pnpm/tonal@2.2.2/node_modules/tonal/build/es5.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/constants.js\");\n\n\n\nconst CHORD_QUALITY_INTERVALS = [\n    ['1P', '3M', '5P'],\n    ['1P', '3m', '5P'],\n    ['1P', '3M', '5A'],\n    ['1P', '3m', '5d'],\n];\nvar ChordQuality;\n(function (ChordQuality) {\n    ChordQuality[ChordQuality[\"Major\"] = 0] = \"Major\";\n    ChordQuality[ChordQuality[\"Minor\"] = 1] = \"Minor\";\n    ChordQuality[ChordQuality[\"Augmented\"] = 2] = \"Augmented\";\n    ChordQuality[ChordQuality[\"Diminished\"] = 3] = \"Diminished\";\n    ChordQuality[ChordQuality[\"Other\"] = 4] = \"Other\";\n})(ChordQuality || (ChordQuality = {}));\nclass ChordSymbolException extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n}\nclass ChordEncodingException extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n}\nclass ChordSymbols {\n    static pitches(chord) {\n        const root = tonal__WEBPACK_IMPORTED_MODULE_1__.Chord.tokenize(chord)[0];\n        if (!root || !tonal__WEBPACK_IMPORTED_MODULE_1__.Chord.exists(chord)) {\n            throw new ChordSymbolException(`Unrecognized chord symbol: ${chord}`);\n        }\n        const notes = tonal__WEBPACK_IMPORTED_MODULE_1__.Chord.notes(chord);\n        return notes.map(tonal__WEBPACK_IMPORTED_MODULE_1__.Note.chroma);\n    }\n    static root(chord) {\n        const root = tonal__WEBPACK_IMPORTED_MODULE_1__.Chord.tokenize(chord)[0];\n        if (!root) {\n            throw new ChordSymbolException(`Chord symbol has unknown root: ${chord}`);\n        }\n        return tonal__WEBPACK_IMPORTED_MODULE_1__.Note.chroma(root);\n    }\n    static quality(chord) {\n        if (!tonal__WEBPACK_IMPORTED_MODULE_1__.Chord.exists(chord)) {\n            throw new ChordSymbolException(`Unrecognized chord symbol: ${chord}`);\n        }\n        const intervals = tonal__WEBPACK_IMPORTED_MODULE_1__.Chord.intervals(chord);\n        const qualities = CHORD_QUALITY_INTERVALS.map(cqis => cqis.every(cqi => intervals.includes(cqi)));\n        const i = qualities.indexOf(true);\n        const j = qualities.lastIndexOf(true);\n        if (i >= 0 && i === j) {\n            return i;\n        }\n        else {\n            return ChordQuality.Other;\n        }\n    }\n}\nclass ChordEncoder {\n    encodeProgression(chords, numSteps) {\n        const encodedChords = chords.map(chord => this.encode(chord));\n        const indices = Array.from(Array(numSteps).keys())\n            .map(step => Math.floor(step * encodedChords.length / numSteps));\n        return _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.stack(indices.map(i => encodedChords[i]));\n    }\n}\nfunction chordEncoderFromType(type) {\n    switch (type) {\n        case 'MajorMinorChordEncoder':\n            return new MajorMinorChordEncoder();\n        case 'TriadChordEncoder':\n            return new TriadChordEncoder();\n        case 'PitchChordEncoder':\n            return new PitchChordEncoder();\n        default:\n            throw new Error(`Unknown chord encoder type: ${type}`);\n    }\n}\nclass MajorMinorChordEncoder extends ChordEncoder {\n    constructor() {\n        super(...arguments);\n        this.depth = 1 + 2 * _constants__WEBPACK_IMPORTED_MODULE_2__.NUM_PITCH_CLASSES;\n    }\n    index(chord) {\n        if (chord === _constants__WEBPACK_IMPORTED_MODULE_2__.NO_CHORD) {\n            return 0;\n        }\n        const root = ChordSymbols.root(chord);\n        const quality = ChordSymbols.quality(chord);\n        const index = 1 + quality * _constants__WEBPACK_IMPORTED_MODULE_2__.NUM_PITCH_CLASSES + root;\n        if (index >= this.depth) {\n            throw new ChordEncodingException(`Chord is neither major nor minor: ${chord}`);\n        }\n        return index;\n    }\n    encode(chord) {\n        return _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.tidy(() => _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.oneHot(_tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.tensor1d([this.index(chord)], 'int32'), this.depth)\n            .as1D());\n    }\n}\nclass TriadChordEncoder extends ChordEncoder {\n    constructor() {\n        super(...arguments);\n        this.depth = 1 + 4 * _constants__WEBPACK_IMPORTED_MODULE_2__.NUM_PITCH_CLASSES;\n    }\n    index(chord) {\n        if (chord === _constants__WEBPACK_IMPORTED_MODULE_2__.NO_CHORD) {\n            return 0;\n        }\n        const root = ChordSymbols.root(chord);\n        const quality = ChordSymbols.quality(chord);\n        const index = 1 + quality * _constants__WEBPACK_IMPORTED_MODULE_2__.NUM_PITCH_CLASSES + root;\n        if (index >= this.depth) {\n            throw new ChordEncodingException(`Chord is not a standard triad: ${chord}`);\n        }\n        return index;\n    }\n    encode(chord) {\n        return _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.tidy(() => _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.oneHot(_tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.tensor1d([this.index(chord)], 'int32'), this.depth)\n            .as1D());\n    }\n}\nclass PitchChordEncoder extends ChordEncoder {\n    constructor() {\n        super(...arguments);\n        this.depth = 1 + 3 * _constants__WEBPACK_IMPORTED_MODULE_2__.NUM_PITCH_CLASSES;\n    }\n    encode(chord) {\n        return _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.tidy(() => {\n            if (chord === _constants__WEBPACK_IMPORTED_MODULE_2__.NO_CHORD) {\n                return _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.oneHot(_tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.tensor1d([0], 'int32'), this.depth).as1D();\n            }\n            const root = ChordSymbols.root(chord);\n            const rootEncoding = _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.oneHot(_tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.tensor1d([root], 'int32'), _constants__WEBPACK_IMPORTED_MODULE_2__.NUM_PITCH_CLASSES)\n                .as1D();\n            const pitchBuffer = _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.buffer([_constants__WEBPACK_IMPORTED_MODULE_2__.NUM_PITCH_CLASSES]);\n            ChordSymbols.pitches(chord).forEach(pitch => pitchBuffer.set(1.0, pitch));\n            const pitchEncoding = pitchBuffer.toTensor().as1D();\n            const bassEncoding = rootEncoding;\n            return _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.concat1d([_tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.tensor1d([0.0]), rootEncoding, pitchEncoding, bassEncoding]);\n        });\n    }\n}\n//# sourceMappingURL=chords.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/chords.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/compat/global.js":
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/compat/global.js ***!
  \*****************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetch: () => (/* binding */ fetch),\n/* harmony export */   getOfflineAudioContext: () => (/* reexport safe */ _global_browser__WEBPACK_IMPORTED_MODULE_0__.getOfflineAudioContext),\n/* harmony export */   isSafari: () => (/* reexport safe */ _global_browser__WEBPACK_IMPORTED_MODULE_0__.isSafari),\n/* harmony export */   navigator: () => (/* binding */ navigator),\n/* harmony export */   performance: () => (/* binding */ performance)\n/* harmony export */ });\n/* harmony import */ var _global_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./global_browser */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/compat/global_browser.js\");\nconst isNode = typeof global !== 'undefined' && typeof global.process !== 'undefined';\nconst fetch = isNode ? __webpack_require__(/*! node-fetch */ \"(ssr)/./node_modules/.pnpm/node-fetch@2.6.1/node_modules/node-fetch/lib/index.js\") : window.fetch.bind(window);\nconst performance = isNode ? __webpack_require__(/*! ./performance_node */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/compat/performance_node.js\") : window.performance;\nconst navigator = isNode ? __webpack_require__(/*! ./navigator_node */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/compat/navigator_node.js\") : window.navigator;\n\n//# sourceMappingURL=global.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1hZ2VudGErbXVzaWNAMS4yMy4xX0B0ZW5zb3JmbG93K3RmanMtY29yZUAyLjguNl9zZWVkcmFuZG9tQDIuNC40L25vZGVfbW9kdWxlcy9AbWFnZW50YS9tdXNpYy9lc20vY29yZS9jb21wYXQvZ2xvYmFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ08sdUJBQXVCLG1CQUFPLENBQUMsb0dBQVk7QUFDM0MsNkJBQTZCLG1CQUFPLENBQUMseUxBQW9CO0FBQ3pELDJCQUEyQixtQkFBTyxDQUFDLHFMQUFrQjtBQUNRO0FBQ3BFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9tb25nYWguZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtYWdlbnRhK211c2ljQDEuMjMuMV9AdGVuc29yZmxvdyt0ZmpzLWNvcmVAMi44LjZfc2VlZHJhbmRvbUAyLjQuNC9ub2RlX21vZHVsZXMvQG1hZ2VudGEvbXVzaWMvZXNtL2NvcmUvY29tcGF0L2dsb2JhbC5qcz80ZGI1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGlzTm9kZSA9IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBnbG9iYWwucHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCc7XG5leHBvcnQgY29uc3QgZmV0Y2ggPSBpc05vZGUgPyByZXF1aXJlKCdub2RlLWZldGNoJykgOiB3aW5kb3cuZmV0Y2guYmluZCh3aW5kb3cpO1xuZXhwb3J0IGNvbnN0IHBlcmZvcm1hbmNlID0gaXNOb2RlID8gcmVxdWlyZSgnLi9wZXJmb3JtYW5jZV9ub2RlJykgOiB3aW5kb3cucGVyZm9ybWFuY2U7XG5leHBvcnQgY29uc3QgbmF2aWdhdG9yID0gaXNOb2RlID8gcmVxdWlyZSgnLi9uYXZpZ2F0b3Jfbm9kZScpIDogd2luZG93Lm5hdmlnYXRvcjtcbmV4cG9ydCB7IGlzU2FmYXJpLCBnZXRPZmZsaW5lQXVkaW9Db250ZXh0IH0gZnJvbSAnLi9nbG9iYWxfYnJvd3Nlcic7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbG9iYWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/compat/global.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/compat/global_browser.js":
/*!*************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/compat/global_browser.js ***!
  \*************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetch: () => (/* binding */ fetch),\n/* harmony export */   getOfflineAudioContext: () => (/* binding */ getOfflineAudioContext),\n/* harmony export */   isSafari: () => (/* binding */ isSafari),\n/* harmony export */   navigator: () => (/* binding */ navigator),\n/* harmony export */   performance: () => (/* binding */ performance)\n/* harmony export */ });\nfunction getGlobalObject() {\n    if (typeof globalThis !== 'undefined') {\n        return globalThis;\n    }\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    throw new Error('cannot find the global object');\n}\nconst globalObject = getGlobalObject();\nconst fetch = globalObject.fetch.bind(globalObject);\nconst performance = globalObject.performance;\nconst navigator = globalObject.navigator;\nconst isSafari = !!globalObject.webkitOfflineAudioContext;\nconst isWorker = typeof globalObject.WorkerGlobalScope !== 'undefined';\nfunction getOfflineAudioContext(sampleRate) {\n    const WEBKIT_SAMPLE_RATE = 44100;\n    sampleRate = isSafari ? WEBKIT_SAMPLE_RATE : sampleRate;\n    if (isWorker) {\n        throw new Error('Cannot use offline audio context in a web worker.');\n    }\n    const SafariOfflineCtx = globalObject.webkitOfflineAudioContext;\n    return isSafari ? new SafariOfflineCtx(1, sampleRate, sampleRate) :\n        new globalObject.OfflineAudioContext(1, sampleRate, sampleRate);\n}\n//# sourceMappingURL=global_browser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1hZ2VudGErbXVzaWNAMS4yMy4xX0B0ZW5zb3JmbG93K3RmanMtY29yZUAyLjguNl9zZWVkcmFuZG9tQDIuNC40L25vZGVfbW9kdWxlcy9AbWFnZW50YS9tdXNpYy9lc20vY29yZS9jb21wYXQvZ2xvYmFsX2Jyb3dzZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ0E7QUFDQTtBQUNBO0FBQ1A7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9tb25nYWguZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtYWdlbnRhK211c2ljQDEuMjMuMV9AdGVuc29yZmxvdyt0ZmpzLWNvcmVAMi44LjZfc2VlZHJhbmRvbUAyLjQuNC9ub2RlX21vZHVsZXMvQG1hZ2VudGEvbXVzaWMvZXNtL2NvcmUvY29tcGF0L2dsb2JhbF9icm93c2VyLmpzPzEyMjQiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZ2V0R2xvYmFsT2JqZWN0KCkge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbFRoaXM7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gd2luZG93O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbDtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYW5ub3QgZmluZCB0aGUgZ2xvYmFsIG9iamVjdCcpO1xufVxuY29uc3QgZ2xvYmFsT2JqZWN0ID0gZ2V0R2xvYmFsT2JqZWN0KCk7XG5leHBvcnQgY29uc3QgZmV0Y2ggPSBnbG9iYWxPYmplY3QuZmV0Y2guYmluZChnbG9iYWxPYmplY3QpO1xuZXhwb3J0IGNvbnN0IHBlcmZvcm1hbmNlID0gZ2xvYmFsT2JqZWN0LnBlcmZvcm1hbmNlO1xuZXhwb3J0IGNvbnN0IG5hdmlnYXRvciA9IGdsb2JhbE9iamVjdC5uYXZpZ2F0b3I7XG5leHBvcnQgY29uc3QgaXNTYWZhcmkgPSAhIWdsb2JhbE9iamVjdC53ZWJraXRPZmZsaW5lQXVkaW9Db250ZXh0O1xuY29uc3QgaXNXb3JrZXIgPSB0eXBlb2YgZ2xvYmFsT2JqZWN0Lldvcmtlckdsb2JhbFNjb3BlICE9PSAndW5kZWZpbmVkJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRPZmZsaW5lQXVkaW9Db250ZXh0KHNhbXBsZVJhdGUpIHtcbiAgICBjb25zdCBXRUJLSVRfU0FNUExFX1JBVEUgPSA0NDEwMDtcbiAgICBzYW1wbGVSYXRlID0gaXNTYWZhcmkgPyBXRUJLSVRfU0FNUExFX1JBVEUgOiBzYW1wbGVSYXRlO1xuICAgIGlmIChpc1dvcmtlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCB1c2Ugb2ZmbGluZSBhdWRpbyBjb250ZXh0IGluIGEgd2ViIHdvcmtlci4nKTtcbiAgICB9XG4gICAgY29uc3QgU2FmYXJpT2ZmbGluZUN0eCA9IGdsb2JhbE9iamVjdC53ZWJraXRPZmZsaW5lQXVkaW9Db250ZXh0O1xuICAgIHJldHVybiBpc1NhZmFyaSA/IG5ldyBTYWZhcmlPZmZsaW5lQ3R4KDEsIHNhbXBsZVJhdGUsIHNhbXBsZVJhdGUpIDpcbiAgICAgICAgbmV3IGdsb2JhbE9iamVjdC5PZmZsaW5lQXVkaW9Db250ZXh0KDEsIHNhbXBsZVJhdGUsIHNhbXBsZVJhdGUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2xvYmFsX2Jyb3dzZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/compat/global_browser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/compat/navigator_node.js":
/*!*************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/compat/navigator_node.js ***!
  \*************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   userAgent: () => (/* binding */ userAgent)\n/* harmony export */ });\nconst userAgent = '';\n//# sourceMappingURL=navigator_node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1hZ2VudGErbXVzaWNAMS4yMy4xX0B0ZW5zb3JmbG93K3RmanMtY29yZUAyLjguNl9zZWVkcmFuZG9tQDIuNC40L25vZGVfbW9kdWxlcy9AbWFnZW50YS9tdXNpYy9lc20vY29yZS9jb21wYXQvbmF2aWdhdG9yX25vZGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb21vbmdhaC5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvLnBucG0vQG1hZ2VudGErbXVzaWNAMS4yMy4xX0B0ZW5zb3JmbG93K3RmanMtY29yZUAyLjguNl9zZWVkcmFuZG9tQDIuNC40L25vZGVfbW9kdWxlcy9AbWFnZW50YS9tdXNpYy9lc20vY29yZS9jb21wYXQvbmF2aWdhdG9yX25vZGUuanM/NWRlZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdXNlckFnZW50ID0gJyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uYXZpZ2F0b3Jfbm9kZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/compat/navigator_node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/compat/performance_node.js":
/*!***************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/compat/performance_node.js ***!
  \***************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   now: () => (/* binding */ now),\n/* harmony export */   timing: () => (/* binding */ timing)\n/* harmony export */ });\nconst NS_PER_SEC = 1e9;\nconst time = global.process.hrtime();\nconst now = () => {\n    const diff = global.process.hrtime(time);\n    return diff[0] + diff[1] / NS_PER_SEC;\n};\nconst timing = {\n    navigationStart: Date.now(),\n};\n//# sourceMappingURL=performance_node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1hZ2VudGErbXVzaWNAMS4yMy4xX0B0ZW5zb3JmbG93K3RmanMtY29yZUAyLjguNl9zZWVkcmFuZG9tQDIuNC40L25vZGVfbW9kdWxlcy9AbWFnZW50YS9tdXNpYy9lc20vY29yZS9jb21wYXQvcGVyZm9ybWFuY2Vfbm9kZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9tb25nYWguZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtYWdlbnRhK211c2ljQDEuMjMuMV9AdGVuc29yZmxvdyt0ZmpzLWNvcmVAMi44LjZfc2VlZHJhbmRvbUAyLjQuNC9ub2RlX21vZHVsZXMvQG1hZ2VudGEvbXVzaWMvZXNtL2NvcmUvY29tcGF0L3BlcmZvcm1hbmNlX25vZGUuanM/ZjNkZiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBOU19QRVJfU0VDID0gMWU5O1xuY29uc3QgdGltZSA9IGdsb2JhbC5wcm9jZXNzLmhydGltZSgpO1xuZXhwb3J0IGNvbnN0IG5vdyA9ICgpID0+IHtcbiAgICBjb25zdCBkaWZmID0gZ2xvYmFsLnByb2Nlc3MuaHJ0aW1lKHRpbWUpO1xuICAgIHJldHVybiBkaWZmWzBdICsgZGlmZlsxXSAvIE5TX1BFUl9TRUM7XG59O1xuZXhwb3J0IGNvbnN0IHRpbWluZyA9IHtcbiAgICBuYXZpZ2F0aW9uU3RhcnQ6IERhdGUubm93KCksXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGVyZm9ybWFuY2Vfbm9kZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/compat/performance_node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/constants.js":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/constants.js ***!
  \*************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_CHANNEL: () => (/* binding */ DEFAULT_CHANNEL),\n/* harmony export */   DEFAULT_DRUM_PITCH_CLASSES: () => (/* binding */ DEFAULT_DRUM_PITCH_CLASSES),\n/* harmony export */   DEFAULT_PROGRAM: () => (/* binding */ DEFAULT_PROGRAM),\n/* harmony export */   DEFAULT_QUARTERS_PER_MINUTE: () => (/* binding */ DEFAULT_QUARTERS_PER_MINUTE),\n/* harmony export */   DEFAULT_STEPS_PER_BAR: () => (/* binding */ DEFAULT_STEPS_PER_BAR),\n/* harmony export */   DEFAULT_STEPS_PER_QUARTER: () => (/* binding */ DEFAULT_STEPS_PER_QUARTER),\n/* harmony export */   DEFAULT_STEPS_PER_SECOND: () => (/* binding */ DEFAULT_STEPS_PER_SECOND),\n/* harmony export */   DEFAULT_TICKS_PER_QUARTER: () => (/* binding */ DEFAULT_TICKS_PER_QUARTER),\n/* harmony export */   DEFAULT_VELOCITY: () => (/* binding */ DEFAULT_VELOCITY),\n/* harmony export */   DRUM_CHANNEL: () => (/* binding */ DRUM_CHANNEL),\n/* harmony export */   HI_CLICK_CLASS: () => (/* binding */ HI_CLICK_CLASS),\n/* harmony export */   HI_CLICK_PITCH: () => (/* binding */ HI_CLICK_PITCH),\n/* harmony export */   LO_CLICK_CLASS: () => (/* binding */ LO_CLICK_CLASS),\n/* harmony export */   LO_CLICK_PITCH: () => (/* binding */ LO_CLICK_PITCH),\n/* harmony export */   MAX_DRUM_PITCH: () => (/* binding */ MAX_DRUM_PITCH),\n/* harmony export */   MAX_MIDI_PITCH: () => (/* binding */ MAX_MIDI_PITCH),\n/* harmony export */   MAX_MIDI_PROGRAM: () => (/* binding */ MAX_MIDI_PROGRAM),\n/* harmony export */   MAX_MIDI_VELOCITY: () => (/* binding */ MAX_MIDI_VELOCITY),\n/* harmony export */   MAX_PIANO_PITCH: () => (/* binding */ MAX_PIANO_PITCH),\n/* harmony export */   MIDI_PITCHES: () => (/* binding */ MIDI_PITCHES),\n/* harmony export */   MIDI_VELOCITIES: () => (/* binding */ MIDI_VELOCITIES),\n/* harmony export */   MIN_DRUM_PITCH: () => (/* binding */ MIN_DRUM_PITCH),\n/* harmony export */   MIN_MIDI_PITCH: () => (/* binding */ MIN_MIDI_PITCH),\n/* harmony export */   MIN_MIDI_PROGRAM: () => (/* binding */ MIN_MIDI_PROGRAM),\n/* harmony export */   MIN_MIDI_VELOCITY: () => (/* binding */ MIN_MIDI_VELOCITY),\n/* harmony export */   MIN_PIANO_PITCH: () => (/* binding */ MIN_PIANO_PITCH),\n/* harmony export */   NON_DRUM_CHANNELS: () => (/* binding */ NON_DRUM_CHANNELS),\n/* harmony export */   NO_CHORD: () => (/* binding */ NO_CHORD),\n/* harmony export */   NUM_PITCH_CLASSES: () => (/* binding */ NUM_PITCH_CLASSES)\n/* harmony export */ });\nnull;\nconst DEFAULT_QUARTERS_PER_MINUTE = 120.0;\nconst DEFAULT_STEPS_PER_BAR = 16;\nconst DEFAULT_STEPS_PER_QUARTER = 4;\nconst DEFAULT_STEPS_PER_SECOND = 100;\nconst DEFAULT_VELOCITY = 80;\nconst DEFAULT_PROGRAM = 0;\nconst DEFAULT_TICKS_PER_QUARTER = 220;\nconst DEFAULT_CHANNEL = 0;\nconst DRUM_CHANNEL = 9;\nconst NON_DRUM_CHANNELS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15];\nconst DEFAULT_DRUM_PITCH_CLASSES = [\n    [36, 35],\n    [38, 27, 28, 31, 32, 33, 34, 37, 39, 40, 56, 65, 66, 75, 85],\n    [42, 44, 54, 68, 69, 70, 71, 73, 78, 80],\n    [46, 67, 72, 74, 79, 81],\n    [45, 29, 41, 61, 64, 84],\n    [48, 47, 60, 63, 77, 86, 87],\n    [50, 30, 43, 62, 76, 83],\n    [49, 55, 57, 58],\n    [51, 52, 53, 59, 82]\n];\nconst MIN_MIDI_VELOCITY = 0;\nconst MAX_MIDI_VELOCITY = 127;\nconst MIDI_VELOCITIES = MAX_MIDI_VELOCITY - MIN_MIDI_VELOCITY + 1;\nconst NO_CHORD = 'N.C.';\nconst NUM_PITCH_CLASSES = 12;\nconst MIN_MIDI_PITCH = 0;\nconst MAX_MIDI_PITCH = 127;\nconst MIDI_PITCHES = MAX_MIDI_PITCH - MIN_MIDI_PITCH + 1;\nconst MIN_PIANO_PITCH = 21;\nconst MAX_PIANO_PITCH = 108;\nconst MIN_DRUM_PITCH = 35;\nconst MAX_DRUM_PITCH = 81;\nconst MIN_MIDI_PROGRAM = 0;\nconst MAX_MIDI_PROGRAM = 127;\nconst LO_CLICK_PITCH = 89;\nconst HI_CLICK_PITCH = 90;\nconst LO_CLICK_CLASS = 9;\nconst HI_CLICK_CLASS = 10;\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1hZ2VudGErbXVzaWNAMS4yMy4xX0B0ZW5zb3JmbG93K3RmanMtY29yZUAyLjguNl9zZWVkcmFuZG9tQDIuNC40L25vZGVfbW9kdWxlcy9AbWFnZW50YS9tdXNpYy9lc20vY29yZS9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNPO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9tb25nYWguZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtYWdlbnRhK211c2ljQDEuMjMuMV9AdGVuc29yZmxvdyt0ZmpzLWNvcmVAMi44LjZfc2VlZHJhbmRvbUAyLjQuNC9ub2RlX21vZHVsZXMvQG1hZ2VudGEvbXVzaWMvZXNtL2NvcmUvY29uc3RhbnRzLmpzP2NmMmEiXSwic291cmNlc0NvbnRlbnQiOlsibnVsbDtcbmV4cG9ydCBjb25zdCBERUZBVUxUX1FVQVJURVJTX1BFUl9NSU5VVEUgPSAxMjAuMDtcbmV4cG9ydCBjb25zdCBERUZBVUxUX1NURVBTX1BFUl9CQVIgPSAxNjtcbmV4cG9ydCBjb25zdCBERUZBVUxUX1NURVBTX1BFUl9RVUFSVEVSID0gNDtcbmV4cG9ydCBjb25zdCBERUZBVUxUX1NURVBTX1BFUl9TRUNPTkQgPSAxMDA7XG5leHBvcnQgY29uc3QgREVGQVVMVF9WRUxPQ0lUWSA9IDgwO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfUFJPR1JBTSA9IDA7XG5leHBvcnQgY29uc3QgREVGQVVMVF9USUNLU19QRVJfUVVBUlRFUiA9IDIyMDtcbmV4cG9ydCBjb25zdCBERUZBVUxUX0NIQU5ORUwgPSAwO1xuZXhwb3J0IGNvbnN0IERSVU1fQ0hBTk5FTCA9IDk7XG5leHBvcnQgY29uc3QgTk9OX0RSVU1fQ0hBTk5FTFMgPSBbMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNV07XG5leHBvcnQgY29uc3QgREVGQVVMVF9EUlVNX1BJVENIX0NMQVNTRVMgPSBbXG4gICAgWzM2LCAzNV0sXG4gICAgWzM4LCAyNywgMjgsIDMxLCAzMiwgMzMsIDM0LCAzNywgMzksIDQwLCA1NiwgNjUsIDY2LCA3NSwgODVdLFxuICAgIFs0MiwgNDQsIDU0LCA2OCwgNjksIDcwLCA3MSwgNzMsIDc4LCA4MF0sXG4gICAgWzQ2LCA2NywgNzIsIDc0LCA3OSwgODFdLFxuICAgIFs0NSwgMjksIDQxLCA2MSwgNjQsIDg0XSxcbiAgICBbNDgsIDQ3LCA2MCwgNjMsIDc3LCA4NiwgODddLFxuICAgIFs1MCwgMzAsIDQzLCA2MiwgNzYsIDgzXSxcbiAgICBbNDksIDU1LCA1NywgNThdLFxuICAgIFs1MSwgNTIsIDUzLCA1OSwgODJdXG5dO1xuZXhwb3J0IGNvbnN0IE1JTl9NSURJX1ZFTE9DSVRZID0gMDtcbmV4cG9ydCBjb25zdCBNQVhfTUlESV9WRUxPQ0lUWSA9IDEyNztcbmV4cG9ydCBjb25zdCBNSURJX1ZFTE9DSVRJRVMgPSBNQVhfTUlESV9WRUxPQ0lUWSAtIE1JTl9NSURJX1ZFTE9DSVRZICsgMTtcbmV4cG9ydCBjb25zdCBOT19DSE9SRCA9ICdOLkMuJztcbmV4cG9ydCBjb25zdCBOVU1fUElUQ0hfQ0xBU1NFUyA9IDEyO1xuZXhwb3J0IGNvbnN0IE1JTl9NSURJX1BJVENIID0gMDtcbmV4cG9ydCBjb25zdCBNQVhfTUlESV9QSVRDSCA9IDEyNztcbmV4cG9ydCBjb25zdCBNSURJX1BJVENIRVMgPSBNQVhfTUlESV9QSVRDSCAtIE1JTl9NSURJX1BJVENIICsgMTtcbmV4cG9ydCBjb25zdCBNSU5fUElBTk9fUElUQ0ggPSAyMTtcbmV4cG9ydCBjb25zdCBNQVhfUElBTk9fUElUQ0ggPSAxMDg7XG5leHBvcnQgY29uc3QgTUlOX0RSVU1fUElUQ0ggPSAzNTtcbmV4cG9ydCBjb25zdCBNQVhfRFJVTV9QSVRDSCA9IDgxO1xuZXhwb3J0IGNvbnN0IE1JTl9NSURJX1BST0dSQU0gPSAwO1xuZXhwb3J0IGNvbnN0IE1BWF9NSURJX1BST0dSQU0gPSAxMjc7XG5leHBvcnQgY29uc3QgTE9fQ0xJQ0tfUElUQ0ggPSA4OTtcbmV4cG9ydCBjb25zdCBISV9DTElDS19QSVRDSCA9IDkwO1xuZXhwb3J0IGNvbnN0IExPX0NMSUNLX0NMQVNTID0gOTtcbmV4cG9ydCBjb25zdCBISV9DTElDS19DTEFTUyA9IDEwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/data.js":
/*!********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/data.js ***!
  \********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_DRUM_PITCH_CLASSES: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_DRUM_PITCH_CLASSES),\n/* harmony export */   DataConverter: () => (/* binding */ DataConverter),\n/* harmony export */   DrumRollConverter: () => (/* binding */ DrumRollConverter),\n/* harmony export */   DrumsConverter: () => (/* binding */ DrumsConverter),\n/* harmony export */   DrumsOneHotConverter: () => (/* binding */ DrumsOneHotConverter),\n/* harmony export */   GrooveConverter: () => (/* binding */ GrooveConverter),\n/* harmony export */   MelodyConverter: () => (/* binding */ MelodyConverter),\n/* harmony export */   MelodyRhythmConverter: () => (/* binding */ MelodyRhythmConverter),\n/* harmony export */   MelodyShapeConverter: () => (/* binding */ MelodyShapeConverter),\n/* harmony export */   MultitrackConverter: () => (/* binding */ MultitrackConverter),\n/* harmony export */   TrioConverter: () => (/* binding */ TrioConverter),\n/* harmony export */   TrioRhythmConverter: () => (/* binding */ TrioRhythmConverter),\n/* harmony export */   converterFromSpec: () => (/* binding */ converterFromSpec)\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs */ \"(ssr)/./node_modules/.pnpm/@tensorflow+tfjs@2.8.6_seedrandom@2.4.4/node_modules/@tensorflow/tfjs/dist/tf.node.js\");\n/* harmony import */ var _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _protobuf_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../protobuf/index */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/protobuf/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/constants.js\");\n/* harmony import */ var _logging__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/logging.js\");\n/* harmony import */ var _melodies__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./melodies */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/melodies.js\");\n/* harmony import */ var _performance__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./performance */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/performance.js\");\n/* harmony import */ var _sequences__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sequences */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/sequences.js\");\n\n\n\n\n\n\n\n\n\nfunction converterFromSpec(spec) {\n    switch (spec.type) {\n        case 'MelodyConverter':\n            return new MelodyConverter(spec.args);\n        case 'MelodyRhythmConverter':\n            return new MelodyRhythmConverter(spec.args);\n        case 'MelodyShapeConverter':\n            return new MelodyShapeConverter(spec.args);\n        case 'DrumsConverter':\n            return new DrumsConverter(spec.args);\n        case 'DrumRollConverter':\n            return new DrumRollConverter(spec.args);\n        case 'TrioConverter':\n            return new TrioConverter(spec.args);\n        case 'TrioRhythmConverter':\n            return new TrioRhythmConverter(spec.args);\n        case 'DrumsOneHotConverter':\n            return new DrumsOneHotConverter(spec.args);\n        case 'MultitrackConverter':\n            return new MultitrackConverter(spec.args);\n        case 'GrooveConverter':\n            return new GrooveConverter(spec.args);\n        default:\n            throw new Error(`Unknown DataConverter type: ${spec}`);\n    }\n}\nclass DataConverter {\n    constructor(args) {\n        this.NUM_SPLITS = 0;\n        this.SEGMENTED_BY_TRACK = false;\n        this.numSteps = args.numSteps;\n        this.numSegments = args.numSegments;\n    }\n    tensorSteps(tensor) {\n        return _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.scalar(tensor.shape[0], 'int32');\n    }\n}\nclass DrumsConverter extends DataConverter {\n    constructor(args) {\n        super(args);\n        this.pitchClasses = args.pitchClasses || _constants__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_DRUM_PITCH_CLASSES;\n        this.pitchToClass = new Map();\n        for (let c = 0; c < this.pitchClasses.length; ++c) {\n            this.pitchClasses[c].forEach((p) => {\n                this.pitchToClass.set(p, c);\n            });\n        }\n        this.depth = this.pitchClasses.length + 1;\n    }\n    toTensor(noteSequence) {\n        _sequences__WEBPACK_IMPORTED_MODULE_6__.assertIsQuantizedSequence(noteSequence);\n        const numSteps = this.numSteps || noteSequence.totalQuantizedSteps;\n        const drumRoll = _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.buffer([numSteps, this.pitchClasses.length + 1], 'int32');\n        for (let i = 0; i < numSteps; ++i) {\n            drumRoll.set(1, i, -1);\n        }\n        noteSequence.notes.forEach((note) => {\n            drumRoll.set(1, note.quantizedStartStep, this.pitchToClass.get(note.pitch));\n            drumRoll.set(0, note.quantizedStartStep, -1);\n        });\n        return drumRoll.toTensor();\n    }\n    async toNoteSequence(oh, stepsPerQuarter, qpm) {\n        const noteSequence = _sequences__WEBPACK_IMPORTED_MODULE_6__.createQuantizedNoteSequence(stepsPerQuarter, qpm);\n        const labelsTensor = oh.argMax(1);\n        const labels = await labelsTensor.data();\n        labelsTensor.dispose();\n        for (let s = 0; s < labels.length; ++s) {\n            for (let p = 0; p < this.pitchClasses.length; p++) {\n                if (labels[s] >> p & 1) {\n                    noteSequence.notes.push(_protobuf_index__WEBPACK_IMPORTED_MODULE_1__.NoteSequence.Note.create({\n                        pitch: this.pitchClasses[p][0],\n                        quantizedStartStep: s,\n                        quantizedEndStep: s + 1,\n                        isDrum: true\n                    }));\n                }\n            }\n        }\n        noteSequence.totalQuantizedSteps = labels.length;\n        return noteSequence;\n    }\n}\nclass DrumRollConverter extends DrumsConverter {\n    async toNoteSequence(roll, stepsPerQuarter, qpm) {\n        const noteSequence = _sequences__WEBPACK_IMPORTED_MODULE_6__.createQuantizedNoteSequence(stepsPerQuarter, qpm);\n        const flatRoll = await roll.data();\n        for (let s = 0; s < roll.shape[0]; ++s) {\n            const pitches = flatRoll.slice(s * this.pitchClasses.length, (s + 1) * this.pitchClasses.length);\n            for (let p = 0; p < pitches.length; ++p) {\n                if (pitches[p]) {\n                    noteSequence.notes.push(_protobuf_index__WEBPACK_IMPORTED_MODULE_1__.NoteSequence.Note.create({\n                        pitch: this.pitchClasses[p][0],\n                        quantizedStartStep: s,\n                        quantizedEndStep: s + 1,\n                        isDrum: true\n                    }));\n                }\n            }\n        }\n        noteSequence.totalQuantizedSteps = roll.shape[0];\n        return noteSequence;\n    }\n}\nclass DrumsOneHotConverter extends DrumsConverter {\n    constructor(args) {\n        super(args);\n        this.depth = Math.pow(2, this.pitchClasses.length);\n    }\n    toTensor(noteSequence) {\n        _sequences__WEBPACK_IMPORTED_MODULE_6__.assertIsRelativeQuantizedSequence(noteSequence);\n        const numSteps = this.numSteps || noteSequence.totalQuantizedSteps;\n        const labels = Array(numSteps).fill(0);\n        for (const { pitch, quantizedStartStep } of noteSequence.notes) {\n            labels[quantizedStartStep] += Math.pow(2, this.pitchToClass.get(pitch));\n        }\n        return _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.tidy(() => _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.oneHot(_tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.tensor1d(labels, 'int32'), this.depth));\n    }\n}\nclass MelodyConverter extends DataConverter {\n    constructor(args) {\n        super(args);\n        this.NOTE_OFF = 1;\n        this.FIRST_PITCH = 2;\n        this.minPitch = args.minPitch;\n        this.maxPitch = args.maxPitch;\n        this.ignorePolyphony = args.ignorePolyphony;\n        this.depth = args.maxPitch - args.minPitch + 1 + this.FIRST_PITCH;\n    }\n    toTensor(noteSequence) {\n        const melody = _melodies__WEBPACK_IMPORTED_MODULE_4__.Melody.fromNoteSequence(noteSequence, this.minPitch, this.maxPitch, this.ignorePolyphony, this.numSteps);\n        return _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.tidy(() => _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.oneHot(_tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.tensor(melody.events, [melody.events.length], 'int32'), this.depth));\n    }\n    async toNoteSequence(oh, stepsPerQuarter, qpm) {\n        const labelsTensor = oh.argMax(1);\n        const labels = await labelsTensor.data();\n        labelsTensor.dispose();\n        const melody = new _melodies__WEBPACK_IMPORTED_MODULE_4__.Melody(labels, this.minPitch, this.maxPitch);\n        return melody.toNoteSequence(stepsPerQuarter, qpm);\n    }\n}\nclass MelodyControlConverter extends DataConverter {\n    constructor(args, melodyControl) {\n        super(args);\n        this.minPitch = args.minPitch;\n        this.maxPitch = args.maxPitch;\n        this.ignorePolyphony = args.ignorePolyphony;\n        this.melodyControl = melodyControl;\n        this.depth = melodyControl.depth;\n    }\n    toTensor(noteSequence) {\n        const melody = _melodies__WEBPACK_IMPORTED_MODULE_4__.Melody.fromNoteSequence(noteSequence, this.minPitch, this.maxPitch, this.ignorePolyphony, this.numSteps);\n        return this.melodyControl.extract(melody);\n    }\n}\nclass MelodyRhythmConverter extends MelodyControlConverter {\n    constructor(args) {\n        super(args, new _melodies__WEBPACK_IMPORTED_MODULE_4__.MelodyRhythm());\n    }\n    async toNoteSequence(tensor, stepsPerQuarter, qpm) {\n        const noteSequence = _sequences__WEBPACK_IMPORTED_MODULE_6__.createQuantizedNoteSequence(stepsPerQuarter, qpm);\n        const rhythm = await tensor.data();\n        for (let s = 0; s < rhythm.length; ++s) {\n            if (rhythm[s]) {\n                noteSequence.notes.push(_protobuf_index__WEBPACK_IMPORTED_MODULE_1__.NoteSequence.Note.create({\n                    pitch: _constants__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_DRUM_PITCH_CLASSES[1][0],\n                    quantizedStartStep: s,\n                    quantizedEndStep: s + 1,\n                    isDrum: true\n                }));\n            }\n        }\n        noteSequence.totalQuantizedSteps = rhythm.length;\n        return noteSequence;\n    }\n}\nclass MelodyShapeConverter extends MelodyControlConverter {\n    constructor(args) {\n        super(args, new _melodies__WEBPACK_IMPORTED_MODULE_4__.MelodyShape());\n    }\n    async toNoteSequence(oh, stepsPerQuarter, qpm) {\n        const noteSequence = _sequences__WEBPACK_IMPORTED_MODULE_6__.createQuantizedNoteSequence(stepsPerQuarter, qpm);\n        const shapeTensor = oh.argMax(1);\n        const shape = await shapeTensor.data();\n        shapeTensor.dispose();\n        let pitch = Math.round((this.maxPitch + this.minPitch) / 2);\n        for (let s = 0; s < shape.length; ++s) {\n            switch (shape[s]) {\n                case 0:\n                    pitch -= 1;\n                    if (pitch < this.minPitch) {\n                        pitch = this.minPitch;\n                        _logging__WEBPACK_IMPORTED_MODULE_3__.log('Pitch range exceeded when creating NoteSequence from shape.', 'MelodyShapeConverter');\n                    }\n                    break;\n                case 2:\n                    pitch += 1;\n                    if (pitch > this.maxPitch) {\n                        pitch = this.maxPitch;\n                        _logging__WEBPACK_IMPORTED_MODULE_3__.log('Pitch range exceeded when creating NoteSequence from shape.', 'MelodyShapeConverter');\n                    }\n                    break;\n                default:\n                    break;\n            }\n            noteSequence.notes.push(_protobuf_index__WEBPACK_IMPORTED_MODULE_1__.NoteSequence.Note.create({ pitch, quantizedStartStep: s, quantizedEndStep: s + 1 }));\n        }\n        noteSequence.totalQuantizedSteps = shape.length;\n        return noteSequence;\n    }\n}\nclass TrioConverter extends DataConverter {\n    constructor(args) {\n        super(args);\n        this.NUM_SPLITS = 3;\n        this.MEL_PROG_RANGE = [0, 31];\n        this.BASS_PROG_RANGE = [32, 39];\n        args.melArgs.numSteps = args.numSteps;\n        args.bassArgs.numSteps = args.numSteps;\n        args.drumsArgs.numSteps = args.numSteps;\n        this.melConverter = new MelodyConverter(args.melArgs);\n        this.bassConverter = new MelodyConverter(args.bassArgs);\n        this.drumsConverter = new DrumsOneHotConverter(args.drumsArgs);\n        this.depth =\n            (this.melConverter.depth + this.bassConverter.depth +\n                this.drumsConverter.depth);\n    }\n    toTensor(noteSequence) {\n        _sequences__WEBPACK_IMPORTED_MODULE_6__.assertIsQuantizedSequence(noteSequence);\n        const melSeq = _sequences__WEBPACK_IMPORTED_MODULE_6__.clone(noteSequence);\n        const bassSeq = _sequences__WEBPACK_IMPORTED_MODULE_6__.clone(noteSequence);\n        const drumsSeq = _sequences__WEBPACK_IMPORTED_MODULE_6__.clone(noteSequence);\n        melSeq.notes = noteSequence.notes.filter(n => (!n.isDrum && n.program >= this.MEL_PROG_RANGE[0] &&\n            n.program <= this.MEL_PROG_RANGE[1]));\n        bassSeq.notes = noteSequence.notes.filter(n => (!n.isDrum && n.program >= this.BASS_PROG_RANGE[0] &&\n            n.program <= this.BASS_PROG_RANGE[1]));\n        drumsSeq.notes = noteSequence.notes.filter(n => n.isDrum);\n        return _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.tidy(() => _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.concat([\n            this.melConverter.toTensor(melSeq),\n            this.bassConverter.toTensor(bassSeq),\n            this.drumsConverter.toTensor(drumsSeq)\n        ], -1));\n    }\n    async toNoteSequence(th, stepsPerQuarter, qpm) {\n        const ohs = _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.split(th, [\n            this.melConverter.depth, this.bassConverter.depth,\n            this.drumsConverter.depth\n        ], -1);\n        const ns = await this.melConverter.toNoteSequence(ohs[0], stepsPerQuarter, qpm);\n        ns.notes.forEach(n => {\n            n.instrument = 0;\n            n.program = 0;\n        });\n        const bassNs = await this.bassConverter.toNoteSequence(ohs[1], stepsPerQuarter, qpm);\n        ns.notes.push(...bassNs.notes.map(n => {\n            n.instrument = 1;\n            n.program = this.BASS_PROG_RANGE[0];\n            return n;\n        }));\n        const drumsNs = await this.drumsConverter.toNoteSequence(ohs[2], stepsPerQuarter, qpm);\n        ns.notes.push(...drumsNs.notes.map(n => {\n            n.instrument = 2;\n            return n;\n        }));\n        ohs.forEach(oh => oh.dispose());\n        return ns;\n    }\n}\nclass TrioRhythmConverter extends DataConverter {\n    constructor(args) {\n        super(args);\n        this.NUM_SPLITS = 3;\n        this.trioConverter = new TrioConverter(args);\n        this.depth = 3;\n    }\n    toTensor(noteSequence) {\n        return _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.tidy(() => {\n            const trioTensor = this.trioConverter.toTensor(noteSequence);\n            const instrumentTensors = _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.split(trioTensor, [\n                this.trioConverter.melConverter.depth,\n                this.trioConverter.bassConverter.depth,\n                this.trioConverter.drumsConverter.depth\n            ], 1);\n            const melodyEvents = _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.argMax(instrumentTensors[0], 1);\n            const bassEvents = _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.argMax(instrumentTensors[1], 1);\n            const drumsEvents = _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.argMax(instrumentTensors[2], 1);\n            const melodyRhythm = _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.greater(melodyEvents, 1);\n            const bassRhythm = _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.greater(bassEvents, 1);\n            const drumsRhythm = _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.greater(drumsEvents, 0);\n            return _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.stack([melodyRhythm, bassRhythm, drumsRhythm], 1);\n        });\n    }\n    async toNoteSequence(tensor, stepsPerQuarter, qpm) {\n        const rhythmTensors = _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.split(tensor, 3, 1);\n        const rhythms = await Promise.all(rhythmTensors.map(t => t.data()));\n        const noteSequence = _sequences__WEBPACK_IMPORTED_MODULE_6__.createQuantizedNoteSequence(stepsPerQuarter, qpm);\n        for (let s = 0; s < this.numSteps; ++s) {\n            if (rhythms[0][s]) {\n                noteSequence.notes.push(_protobuf_index__WEBPACK_IMPORTED_MODULE_1__.NoteSequence.Note.create({\n                    pitch: 72,\n                    quantizedStartStep: s,\n                    quantizedEndStep: s + 1,\n                    instrument: 0,\n                    program: 0,\n                }));\n            }\n            if (rhythms[1][s]) {\n                noteSequence.notes.push(_protobuf_index__WEBPACK_IMPORTED_MODULE_1__.NoteSequence.Note.create({\n                    pitch: 36,\n                    quantizedStartStep: s,\n                    quantizedEndStep: s + 1,\n                    instrument: 1,\n                    program: 32,\n                }));\n            }\n            if (rhythms[2][s]) {\n                noteSequence.notes.push(_protobuf_index__WEBPACK_IMPORTED_MODULE_1__.NoteSequence.Note.create({\n                    pitch: _constants__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_DRUM_PITCH_CLASSES[1][0],\n                    quantizedStartStep: s,\n                    quantizedEndStep: s + 1,\n                    instrument: 2,\n                    isDrum: true\n                }));\n            }\n        }\n        noteSequence.totalQuantizedSteps = this.numSteps;\n        return noteSequence;\n    }\n}\nclass MultitrackConverter extends DataConverter {\n    constructor(args) {\n        super(args);\n        this.SEGMENTED_BY_TRACK = true;\n        this.stepsPerQuarter = args.stepsPerQuarter;\n        this.totalSteps = args.totalSteps;\n        this.numVelocityBins = args.numVelocityBins;\n        this.minPitch = args.minPitch ? args.minPitch : _constants__WEBPACK_IMPORTED_MODULE_2__.MIN_MIDI_PITCH;\n        this.maxPitch = args.maxPitch ? args.maxPitch : _constants__WEBPACK_IMPORTED_MODULE_2__.MAX_MIDI_PITCH;\n        this.numPitches = this.maxPitch - this.minPitch + 1;\n        this.performanceEventDepth =\n            2 * this.numPitches + this.totalSteps + this.numVelocityBins;\n        this.numPrograms =\n            _constants__WEBPACK_IMPORTED_MODULE_2__.MAX_MIDI_PROGRAM - _constants__WEBPACK_IMPORTED_MODULE_2__.MIN_MIDI_PROGRAM + 2;\n        this.endToken = this.performanceEventDepth + this.numPrograms;\n        this.depth = this.endToken + 1;\n        this.endTensor = _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.tidy(() => _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.oneHot(_tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.tensor1d([this.endToken], 'int32'), this.depth)\n            .as1D());\n    }\n    trackToTensor(track) {\n        const maxEventsPerTrack = this.numSteps / this.numSegments;\n        let tokens = undefined;\n        if (track) {\n            while (track.events.length > maxEventsPerTrack - 2) {\n                track.events.pop();\n            }\n            tokens = _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.buffer([track.events.length + 2], 'int32');\n            tokens.set(this.performanceEventDepth +\n                (track.isDrum ? this.numPrograms - 1 : track.program), 0);\n            track.events.forEach((event, index) => {\n                switch (event.type) {\n                    case 'note-on':\n                        tokens.set(event.pitch - this.minPitch, index + 1);\n                        break;\n                    case 'note-off':\n                        tokens.set(this.numPitches + event.pitch - this.minPitch, index + 1);\n                        break;\n                    case 'time-shift':\n                        tokens.set(2 * this.numPitches + event.steps - 1, index + 1);\n                        break;\n                    case 'velocity-change':\n                        tokens.set(2 * this.numPitches + this.totalSteps + event.velocityBin - 1, index + 1);\n                        break;\n                    default:\n                        throw new Error(`Unrecognized performance event: ${event}`);\n                }\n            });\n            tokens.set(this.endToken, track.events.length + 1);\n        }\n        else {\n            tokens = _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.buffer([1], 'int32', new Int32Array([this.endToken]));\n        }\n        return _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.tidy(() => {\n            const oh = _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.oneHot(tokens.toTensor(), this.depth);\n            return oh.pad([[0, maxEventsPerTrack - oh.shape[0]], [0, 0]]);\n        });\n    }\n    toTensor(noteSequence) {\n        _sequences__WEBPACK_IMPORTED_MODULE_6__.assertIsRelativeQuantizedSequence(noteSequence);\n        if (noteSequence.quantizationInfo.stepsPerQuarter !==\n            this.stepsPerQuarter) {\n            throw new Error(`Steps per quarter note mismatch: ${noteSequence.quantizationInfo.stepsPerQuarter} != ${this.stepsPerQuarter}`);\n        }\n        const seq = _sequences__WEBPACK_IMPORTED_MODULE_6__.clone(noteSequence);\n        seq.notes = noteSequence.notes.filter(note => note.pitch >= this.minPitch && note.pitch <= this.maxPitch);\n        const instruments = new Set(seq.notes.map(note => note.instrument));\n        const tracks = Array.from(instruments)\n            .map(instrument => _performance__WEBPACK_IMPORTED_MODULE_5__.Performance.fromNoteSequence(seq, this.totalSteps, this.numVelocityBins, instrument));\n        const sortedTracks = tracks.sort((a, b) => b.isDrum ? -1 : (a.isDrum ? 1 : a.program - b.program));\n        while (sortedTracks.length > this.numSegments) {\n            sortedTracks.pop();\n        }\n        sortedTracks.forEach((track) => track.setNumSteps(this.totalSteps));\n        while (sortedTracks.length < this.numSegments) {\n            sortedTracks.push(undefined);\n        }\n        return _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.tidy(() => _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.concat(sortedTracks.map((track) => this.trackToTensor(track)), 0));\n    }\n    tokensToTrack(tokens) {\n        const idx = tokens.indexOf(this.endToken);\n        const endIndex = idx >= 0 ? idx : tokens.length;\n        const trackTokens = tokens.slice(0, endIndex);\n        const eventTokens = trackTokens.filter((token) => token < this.performanceEventDepth);\n        const programTokens = trackTokens.filter((token) => token >= this.performanceEventDepth);\n        const [program, isDrum] = programTokens.length ?\n            (programTokens[0] - this.performanceEventDepth < this.numPrograms - 1 ?\n                [programTokens[0] - this.performanceEventDepth, false] :\n                [0, true]) :\n            [0, false];\n        const events = Array.from(eventTokens).map((token) => {\n            if (token < this.numPitches) {\n                return { type: 'note-on', pitch: this.minPitch + token };\n            }\n            else if (token < 2 * this.numPitches) {\n                return {\n                    type: 'note-off',\n                    pitch: this.minPitch + token - this.numPitches\n                };\n            }\n            else if (token < 2 * this.numPitches + this.totalSteps) {\n                return {\n                    type: 'time-shift',\n                    steps: token - 2 * this.numPitches + 1\n                };\n            }\n            else if (token <\n                2 * this.numPitches + this.totalSteps + this.numVelocityBins) {\n                return {\n                    type: 'velocity-change',\n                    velocityBin: token - 2 * this.numPitches - this.totalSteps + 1\n                };\n            }\n            else {\n                throw new Error(`Invalid performance event token: ${token}`);\n            }\n        });\n        return new _performance__WEBPACK_IMPORTED_MODULE_5__.Performance(events, this.totalSteps, this.numVelocityBins, program, isDrum);\n    }\n    async toNoteSequence(oh, stepsPerQuarter = this.stepsPerQuarter, qpm) {\n        const noteSequence = _sequences__WEBPACK_IMPORTED_MODULE_6__.createQuantizedNoteSequence(stepsPerQuarter, qpm);\n        noteSequence.totalQuantizedSteps = this.totalSteps;\n        const tensors = _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.tidy(() => _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.split(oh.argMax(1), this.numSegments));\n        const tracks = await Promise.all(tensors.map(async (tensor) => {\n            const tokens = await tensor.data();\n            const track = this.tokensToTrack(tokens);\n            tensor.dispose();\n            return track;\n        }));\n        tracks.forEach((track, instrument) => {\n            track.setNumSteps(this.totalSteps);\n            noteSequence.notes.push(...track.toNoteSequence(instrument).notes);\n        });\n        return noteSequence;\n    }\n}\nclass GrooveConverter extends DataConverter {\n    constructor(args) {\n        super(args);\n        this.TAPIFY_CHANNEL = 3;\n        this.stepsPerQuarter =\n            args.stepsPerQuarter || _constants__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_STEPS_PER_QUARTER;\n        this.pitchClasses = args.pitchClasses || _constants__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_DRUM_PITCH_CLASSES;\n        this.pitchToClass = new Map();\n        for (let c = 0; c < this.pitchClasses.length; ++c) {\n            this.pitchClasses[c].forEach((p) => {\n                this.pitchToClass.set(p, c);\n            });\n        }\n        this.humanize = args.humanize || false;\n        this.tapify = args.tapify || false;\n        this.splitInstruments = args.splitInstruments || false;\n        this.depth = 3;\n    }\n    toTensor(ns) {\n        const qns = _sequences__WEBPACK_IMPORTED_MODULE_6__.isRelativeQuantizedSequence(ns) ?\n            ns :\n            _sequences__WEBPACK_IMPORTED_MODULE_6__.quantizeNoteSequence(ns, this.stepsPerQuarter);\n        const numSteps = this.numSteps;\n        const qpm = (qns.tempos && qns.tempos.length) ?\n            qns.tempos[0].qpm :\n            _constants__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_QUARTERS_PER_MINUTE;\n        const stepLength = (60. / qpm) / this.stepsPerQuarter;\n        const stepNotes = [];\n        for (let i = 0; i < numSteps; ++i) {\n            stepNotes.push(new Map());\n        }\n        qns.notes.forEach(n => {\n            if (!(this.tapify || this.pitchToClass.has(n.pitch))) {\n                return;\n            }\n            const s = n.quantizedStartStep;\n            if (s >= stepNotes.length) {\n                throw Error(`Model does not support sequences with more than ${numSteps} steps (${numSteps * stepLength} seconds at qpm ${qpm}).`);\n            }\n            const d = this.tapify ? this.TAPIFY_CHANNEL : this.pitchToClass.get(n.pitch);\n            if (!stepNotes[s].has(d) || stepNotes[s].get(d).velocity < n.velocity) {\n                stepNotes[s].set(d, n);\n            }\n        });\n        const numDrums = this.pitchClasses.length;\n        const hitVectors = _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.buffer([numSteps, numDrums]);\n        const velocityVectors = _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.buffer([numSteps, numDrums]);\n        const offsetVectors = _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.buffer([numSteps, numDrums]);\n        function getOffset(n) {\n            if (n.startTime === undefined) {\n                return 0;\n            }\n            const tOnset = n.startTime;\n            const qOnset = n.quantizedStartStep * stepLength;\n            return 2 * (qOnset - tOnset) / stepLength;\n        }\n        for (let s = 0; s < numSteps; ++s) {\n            for (let d = 0; d < numDrums; ++d) {\n                const note = stepNotes[s].get(d);\n                hitVectors.set(note ? 1 : 0, s, d);\n                if (!this.humanize && !this.tapify) {\n                    velocityVectors.set(note ? note.velocity / _constants__WEBPACK_IMPORTED_MODULE_2__.MAX_MIDI_VELOCITY : 0, s, d);\n                }\n                if (!this.humanize) {\n                    offsetVectors.set(note ? getOffset(note) : 0, s, d);\n                }\n            }\n        }\n        return _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.tidy(() => {\n            const hits = hitVectors.toTensor();\n            const velocities = velocityVectors.toTensor();\n            const offsets = offsetVectors.toTensor();\n            const outLength = this.splitInstruments ? numSteps * numDrums : numSteps;\n            return _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.concat([\n                hits.as2D(outLength, -1), velocities.as2D(outLength, -1),\n                offsets.as2D(outLength, -1)\n            ], 1);\n        });\n    }\n    async toNoteSequence(t, stepsPerQuarter, qpm = _constants__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_QUARTERS_PER_MINUTE) {\n        if (stepsPerQuarter && stepsPerQuarter !== this.stepsPerQuarter) {\n            throw Error('`stepsPerQuarter` is set by the model.');\n        }\n        stepsPerQuarter = this.stepsPerQuarter;\n        const numSteps = this.splitInstruments ?\n            t.shape[0] / this.pitchClasses.length :\n            t.shape[0];\n        const stepLength = (60. / qpm) / this.stepsPerQuarter;\n        const ns = _protobuf_index__WEBPACK_IMPORTED_MODULE_1__.NoteSequence.create({ totalTime: numSteps * stepLength, tempos: [{ qpm }] });\n        const results = await t.data();\n        function clip(v, min, max) {\n            return Math.min(Math.max(v, min), max);\n        }\n        const numDrums = this.pitchClasses.length;\n        for (let s = 0; s < numSteps; ++s) {\n            const stepResults = results.slice(s * numDrums * this.depth, (s + 1) * numDrums * this.depth);\n            for (let d = 0; d < numDrums; ++d) {\n                const hitOutput = stepResults[this.splitInstruments ? d * this.depth : d];\n                const velI = this.splitInstruments ? (d * this.depth + 1) : (numDrums + d);\n                const velOutput = stepResults[velI];\n                const offsetI = this.splitInstruments ? (d * this.depth + 2) : (2 * numDrums + d);\n                const offsetOutput = stepResults[offsetI];\n                if (hitOutput > 0.5) {\n                    const velocity = clip(Math.round(velOutput * _constants__WEBPACK_IMPORTED_MODULE_2__.MAX_MIDI_VELOCITY), _constants__WEBPACK_IMPORTED_MODULE_2__.MIN_MIDI_VELOCITY, _constants__WEBPACK_IMPORTED_MODULE_2__.MAX_MIDI_VELOCITY);\n                    const offset = clip(offsetOutput / 2, -0.5, 0.5);\n                    ns.notes.push(_protobuf_index__WEBPACK_IMPORTED_MODULE_1__.NoteSequence.Note.create({\n                        pitch: this.pitchClasses[d][0],\n                        startTime: (s - offset) * stepLength,\n                        endTime: (s - offset + 1) * stepLength,\n                        velocity,\n                        isDrum: true\n                    }));\n                }\n            }\n        }\n        return ns;\n    }\n}\n//# sourceMappingURL=data.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1hZ2VudGErbXVzaWNAMS4yMy4xX0B0ZW5zb3JmbG93K3RmanMtY29yZUAyLjguNl9zZWVkcmFuZG9tQDIuNC40L25vZGVfbW9kdWxlcy9AbWFnZW50YS9tdXNpYy9lc20vY29yZS9kYXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF1QztBQUNVO0FBQ1I7QUFDZ0I7QUFDcEI7QUFDMEI7QUFDbEI7QUFDSjtBQUNIO0FBQy9CO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsS0FBSztBQUNoRTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0RBQVM7QUFDeEI7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLGlEQUFpRCxrRUFBMEI7QUFDM0U7QUFDQSx3QkFBd0IsOEJBQThCO0FBQ3REO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFtQztBQUMzQztBQUNBLHlCQUF5QixvREFBUztBQUNsQyx3QkFBd0IsY0FBYztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixtRUFBcUM7QUFDbEU7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLG1CQUFtQjtBQUMzQyw0QkFBNEIsOEJBQThCO0FBQzFEO0FBQ0EsNENBQTRDLHlEQUFZO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLDZCQUE2QixtRUFBcUM7QUFDbEU7QUFDQSx3QkFBd0IsbUJBQW1CO0FBQzNDO0FBQ0EsNEJBQTRCLG9CQUFvQjtBQUNoRDtBQUNBLDRDQUE0Qyx5REFBWTtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEseUVBQTJDO0FBQ25EO0FBQ0E7QUFDQSxxQkFBcUIsNEJBQTRCO0FBQ2pEO0FBQ0E7QUFDQSxlQUFlLGtEQUFPLE9BQU8sb0RBQVMsQ0FBQyxzREFBVztBQUNsRDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw2Q0FBTTtBQUM3QixlQUFlLGtEQUFPLE9BQU8sb0RBQVMsQ0FBQyxvREFBUztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDZDQUFNO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDZDQUFNO0FBQzdCO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSx3QkFBd0IsbURBQVk7QUFDcEM7QUFDQTtBQUNBLDZCQUE2QixtRUFBcUM7QUFDbEU7QUFDQSx3QkFBd0IsbUJBQW1CO0FBQzNDO0FBQ0Esd0NBQXdDLHlEQUFZO0FBQ3BELDJCQUEyQixrRUFBMEI7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSx3QkFBd0Isa0RBQVc7QUFDbkM7QUFDQTtBQUNBLDZCQUE2QixtRUFBcUM7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUNBQVc7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHlDQUFXO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MseURBQVksZUFBZSx1REFBdUQ7QUFDdEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFtQztBQUMzQyx1QkFBdUIsNkNBQWU7QUFDdEMsd0JBQXdCLDZDQUFlO0FBQ3ZDLHlCQUF5Qiw2Q0FBZTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxrREFBTyxPQUFPLG9EQUFTO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixtREFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsa0RBQU87QUFDdEI7QUFDQSxzQ0FBc0MsbURBQVE7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsb0RBQVM7QUFDMUMsK0JBQStCLG9EQUFTO0FBQ3hDLGdDQUFnQyxvREFBUztBQUN6QyxpQ0FBaUMscURBQVU7QUFDM0MsK0JBQStCLHFEQUFVO0FBQ3pDLGdDQUFnQyxxREFBVTtBQUMxQyxtQkFBbUIsbURBQVE7QUFDM0IsU0FBUztBQUNUO0FBQ0E7QUFDQSw4QkFBOEIsbURBQVE7QUFDdEM7QUFDQSw2QkFBNkIsbUVBQXFDO0FBQ2xFLHdCQUF3QixtQkFBbUI7QUFDM0M7QUFDQSx3Q0FBd0MseURBQVk7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0Esd0NBQXdDLHlEQUFZO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLHdDQUF3Qyx5REFBWTtBQUNwRCwyQkFBMkIsa0VBQTBCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELHNEQUF3QjtBQUNoRix3REFBd0Qsc0RBQXdCO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx3REFBMEIsR0FBRyx3REFBMEI7QUFDbkU7QUFDQTtBQUNBLHlCQUF5QixrREFBTyxPQUFPLG9EQUFTLENBQUMsc0RBQVc7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG9EQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyRUFBMkUsTUFBTTtBQUNqRjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsb0RBQVM7QUFDOUI7QUFDQSxlQUFlLGtEQUFPO0FBQ3RCLHVCQUF1QixvREFBUztBQUNoQztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsUUFBUSx5RUFBMkM7QUFDbkQ7QUFDQTtBQUNBLGdFQUFnRSwrQ0FBK0MsS0FBSyxxQkFBcUI7QUFDekk7QUFDQSxvQkFBb0IsNkNBQWU7QUFDbkM7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLHFEQUF1QjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxrREFBTyxPQUFPLG9EQUFTO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FLE1BQU07QUFDMUU7QUFDQSxTQUFTO0FBQ1QsbUJBQW1CLHFEQUF1QjtBQUMxQztBQUNBO0FBQ0EsNkJBQTZCLG1FQUFxQztBQUNsRTtBQUNBLHdCQUF3QixrREFBTyxPQUFPLG1EQUFRO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsaUVBQW1DO0FBQ3ZFLGlEQUFpRCxrRUFBMEI7QUFDM0U7QUFDQSx3QkFBd0IsOEJBQThCO0FBQ3REO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsbUVBQXFDO0FBQ3pEO0FBQ0EsWUFBWSw0REFBOEI7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsWUFBWSxtRUFBcUM7QUFDakQ7QUFDQTtBQUNBLHdCQUF3QixjQUFjO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0UsVUFBVSxTQUFTLHVCQUF1QixpQkFBaUIsSUFBSTtBQUM5STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsMkJBQTJCLG9EQUFTO0FBQ3BDLGdDQUFnQyxvREFBUztBQUN6Qyw4QkFBOEIsb0RBQVM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixjQUFjO0FBQ3RDLDRCQUE0QixjQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCx5REFBMkI7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxrREFBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixvREFBUztBQUM1QjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxtREFBbUQsbUVBQXFDO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIseURBQVksVUFBVSw2Q0FBNkMsS0FBSyxHQUFHO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsY0FBYztBQUN0QztBQUNBLDRCQUE0QixjQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRSx5REFBMkIsR0FBRyx5REFBMkIsRUFBRSx5REFBMkI7QUFDdko7QUFDQSxrQ0FBa0MseURBQVk7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21vbW9uZ2FoLmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbWFnZW50YSttdXNpY0AxLjIzLjFfQHRlbnNvcmZsb3crdGZqcy1jb3JlQDIuOC42X3NlZWRyYW5kb21AMi40LjQvbm9kZV9tb2R1bGVzL0BtYWdlbnRhL211c2ljL2VzbS9jb3JlL2RhdGEuanM/ZDkzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzJztcbmltcG9ydCB7IE5vdGVTZXF1ZW5jZSB9IGZyb20gJy4uL3Byb3RvYnVmL2luZGV4JztcbmltcG9ydCAqIGFzIGNvbnN0YW50cyBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBERUZBVUxUX0RSVU1fUElUQ0hfQ0xBU1NFUyB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCAqIGFzIGxvZ2dpbmcgZnJvbSAnLi9sb2dnaW5nJztcbmltcG9ydCB7IE1lbG9keSwgTWVsb2R5Umh5dGhtLCBNZWxvZHlTaGFwZSB9IGZyb20gJy4vbWVsb2RpZXMnO1xuaW1wb3J0ICogYXMgcGVyZm9ybWFuY2UgZnJvbSAnLi9wZXJmb3JtYW5jZSc7XG5pbXBvcnQgKiBhcyBzZXF1ZW5jZXMgZnJvbSAnLi9zZXF1ZW5jZXMnO1xuZXhwb3J0IHsgREVGQVVMVF9EUlVNX1BJVENIX0NMQVNTRVMgfTtcbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0ZXJGcm9tU3BlYyhzcGVjKSB7XG4gICAgc3dpdGNoIChzcGVjLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnTWVsb2R5Q29udmVydGVyJzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgTWVsb2R5Q29udmVydGVyKHNwZWMuYXJncyk7XG4gICAgICAgIGNhc2UgJ01lbG9keVJoeXRobUNvbnZlcnRlcic6XG4gICAgICAgICAgICByZXR1cm4gbmV3IE1lbG9keVJoeXRobUNvbnZlcnRlcihzcGVjLmFyZ3MpO1xuICAgICAgICBjYXNlICdNZWxvZHlTaGFwZUNvbnZlcnRlcic6XG4gICAgICAgICAgICByZXR1cm4gbmV3IE1lbG9keVNoYXBlQ29udmVydGVyKHNwZWMuYXJncyk7XG4gICAgICAgIGNhc2UgJ0RydW1zQ29udmVydGVyJzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgRHJ1bXNDb252ZXJ0ZXIoc3BlYy5hcmdzKTtcbiAgICAgICAgY2FzZSAnRHJ1bVJvbGxDb252ZXJ0ZXInOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEcnVtUm9sbENvbnZlcnRlcihzcGVjLmFyZ3MpO1xuICAgICAgICBjYXNlICdUcmlvQ29udmVydGVyJzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgVHJpb0NvbnZlcnRlcihzcGVjLmFyZ3MpO1xuICAgICAgICBjYXNlICdUcmlvUmh5dGhtQ29udmVydGVyJzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgVHJpb1JoeXRobUNvbnZlcnRlcihzcGVjLmFyZ3MpO1xuICAgICAgICBjYXNlICdEcnVtc09uZUhvdENvbnZlcnRlcic6XG4gICAgICAgICAgICByZXR1cm4gbmV3IERydW1zT25lSG90Q29udmVydGVyKHNwZWMuYXJncyk7XG4gICAgICAgIGNhc2UgJ011bHRpdHJhY2tDb252ZXJ0ZXInOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBNdWx0aXRyYWNrQ29udmVydGVyKHNwZWMuYXJncyk7XG4gICAgICAgIGNhc2UgJ0dyb292ZUNvbnZlcnRlcic6XG4gICAgICAgICAgICByZXR1cm4gbmV3IEdyb292ZUNvbnZlcnRlcihzcGVjLmFyZ3MpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIERhdGFDb252ZXJ0ZXIgdHlwZTogJHtzcGVjfWApO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBEYXRhQ29udmVydGVyIHtcbiAgICBjb25zdHJ1Y3RvcihhcmdzKSB7XG4gICAgICAgIHRoaXMuTlVNX1NQTElUUyA9IDA7XG4gICAgICAgIHRoaXMuU0VHTUVOVEVEX0JZX1RSQUNLID0gZmFsc2U7XG4gICAgICAgIHRoaXMubnVtU3RlcHMgPSBhcmdzLm51bVN0ZXBzO1xuICAgICAgICB0aGlzLm51bVNlZ21lbnRzID0gYXJncy5udW1TZWdtZW50cztcbiAgICB9XG4gICAgdGVuc29yU3RlcHModGVuc29yKSB7XG4gICAgICAgIHJldHVybiB0Zi5zY2FsYXIodGVuc29yLnNoYXBlWzBdLCAnaW50MzInKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgRHJ1bXNDb252ZXJ0ZXIgZXh0ZW5kcyBEYXRhQ29udmVydGVyIHtcbiAgICBjb25zdHJ1Y3RvcihhcmdzKSB7XG4gICAgICAgIHN1cGVyKGFyZ3MpO1xuICAgICAgICB0aGlzLnBpdGNoQ2xhc3NlcyA9IGFyZ3MucGl0Y2hDbGFzc2VzIHx8IERFRkFVTFRfRFJVTV9QSVRDSF9DTEFTU0VTO1xuICAgICAgICB0aGlzLnBpdGNoVG9DbGFzcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0aGlzLnBpdGNoQ2xhc3Nlcy5sZW5ndGg7ICsrYykge1xuICAgICAgICAgICAgdGhpcy5waXRjaENsYXNzZXNbY10uZm9yRWFjaCgocCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucGl0Y2hUb0NsYXNzLnNldChwLCBjKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVwdGggPSB0aGlzLnBpdGNoQ2xhc3Nlcy5sZW5ndGggKyAxO1xuICAgIH1cbiAgICB0b1RlbnNvcihub3RlU2VxdWVuY2UpIHtcbiAgICAgICAgc2VxdWVuY2VzLmFzc2VydElzUXVhbnRpemVkU2VxdWVuY2Uobm90ZVNlcXVlbmNlKTtcbiAgICAgICAgY29uc3QgbnVtU3RlcHMgPSB0aGlzLm51bVN0ZXBzIHx8IG5vdGVTZXF1ZW5jZS50b3RhbFF1YW50aXplZFN0ZXBzO1xuICAgICAgICBjb25zdCBkcnVtUm9sbCA9IHRmLmJ1ZmZlcihbbnVtU3RlcHMsIHRoaXMucGl0Y2hDbGFzc2VzLmxlbmd0aCArIDFdLCAnaW50MzInKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1TdGVwczsgKytpKSB7XG4gICAgICAgICAgICBkcnVtUm9sbC5zZXQoMSwgaSwgLTEpO1xuICAgICAgICB9XG4gICAgICAgIG5vdGVTZXF1ZW5jZS5ub3Rlcy5mb3JFYWNoKChub3RlKSA9PiB7XG4gICAgICAgICAgICBkcnVtUm9sbC5zZXQoMSwgbm90ZS5xdWFudGl6ZWRTdGFydFN0ZXAsIHRoaXMucGl0Y2hUb0NsYXNzLmdldChub3RlLnBpdGNoKSk7XG4gICAgICAgICAgICBkcnVtUm9sbC5zZXQoMCwgbm90ZS5xdWFudGl6ZWRTdGFydFN0ZXAsIC0xKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBkcnVtUm9sbC50b1RlbnNvcigpO1xuICAgIH1cbiAgICBhc3luYyB0b05vdGVTZXF1ZW5jZShvaCwgc3RlcHNQZXJRdWFydGVyLCBxcG0pIHtcbiAgICAgICAgY29uc3Qgbm90ZVNlcXVlbmNlID0gc2VxdWVuY2VzLmNyZWF0ZVF1YW50aXplZE5vdGVTZXF1ZW5jZShzdGVwc1BlclF1YXJ0ZXIsIHFwbSk7XG4gICAgICAgIGNvbnN0IGxhYmVsc1RlbnNvciA9IG9oLmFyZ01heCgxKTtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gYXdhaXQgbGFiZWxzVGVuc29yLmRhdGEoKTtcbiAgICAgICAgbGFiZWxzVGVuc29yLmRpc3Bvc2UoKTtcbiAgICAgICAgZm9yIChsZXQgcyA9IDA7IHMgPCBsYWJlbHMubGVuZ3RoOyArK3MpIHtcbiAgICAgICAgICAgIGZvciAobGV0IHAgPSAwOyBwIDwgdGhpcy5waXRjaENsYXNzZXMubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgICAgICAgICBpZiAobGFiZWxzW3NdID4+IHAgJiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vdGVTZXF1ZW5jZS5ub3Rlcy5wdXNoKE5vdGVTZXF1ZW5jZS5Ob3RlLmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBwaXRjaDogdGhpcy5waXRjaENsYXNzZXNbcF1bMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWFudGl6ZWRTdGFydFN0ZXA6IHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWFudGl6ZWRFbmRTdGVwOiBzICsgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRHJ1bTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5vdGVTZXF1ZW5jZS50b3RhbFF1YW50aXplZFN0ZXBzID0gbGFiZWxzLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIG5vdGVTZXF1ZW5jZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgRHJ1bVJvbGxDb252ZXJ0ZXIgZXh0ZW5kcyBEcnVtc0NvbnZlcnRlciB7XG4gICAgYXN5bmMgdG9Ob3RlU2VxdWVuY2Uocm9sbCwgc3RlcHNQZXJRdWFydGVyLCBxcG0pIHtcbiAgICAgICAgY29uc3Qgbm90ZVNlcXVlbmNlID0gc2VxdWVuY2VzLmNyZWF0ZVF1YW50aXplZE5vdGVTZXF1ZW5jZShzdGVwc1BlclF1YXJ0ZXIsIHFwbSk7XG4gICAgICAgIGNvbnN0IGZsYXRSb2xsID0gYXdhaXQgcm9sbC5kYXRhKCk7XG4gICAgICAgIGZvciAobGV0IHMgPSAwOyBzIDwgcm9sbC5zaGFwZVswXTsgKytzKSB7XG4gICAgICAgICAgICBjb25zdCBwaXRjaGVzID0gZmxhdFJvbGwuc2xpY2UocyAqIHRoaXMucGl0Y2hDbGFzc2VzLmxlbmd0aCwgKHMgKyAxKSAqIHRoaXMucGl0Y2hDbGFzc2VzLmxlbmd0aCk7XG4gICAgICAgICAgICBmb3IgKGxldCBwID0gMDsgcCA8IHBpdGNoZXMubGVuZ3RoOyArK3ApIHtcbiAgICAgICAgICAgICAgICBpZiAocGl0Y2hlc1twXSkge1xuICAgICAgICAgICAgICAgICAgICBub3RlU2VxdWVuY2Uubm90ZXMucHVzaChOb3RlU2VxdWVuY2UuTm90ZS5jcmVhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcGl0Y2g6IHRoaXMucGl0Y2hDbGFzc2VzW3BdWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVhbnRpemVkU3RhcnRTdGVwOiBzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVhbnRpemVkRW5kU3RlcDogcyArIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0RydW06IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBub3RlU2VxdWVuY2UudG90YWxRdWFudGl6ZWRTdGVwcyA9IHJvbGwuc2hhcGVbMF07XG4gICAgICAgIHJldHVybiBub3RlU2VxdWVuY2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIERydW1zT25lSG90Q29udmVydGVyIGV4dGVuZHMgRHJ1bXNDb252ZXJ0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGFyZ3MpIHtcbiAgICAgICAgc3VwZXIoYXJncyk7XG4gICAgICAgIHRoaXMuZGVwdGggPSBNYXRoLnBvdygyLCB0aGlzLnBpdGNoQ2xhc3Nlcy5sZW5ndGgpO1xuICAgIH1cbiAgICB0b1RlbnNvcihub3RlU2VxdWVuY2UpIHtcbiAgICAgICAgc2VxdWVuY2VzLmFzc2VydElzUmVsYXRpdmVRdWFudGl6ZWRTZXF1ZW5jZShub3RlU2VxdWVuY2UpO1xuICAgICAgICBjb25zdCBudW1TdGVwcyA9IHRoaXMubnVtU3RlcHMgfHwgbm90ZVNlcXVlbmNlLnRvdGFsUXVhbnRpemVkU3RlcHM7XG4gICAgICAgIGNvbnN0IGxhYmVscyA9IEFycmF5KG51bVN0ZXBzKS5maWxsKDApO1xuICAgICAgICBmb3IgKGNvbnN0IHsgcGl0Y2gsIHF1YW50aXplZFN0YXJ0U3RlcCB9IG9mIG5vdGVTZXF1ZW5jZS5ub3Rlcykge1xuICAgICAgICAgICAgbGFiZWxzW3F1YW50aXplZFN0YXJ0U3RlcF0gKz0gTWF0aC5wb3coMiwgdGhpcy5waXRjaFRvQ2xhc3MuZ2V0KHBpdGNoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRmLnRpZHkoKCkgPT4gdGYub25lSG90KHRmLnRlbnNvcjFkKGxhYmVscywgJ2ludDMyJyksIHRoaXMuZGVwdGgpKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTWVsb2R5Q29udmVydGVyIGV4dGVuZHMgRGF0YUNvbnZlcnRlciB7XG4gICAgY29uc3RydWN0b3IoYXJncykge1xuICAgICAgICBzdXBlcihhcmdzKTtcbiAgICAgICAgdGhpcy5OT1RFX09GRiA9IDE7XG4gICAgICAgIHRoaXMuRklSU1RfUElUQ0ggPSAyO1xuICAgICAgICB0aGlzLm1pblBpdGNoID0gYXJncy5taW5QaXRjaDtcbiAgICAgICAgdGhpcy5tYXhQaXRjaCA9IGFyZ3MubWF4UGl0Y2g7XG4gICAgICAgIHRoaXMuaWdub3JlUG9seXBob255ID0gYXJncy5pZ25vcmVQb2x5cGhvbnk7XG4gICAgICAgIHRoaXMuZGVwdGggPSBhcmdzLm1heFBpdGNoIC0gYXJncy5taW5QaXRjaCArIDEgKyB0aGlzLkZJUlNUX1BJVENIO1xuICAgIH1cbiAgICB0b1RlbnNvcihub3RlU2VxdWVuY2UpIHtcbiAgICAgICAgY29uc3QgbWVsb2R5ID0gTWVsb2R5LmZyb21Ob3RlU2VxdWVuY2Uobm90ZVNlcXVlbmNlLCB0aGlzLm1pblBpdGNoLCB0aGlzLm1heFBpdGNoLCB0aGlzLmlnbm9yZVBvbHlwaG9ueSwgdGhpcy5udW1TdGVwcyk7XG4gICAgICAgIHJldHVybiB0Zi50aWR5KCgpID0+IHRmLm9uZUhvdCh0Zi50ZW5zb3IobWVsb2R5LmV2ZW50cywgW21lbG9keS5ldmVudHMubGVuZ3RoXSwgJ2ludDMyJyksIHRoaXMuZGVwdGgpKTtcbiAgICB9XG4gICAgYXN5bmMgdG9Ob3RlU2VxdWVuY2Uob2gsIHN0ZXBzUGVyUXVhcnRlciwgcXBtKSB7XG4gICAgICAgIGNvbnN0IGxhYmVsc1RlbnNvciA9IG9oLmFyZ01heCgxKTtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gYXdhaXQgbGFiZWxzVGVuc29yLmRhdGEoKTtcbiAgICAgICAgbGFiZWxzVGVuc29yLmRpc3Bvc2UoKTtcbiAgICAgICAgY29uc3QgbWVsb2R5ID0gbmV3IE1lbG9keShsYWJlbHMsIHRoaXMubWluUGl0Y2gsIHRoaXMubWF4UGl0Y2gpO1xuICAgICAgICByZXR1cm4gbWVsb2R5LnRvTm90ZVNlcXVlbmNlKHN0ZXBzUGVyUXVhcnRlciwgcXBtKTtcbiAgICB9XG59XG5jbGFzcyBNZWxvZHlDb250cm9sQ29udmVydGVyIGV4dGVuZHMgRGF0YUNvbnZlcnRlciB7XG4gICAgY29uc3RydWN0b3IoYXJncywgbWVsb2R5Q29udHJvbCkge1xuICAgICAgICBzdXBlcihhcmdzKTtcbiAgICAgICAgdGhpcy5taW5QaXRjaCA9IGFyZ3MubWluUGl0Y2g7XG4gICAgICAgIHRoaXMubWF4UGl0Y2ggPSBhcmdzLm1heFBpdGNoO1xuICAgICAgICB0aGlzLmlnbm9yZVBvbHlwaG9ueSA9IGFyZ3MuaWdub3JlUG9seXBob255O1xuICAgICAgICB0aGlzLm1lbG9keUNvbnRyb2wgPSBtZWxvZHlDb250cm9sO1xuICAgICAgICB0aGlzLmRlcHRoID0gbWVsb2R5Q29udHJvbC5kZXB0aDtcbiAgICB9XG4gICAgdG9UZW5zb3Iobm90ZVNlcXVlbmNlKSB7XG4gICAgICAgIGNvbnN0IG1lbG9keSA9IE1lbG9keS5mcm9tTm90ZVNlcXVlbmNlKG5vdGVTZXF1ZW5jZSwgdGhpcy5taW5QaXRjaCwgdGhpcy5tYXhQaXRjaCwgdGhpcy5pZ25vcmVQb2x5cGhvbnksIHRoaXMubnVtU3RlcHMpO1xuICAgICAgICByZXR1cm4gdGhpcy5tZWxvZHlDb250cm9sLmV4dHJhY3QobWVsb2R5KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTWVsb2R5Umh5dGhtQ29udmVydGVyIGV4dGVuZHMgTWVsb2R5Q29udHJvbENvbnZlcnRlciB7XG4gICAgY29uc3RydWN0b3IoYXJncykge1xuICAgICAgICBzdXBlcihhcmdzLCBuZXcgTWVsb2R5Umh5dGhtKCkpO1xuICAgIH1cbiAgICBhc3luYyB0b05vdGVTZXF1ZW5jZSh0ZW5zb3IsIHN0ZXBzUGVyUXVhcnRlciwgcXBtKSB7XG4gICAgICAgIGNvbnN0IG5vdGVTZXF1ZW5jZSA9IHNlcXVlbmNlcy5jcmVhdGVRdWFudGl6ZWROb3RlU2VxdWVuY2Uoc3RlcHNQZXJRdWFydGVyLCBxcG0pO1xuICAgICAgICBjb25zdCByaHl0aG0gPSBhd2FpdCB0ZW5zb3IuZGF0YSgpO1xuICAgICAgICBmb3IgKGxldCBzID0gMDsgcyA8IHJoeXRobS5sZW5ndGg7ICsrcykge1xuICAgICAgICAgICAgaWYgKHJoeXRobVtzXSkge1xuICAgICAgICAgICAgICAgIG5vdGVTZXF1ZW5jZS5ub3Rlcy5wdXNoKE5vdGVTZXF1ZW5jZS5Ob3RlLmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHBpdGNoOiBERUZBVUxUX0RSVU1fUElUQ0hfQ0xBU1NFU1sxXVswXSxcbiAgICAgICAgICAgICAgICAgICAgcXVhbnRpemVkU3RhcnRTdGVwOiBzLFxuICAgICAgICAgICAgICAgICAgICBxdWFudGl6ZWRFbmRTdGVwOiBzICsgMSxcbiAgICAgICAgICAgICAgICAgICAgaXNEcnVtOiB0cnVlXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5vdGVTZXF1ZW5jZS50b3RhbFF1YW50aXplZFN0ZXBzID0gcmh5dGhtLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIG5vdGVTZXF1ZW5jZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTWVsb2R5U2hhcGVDb252ZXJ0ZXIgZXh0ZW5kcyBNZWxvZHlDb250cm9sQ29udmVydGVyIHtcbiAgICBjb25zdHJ1Y3RvcihhcmdzKSB7XG4gICAgICAgIHN1cGVyKGFyZ3MsIG5ldyBNZWxvZHlTaGFwZSgpKTtcbiAgICB9XG4gICAgYXN5bmMgdG9Ob3RlU2VxdWVuY2Uob2gsIHN0ZXBzUGVyUXVhcnRlciwgcXBtKSB7XG4gICAgICAgIGNvbnN0IG5vdGVTZXF1ZW5jZSA9IHNlcXVlbmNlcy5jcmVhdGVRdWFudGl6ZWROb3RlU2VxdWVuY2Uoc3RlcHNQZXJRdWFydGVyLCBxcG0pO1xuICAgICAgICBjb25zdCBzaGFwZVRlbnNvciA9IG9oLmFyZ01heCgxKTtcbiAgICAgICAgY29uc3Qgc2hhcGUgPSBhd2FpdCBzaGFwZVRlbnNvci5kYXRhKCk7XG4gICAgICAgIHNoYXBlVGVuc29yLmRpc3Bvc2UoKTtcbiAgICAgICAgbGV0IHBpdGNoID0gTWF0aC5yb3VuZCgodGhpcy5tYXhQaXRjaCArIHRoaXMubWluUGl0Y2gpIC8gMik7XG4gICAgICAgIGZvciAobGV0IHMgPSAwOyBzIDwgc2hhcGUubGVuZ3RoOyArK3MpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoc2hhcGVbc10pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHBpdGNoIC09IDE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwaXRjaCA8IHRoaXMubWluUGl0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBpdGNoID0gdGhpcy5taW5QaXRjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dpbmcubG9nKCdQaXRjaCByYW5nZSBleGNlZWRlZCB3aGVuIGNyZWF0aW5nIE5vdGVTZXF1ZW5jZSBmcm9tIHNoYXBlLicsICdNZWxvZHlTaGFwZUNvbnZlcnRlcicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgcGl0Y2ggKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBpdGNoID4gdGhpcy5tYXhQaXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGl0Y2ggPSB0aGlzLm1heFBpdGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2luZy5sb2coJ1BpdGNoIHJhbmdlIGV4Y2VlZGVkIHdoZW4gY3JlYXRpbmcgTm90ZVNlcXVlbmNlIGZyb20gc2hhcGUuJywgJ01lbG9keVNoYXBlQ29udmVydGVyJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub3RlU2VxdWVuY2Uubm90ZXMucHVzaChOb3RlU2VxdWVuY2UuTm90ZS5jcmVhdGUoeyBwaXRjaCwgcXVhbnRpemVkU3RhcnRTdGVwOiBzLCBxdWFudGl6ZWRFbmRTdGVwOiBzICsgMSB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgbm90ZVNlcXVlbmNlLnRvdGFsUXVhbnRpemVkU3RlcHMgPSBzaGFwZS5sZW5ndGg7XG4gICAgICAgIHJldHVybiBub3RlU2VxdWVuY2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFRyaW9Db252ZXJ0ZXIgZXh0ZW5kcyBEYXRhQ29udmVydGVyIHtcbiAgICBjb25zdHJ1Y3RvcihhcmdzKSB7XG4gICAgICAgIHN1cGVyKGFyZ3MpO1xuICAgICAgICB0aGlzLk5VTV9TUExJVFMgPSAzO1xuICAgICAgICB0aGlzLk1FTF9QUk9HX1JBTkdFID0gWzAsIDMxXTtcbiAgICAgICAgdGhpcy5CQVNTX1BST0dfUkFOR0UgPSBbMzIsIDM5XTtcbiAgICAgICAgYXJncy5tZWxBcmdzLm51bVN0ZXBzID0gYXJncy5udW1TdGVwcztcbiAgICAgICAgYXJncy5iYXNzQXJncy5udW1TdGVwcyA9IGFyZ3MubnVtU3RlcHM7XG4gICAgICAgIGFyZ3MuZHJ1bXNBcmdzLm51bVN0ZXBzID0gYXJncy5udW1TdGVwcztcbiAgICAgICAgdGhpcy5tZWxDb252ZXJ0ZXIgPSBuZXcgTWVsb2R5Q29udmVydGVyKGFyZ3MubWVsQXJncyk7XG4gICAgICAgIHRoaXMuYmFzc0NvbnZlcnRlciA9IG5ldyBNZWxvZHlDb252ZXJ0ZXIoYXJncy5iYXNzQXJncyk7XG4gICAgICAgIHRoaXMuZHJ1bXNDb252ZXJ0ZXIgPSBuZXcgRHJ1bXNPbmVIb3RDb252ZXJ0ZXIoYXJncy5kcnVtc0FyZ3MpO1xuICAgICAgICB0aGlzLmRlcHRoID1cbiAgICAgICAgICAgICh0aGlzLm1lbENvbnZlcnRlci5kZXB0aCArIHRoaXMuYmFzc0NvbnZlcnRlci5kZXB0aCArXG4gICAgICAgICAgICAgICAgdGhpcy5kcnVtc0NvbnZlcnRlci5kZXB0aCk7XG4gICAgfVxuICAgIHRvVGVuc29yKG5vdGVTZXF1ZW5jZSkge1xuICAgICAgICBzZXF1ZW5jZXMuYXNzZXJ0SXNRdWFudGl6ZWRTZXF1ZW5jZShub3RlU2VxdWVuY2UpO1xuICAgICAgICBjb25zdCBtZWxTZXEgPSBzZXF1ZW5jZXMuY2xvbmUobm90ZVNlcXVlbmNlKTtcbiAgICAgICAgY29uc3QgYmFzc1NlcSA9IHNlcXVlbmNlcy5jbG9uZShub3RlU2VxdWVuY2UpO1xuICAgICAgICBjb25zdCBkcnVtc1NlcSA9IHNlcXVlbmNlcy5jbG9uZShub3RlU2VxdWVuY2UpO1xuICAgICAgICBtZWxTZXEubm90ZXMgPSBub3RlU2VxdWVuY2Uubm90ZXMuZmlsdGVyKG4gPT4gKCFuLmlzRHJ1bSAmJiBuLnByb2dyYW0gPj0gdGhpcy5NRUxfUFJPR19SQU5HRVswXSAmJlxuICAgICAgICAgICAgbi5wcm9ncmFtIDw9IHRoaXMuTUVMX1BST0dfUkFOR0VbMV0pKTtcbiAgICAgICAgYmFzc1NlcS5ub3RlcyA9IG5vdGVTZXF1ZW5jZS5ub3Rlcy5maWx0ZXIobiA9PiAoIW4uaXNEcnVtICYmIG4ucHJvZ3JhbSA+PSB0aGlzLkJBU1NfUFJPR19SQU5HRVswXSAmJlxuICAgICAgICAgICAgbi5wcm9ncmFtIDw9IHRoaXMuQkFTU19QUk9HX1JBTkdFWzFdKSk7XG4gICAgICAgIGRydW1zU2VxLm5vdGVzID0gbm90ZVNlcXVlbmNlLm5vdGVzLmZpbHRlcihuID0+IG4uaXNEcnVtKTtcbiAgICAgICAgcmV0dXJuIHRmLnRpZHkoKCkgPT4gdGYuY29uY2F0KFtcbiAgICAgICAgICAgIHRoaXMubWVsQ29udmVydGVyLnRvVGVuc29yKG1lbFNlcSksXG4gICAgICAgICAgICB0aGlzLmJhc3NDb252ZXJ0ZXIudG9UZW5zb3IoYmFzc1NlcSksXG4gICAgICAgICAgICB0aGlzLmRydW1zQ29udmVydGVyLnRvVGVuc29yKGRydW1zU2VxKVxuICAgICAgICBdLCAtMSkpO1xuICAgIH1cbiAgICBhc3luYyB0b05vdGVTZXF1ZW5jZSh0aCwgc3RlcHNQZXJRdWFydGVyLCBxcG0pIHtcbiAgICAgICAgY29uc3Qgb2hzID0gdGYuc3BsaXQodGgsIFtcbiAgICAgICAgICAgIHRoaXMubWVsQ29udmVydGVyLmRlcHRoLCB0aGlzLmJhc3NDb252ZXJ0ZXIuZGVwdGgsXG4gICAgICAgICAgICB0aGlzLmRydW1zQ29udmVydGVyLmRlcHRoXG4gICAgICAgIF0sIC0xKTtcbiAgICAgICAgY29uc3QgbnMgPSBhd2FpdCB0aGlzLm1lbENvbnZlcnRlci50b05vdGVTZXF1ZW5jZShvaHNbMF0sIHN0ZXBzUGVyUXVhcnRlciwgcXBtKTtcbiAgICAgICAgbnMubm90ZXMuZm9yRWFjaChuID0+IHtcbiAgICAgICAgICAgIG4uaW5zdHJ1bWVudCA9IDA7XG4gICAgICAgICAgICBuLnByb2dyYW0gPSAwO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgYmFzc05zID0gYXdhaXQgdGhpcy5iYXNzQ29udmVydGVyLnRvTm90ZVNlcXVlbmNlKG9oc1sxXSwgc3RlcHNQZXJRdWFydGVyLCBxcG0pO1xuICAgICAgICBucy5ub3Rlcy5wdXNoKC4uLmJhc3NOcy5ub3Rlcy5tYXAobiA9PiB7XG4gICAgICAgICAgICBuLmluc3RydW1lbnQgPSAxO1xuICAgICAgICAgICAgbi5wcm9ncmFtID0gdGhpcy5CQVNTX1BST0dfUkFOR0VbMF07XG4gICAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgfSkpO1xuICAgICAgICBjb25zdCBkcnVtc05zID0gYXdhaXQgdGhpcy5kcnVtc0NvbnZlcnRlci50b05vdGVTZXF1ZW5jZShvaHNbMl0sIHN0ZXBzUGVyUXVhcnRlciwgcXBtKTtcbiAgICAgICAgbnMubm90ZXMucHVzaCguLi5kcnVtc05zLm5vdGVzLm1hcChuID0+IHtcbiAgICAgICAgICAgIG4uaW5zdHJ1bWVudCA9IDI7XG4gICAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgfSkpO1xuICAgICAgICBvaHMuZm9yRWFjaChvaCA9PiBvaC5kaXNwb3NlKCkpO1xuICAgICAgICByZXR1cm4gbnM7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFRyaW9SaHl0aG1Db252ZXJ0ZXIgZXh0ZW5kcyBEYXRhQ29udmVydGVyIHtcbiAgICBjb25zdHJ1Y3RvcihhcmdzKSB7XG4gICAgICAgIHN1cGVyKGFyZ3MpO1xuICAgICAgICB0aGlzLk5VTV9TUExJVFMgPSAzO1xuICAgICAgICB0aGlzLnRyaW9Db252ZXJ0ZXIgPSBuZXcgVHJpb0NvbnZlcnRlcihhcmdzKTtcbiAgICAgICAgdGhpcy5kZXB0aCA9IDM7XG4gICAgfVxuICAgIHRvVGVuc29yKG5vdGVTZXF1ZW5jZSkge1xuICAgICAgICByZXR1cm4gdGYudGlkeSgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0cmlvVGVuc29yID0gdGhpcy50cmlvQ29udmVydGVyLnRvVGVuc29yKG5vdGVTZXF1ZW5jZSk7XG4gICAgICAgICAgICBjb25zdCBpbnN0cnVtZW50VGVuc29ycyA9IHRmLnNwbGl0KHRyaW9UZW5zb3IsIFtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaW9Db252ZXJ0ZXIubWVsQ29udmVydGVyLmRlcHRoLFxuICAgICAgICAgICAgICAgIHRoaXMudHJpb0NvbnZlcnRlci5iYXNzQ29udmVydGVyLmRlcHRoLFxuICAgICAgICAgICAgICAgIHRoaXMudHJpb0NvbnZlcnRlci5kcnVtc0NvbnZlcnRlci5kZXB0aFxuICAgICAgICAgICAgXSwgMSk7XG4gICAgICAgICAgICBjb25zdCBtZWxvZHlFdmVudHMgPSB0Zi5hcmdNYXgoaW5zdHJ1bWVudFRlbnNvcnNbMF0sIDEpO1xuICAgICAgICAgICAgY29uc3QgYmFzc0V2ZW50cyA9IHRmLmFyZ01heChpbnN0cnVtZW50VGVuc29yc1sxXSwgMSk7XG4gICAgICAgICAgICBjb25zdCBkcnVtc0V2ZW50cyA9IHRmLmFyZ01heChpbnN0cnVtZW50VGVuc29yc1syXSwgMSk7XG4gICAgICAgICAgICBjb25zdCBtZWxvZHlSaHl0aG0gPSB0Zi5ncmVhdGVyKG1lbG9keUV2ZW50cywgMSk7XG4gICAgICAgICAgICBjb25zdCBiYXNzUmh5dGhtID0gdGYuZ3JlYXRlcihiYXNzRXZlbnRzLCAxKTtcbiAgICAgICAgICAgIGNvbnN0IGRydW1zUmh5dGhtID0gdGYuZ3JlYXRlcihkcnVtc0V2ZW50cywgMCk7XG4gICAgICAgICAgICByZXR1cm4gdGYuc3RhY2soW21lbG9keVJoeXRobSwgYmFzc1JoeXRobSwgZHJ1bXNSaHl0aG1dLCAxKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIHRvTm90ZVNlcXVlbmNlKHRlbnNvciwgc3RlcHNQZXJRdWFydGVyLCBxcG0pIHtcbiAgICAgICAgY29uc3Qgcmh5dGhtVGVuc29ycyA9IHRmLnNwbGl0KHRlbnNvciwgMywgMSk7XG4gICAgICAgIGNvbnN0IHJoeXRobXMgPSBhd2FpdCBQcm9taXNlLmFsbChyaHl0aG1UZW5zb3JzLm1hcCh0ID0+IHQuZGF0YSgpKSk7XG4gICAgICAgIGNvbnN0IG5vdGVTZXF1ZW5jZSA9IHNlcXVlbmNlcy5jcmVhdGVRdWFudGl6ZWROb3RlU2VxdWVuY2Uoc3RlcHNQZXJRdWFydGVyLCBxcG0pO1xuICAgICAgICBmb3IgKGxldCBzID0gMDsgcyA8IHRoaXMubnVtU3RlcHM7ICsrcykge1xuICAgICAgICAgICAgaWYgKHJoeXRobXNbMF1bc10pIHtcbiAgICAgICAgICAgICAgICBub3RlU2VxdWVuY2Uubm90ZXMucHVzaChOb3RlU2VxdWVuY2UuTm90ZS5jcmVhdGUoe1xuICAgICAgICAgICAgICAgICAgICBwaXRjaDogNzIsXG4gICAgICAgICAgICAgICAgICAgIHF1YW50aXplZFN0YXJ0U3RlcDogcyxcbiAgICAgICAgICAgICAgICAgICAgcXVhbnRpemVkRW5kU3RlcDogcyArIDEsXG4gICAgICAgICAgICAgICAgICAgIGluc3RydW1lbnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIHByb2dyYW06IDAsXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJoeXRobXNbMV1bc10pIHtcbiAgICAgICAgICAgICAgICBub3RlU2VxdWVuY2Uubm90ZXMucHVzaChOb3RlU2VxdWVuY2UuTm90ZS5jcmVhdGUoe1xuICAgICAgICAgICAgICAgICAgICBwaXRjaDogMzYsXG4gICAgICAgICAgICAgICAgICAgIHF1YW50aXplZFN0YXJ0U3RlcDogcyxcbiAgICAgICAgICAgICAgICAgICAgcXVhbnRpemVkRW5kU3RlcDogcyArIDEsXG4gICAgICAgICAgICAgICAgICAgIGluc3RydW1lbnQ6IDEsXG4gICAgICAgICAgICAgICAgICAgIHByb2dyYW06IDMyLFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyaHl0aG1zWzJdW3NdKSB7XG4gICAgICAgICAgICAgICAgbm90ZVNlcXVlbmNlLm5vdGVzLnB1c2goTm90ZVNlcXVlbmNlLk5vdGUuY3JlYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgcGl0Y2g6IERFRkFVTFRfRFJVTV9QSVRDSF9DTEFTU0VTWzFdWzBdLFxuICAgICAgICAgICAgICAgICAgICBxdWFudGl6ZWRTdGFydFN0ZXA6IHMsXG4gICAgICAgICAgICAgICAgICAgIHF1YW50aXplZEVuZFN0ZXA6IHMgKyAxLFxuICAgICAgICAgICAgICAgICAgICBpbnN0cnVtZW50OiAyLFxuICAgICAgICAgICAgICAgICAgICBpc0RydW06IHRydWVcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbm90ZVNlcXVlbmNlLnRvdGFsUXVhbnRpemVkU3RlcHMgPSB0aGlzLm51bVN0ZXBzO1xuICAgICAgICByZXR1cm4gbm90ZVNlcXVlbmNlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBNdWx0aXRyYWNrQ29udmVydGVyIGV4dGVuZHMgRGF0YUNvbnZlcnRlciB7XG4gICAgY29uc3RydWN0b3IoYXJncykge1xuICAgICAgICBzdXBlcihhcmdzKTtcbiAgICAgICAgdGhpcy5TRUdNRU5URURfQllfVFJBQ0sgPSB0cnVlO1xuICAgICAgICB0aGlzLnN0ZXBzUGVyUXVhcnRlciA9IGFyZ3Muc3RlcHNQZXJRdWFydGVyO1xuICAgICAgICB0aGlzLnRvdGFsU3RlcHMgPSBhcmdzLnRvdGFsU3RlcHM7XG4gICAgICAgIHRoaXMubnVtVmVsb2NpdHlCaW5zID0gYXJncy5udW1WZWxvY2l0eUJpbnM7XG4gICAgICAgIHRoaXMubWluUGl0Y2ggPSBhcmdzLm1pblBpdGNoID8gYXJncy5taW5QaXRjaCA6IGNvbnN0YW50cy5NSU5fTUlESV9QSVRDSDtcbiAgICAgICAgdGhpcy5tYXhQaXRjaCA9IGFyZ3MubWF4UGl0Y2ggPyBhcmdzLm1heFBpdGNoIDogY29uc3RhbnRzLk1BWF9NSURJX1BJVENIO1xuICAgICAgICB0aGlzLm51bVBpdGNoZXMgPSB0aGlzLm1heFBpdGNoIC0gdGhpcy5taW5QaXRjaCArIDE7XG4gICAgICAgIHRoaXMucGVyZm9ybWFuY2VFdmVudERlcHRoID1cbiAgICAgICAgICAgIDIgKiB0aGlzLm51bVBpdGNoZXMgKyB0aGlzLnRvdGFsU3RlcHMgKyB0aGlzLm51bVZlbG9jaXR5QmlucztcbiAgICAgICAgdGhpcy5udW1Qcm9ncmFtcyA9XG4gICAgICAgICAgICBjb25zdGFudHMuTUFYX01JRElfUFJPR1JBTSAtIGNvbnN0YW50cy5NSU5fTUlESV9QUk9HUkFNICsgMjtcbiAgICAgICAgdGhpcy5lbmRUb2tlbiA9IHRoaXMucGVyZm9ybWFuY2VFdmVudERlcHRoICsgdGhpcy5udW1Qcm9ncmFtcztcbiAgICAgICAgdGhpcy5kZXB0aCA9IHRoaXMuZW5kVG9rZW4gKyAxO1xuICAgICAgICB0aGlzLmVuZFRlbnNvciA9IHRmLnRpZHkoKCkgPT4gdGYub25lSG90KHRmLnRlbnNvcjFkKFt0aGlzLmVuZFRva2VuXSwgJ2ludDMyJyksIHRoaXMuZGVwdGgpXG4gICAgICAgICAgICAuYXMxRCgpKTtcbiAgICB9XG4gICAgdHJhY2tUb1RlbnNvcih0cmFjaykge1xuICAgICAgICBjb25zdCBtYXhFdmVudHNQZXJUcmFjayA9IHRoaXMubnVtU3RlcHMgLyB0aGlzLm51bVNlZ21lbnRzO1xuICAgICAgICBsZXQgdG9rZW5zID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAodHJhY2spIHtcbiAgICAgICAgICAgIHdoaWxlICh0cmFjay5ldmVudHMubGVuZ3RoID4gbWF4RXZlbnRzUGVyVHJhY2sgLSAyKSB7XG4gICAgICAgICAgICAgICAgdHJhY2suZXZlbnRzLnBvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG9rZW5zID0gdGYuYnVmZmVyKFt0cmFjay5ldmVudHMubGVuZ3RoICsgMl0sICdpbnQzMicpO1xuICAgICAgICAgICAgdG9rZW5zLnNldCh0aGlzLnBlcmZvcm1hbmNlRXZlbnREZXB0aCArXG4gICAgICAgICAgICAgICAgKHRyYWNrLmlzRHJ1bSA/IHRoaXMubnVtUHJvZ3JhbXMgLSAxIDogdHJhY2sucHJvZ3JhbSksIDApO1xuICAgICAgICAgICAgdHJhY2suZXZlbnRzLmZvckVhY2goKGV2ZW50LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdub3RlLW9uJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2Vucy5zZXQoZXZlbnQucGl0Y2ggLSB0aGlzLm1pblBpdGNoLCBpbmRleCArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ25vdGUtb2ZmJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2Vucy5zZXQodGhpcy5udW1QaXRjaGVzICsgZXZlbnQucGl0Y2ggLSB0aGlzLm1pblBpdGNoLCBpbmRleCArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RpbWUtc2hpZnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5zLnNldCgyICogdGhpcy5udW1QaXRjaGVzICsgZXZlbnQuc3RlcHMgLSAxLCBpbmRleCArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ZlbG9jaXR5LWNoYW5nZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbnMuc2V0KDIgKiB0aGlzLm51bVBpdGNoZXMgKyB0aGlzLnRvdGFsU3RlcHMgKyBldmVudC52ZWxvY2l0eUJpbiAtIDEsIGluZGV4ICsgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5yZWNvZ25pemVkIHBlcmZvcm1hbmNlIGV2ZW50OiAke2V2ZW50fWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdG9rZW5zLnNldCh0aGlzLmVuZFRva2VuLCB0cmFjay5ldmVudHMubGVuZ3RoICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0b2tlbnMgPSB0Zi5idWZmZXIoWzFdLCAnaW50MzInLCBuZXcgSW50MzJBcnJheShbdGhpcy5lbmRUb2tlbl0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGYudGlkeSgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvaCA9IHRmLm9uZUhvdCh0b2tlbnMudG9UZW5zb3IoKSwgdGhpcy5kZXB0aCk7XG4gICAgICAgICAgICByZXR1cm4gb2gucGFkKFtbMCwgbWF4RXZlbnRzUGVyVHJhY2sgLSBvaC5zaGFwZVswXV0sIFswLCAwXV0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgdG9UZW5zb3Iobm90ZVNlcXVlbmNlKSB7XG4gICAgICAgIHNlcXVlbmNlcy5hc3NlcnRJc1JlbGF0aXZlUXVhbnRpemVkU2VxdWVuY2Uobm90ZVNlcXVlbmNlKTtcbiAgICAgICAgaWYgKG5vdGVTZXF1ZW5jZS5xdWFudGl6YXRpb25JbmZvLnN0ZXBzUGVyUXVhcnRlciAhPT1cbiAgICAgICAgICAgIHRoaXMuc3RlcHNQZXJRdWFydGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFN0ZXBzIHBlciBxdWFydGVyIG5vdGUgbWlzbWF0Y2g6ICR7bm90ZVNlcXVlbmNlLnF1YW50aXphdGlvbkluZm8uc3RlcHNQZXJRdWFydGVyfSAhPSAke3RoaXMuc3RlcHNQZXJRdWFydGVyfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNlcSA9IHNlcXVlbmNlcy5jbG9uZShub3RlU2VxdWVuY2UpO1xuICAgICAgICBzZXEubm90ZXMgPSBub3RlU2VxdWVuY2Uubm90ZXMuZmlsdGVyKG5vdGUgPT4gbm90ZS5waXRjaCA+PSB0aGlzLm1pblBpdGNoICYmIG5vdGUucGl0Y2ggPD0gdGhpcy5tYXhQaXRjaCk7XG4gICAgICAgIGNvbnN0IGluc3RydW1lbnRzID0gbmV3IFNldChzZXEubm90ZXMubWFwKG5vdGUgPT4gbm90ZS5pbnN0cnVtZW50KSk7XG4gICAgICAgIGNvbnN0IHRyYWNrcyA9IEFycmF5LmZyb20oaW5zdHJ1bWVudHMpXG4gICAgICAgICAgICAubWFwKGluc3RydW1lbnQgPT4gcGVyZm9ybWFuY2UuUGVyZm9ybWFuY2UuZnJvbU5vdGVTZXF1ZW5jZShzZXEsIHRoaXMudG90YWxTdGVwcywgdGhpcy5udW1WZWxvY2l0eUJpbnMsIGluc3RydW1lbnQpKTtcbiAgICAgICAgY29uc3Qgc29ydGVkVHJhY2tzID0gdHJhY2tzLnNvcnQoKGEsIGIpID0+IGIuaXNEcnVtID8gLTEgOiAoYS5pc0RydW0gPyAxIDogYS5wcm9ncmFtIC0gYi5wcm9ncmFtKSk7XG4gICAgICAgIHdoaWxlIChzb3J0ZWRUcmFja3MubGVuZ3RoID4gdGhpcy5udW1TZWdtZW50cykge1xuICAgICAgICAgICAgc29ydGVkVHJhY2tzLnBvcCgpO1xuICAgICAgICB9XG4gICAgICAgIHNvcnRlZFRyYWNrcy5mb3JFYWNoKCh0cmFjaykgPT4gdHJhY2suc2V0TnVtU3RlcHModGhpcy50b3RhbFN0ZXBzKSk7XG4gICAgICAgIHdoaWxlIChzb3J0ZWRUcmFja3MubGVuZ3RoIDwgdGhpcy5udW1TZWdtZW50cykge1xuICAgICAgICAgICAgc29ydGVkVHJhY2tzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGYudGlkeSgoKSA9PiB0Zi5jb25jYXQoc29ydGVkVHJhY2tzLm1hcCgodHJhY2spID0+IHRoaXMudHJhY2tUb1RlbnNvcih0cmFjaykpLCAwKSk7XG4gICAgfVxuICAgIHRva2Vuc1RvVHJhY2sodG9rZW5zKSB7XG4gICAgICAgIGNvbnN0IGlkeCA9IHRva2Vucy5pbmRleE9mKHRoaXMuZW5kVG9rZW4pO1xuICAgICAgICBjb25zdCBlbmRJbmRleCA9IGlkeCA+PSAwID8gaWR4IDogdG9rZW5zLmxlbmd0aDtcbiAgICAgICAgY29uc3QgdHJhY2tUb2tlbnMgPSB0b2tlbnMuc2xpY2UoMCwgZW5kSW5kZXgpO1xuICAgICAgICBjb25zdCBldmVudFRva2VucyA9IHRyYWNrVG9rZW5zLmZpbHRlcigodG9rZW4pID0+IHRva2VuIDwgdGhpcy5wZXJmb3JtYW5jZUV2ZW50RGVwdGgpO1xuICAgICAgICBjb25zdCBwcm9ncmFtVG9rZW5zID0gdHJhY2tUb2tlbnMuZmlsdGVyKCh0b2tlbikgPT4gdG9rZW4gPj0gdGhpcy5wZXJmb3JtYW5jZUV2ZW50RGVwdGgpO1xuICAgICAgICBjb25zdCBbcHJvZ3JhbSwgaXNEcnVtXSA9IHByb2dyYW1Ub2tlbnMubGVuZ3RoID9cbiAgICAgICAgICAgIChwcm9ncmFtVG9rZW5zWzBdIC0gdGhpcy5wZXJmb3JtYW5jZUV2ZW50RGVwdGggPCB0aGlzLm51bVByb2dyYW1zIC0gMSA/XG4gICAgICAgICAgICAgICAgW3Byb2dyYW1Ub2tlbnNbMF0gLSB0aGlzLnBlcmZvcm1hbmNlRXZlbnREZXB0aCwgZmFsc2VdIDpcbiAgICAgICAgICAgICAgICBbMCwgdHJ1ZV0pIDpcbiAgICAgICAgICAgIFswLCBmYWxzZV07XG4gICAgICAgIGNvbnN0IGV2ZW50cyA9IEFycmF5LmZyb20oZXZlbnRUb2tlbnMpLm1hcCgodG9rZW4pID0+IHtcbiAgICAgICAgICAgIGlmICh0b2tlbiA8IHRoaXMubnVtUGl0Y2hlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHR5cGU6ICdub3RlLW9uJywgcGl0Y2g6IHRoaXMubWluUGl0Y2ggKyB0b2tlbiB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodG9rZW4gPCAyICogdGhpcy5udW1QaXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vdGUtb2ZmJyxcbiAgICAgICAgICAgICAgICAgICAgcGl0Y2g6IHRoaXMubWluUGl0Y2ggKyB0b2tlbiAtIHRoaXMubnVtUGl0Y2hlc1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0b2tlbiA8IDIgKiB0aGlzLm51bVBpdGNoZXMgKyB0aGlzLnRvdGFsU3RlcHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGltZS1zaGlmdCcsXG4gICAgICAgICAgICAgICAgICAgIHN0ZXBzOiB0b2tlbiAtIDIgKiB0aGlzLm51bVBpdGNoZXMgKyAxXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRva2VuIDxcbiAgICAgICAgICAgICAgICAyICogdGhpcy5udW1QaXRjaGVzICsgdGhpcy50b3RhbFN0ZXBzICsgdGhpcy5udW1WZWxvY2l0eUJpbnMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAndmVsb2NpdHktY2hhbmdlJyxcbiAgICAgICAgICAgICAgICAgICAgdmVsb2NpdHlCaW46IHRva2VuIC0gMiAqIHRoaXMubnVtUGl0Y2hlcyAtIHRoaXMudG90YWxTdGVwcyArIDFcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHBlcmZvcm1hbmNlIGV2ZW50IHRva2VuOiAke3Rva2VufWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBwZXJmb3JtYW5jZS5QZXJmb3JtYW5jZShldmVudHMsIHRoaXMudG90YWxTdGVwcywgdGhpcy5udW1WZWxvY2l0eUJpbnMsIHByb2dyYW0sIGlzRHJ1bSk7XG4gICAgfVxuICAgIGFzeW5jIHRvTm90ZVNlcXVlbmNlKG9oLCBzdGVwc1BlclF1YXJ0ZXIgPSB0aGlzLnN0ZXBzUGVyUXVhcnRlciwgcXBtKSB7XG4gICAgICAgIGNvbnN0IG5vdGVTZXF1ZW5jZSA9IHNlcXVlbmNlcy5jcmVhdGVRdWFudGl6ZWROb3RlU2VxdWVuY2Uoc3RlcHNQZXJRdWFydGVyLCBxcG0pO1xuICAgICAgICBub3RlU2VxdWVuY2UudG90YWxRdWFudGl6ZWRTdGVwcyA9IHRoaXMudG90YWxTdGVwcztcbiAgICAgICAgY29uc3QgdGVuc29ycyA9IHRmLnRpZHkoKCkgPT4gdGYuc3BsaXQob2guYXJnTWF4KDEpLCB0aGlzLm51bVNlZ21lbnRzKSk7XG4gICAgICAgIGNvbnN0IHRyYWNrcyA9IGF3YWl0IFByb21pc2UuYWxsKHRlbnNvcnMubWFwKGFzeW5jICh0ZW5zb3IpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRva2VucyA9IGF3YWl0IHRlbnNvci5kYXRhKCk7XG4gICAgICAgICAgICBjb25zdCB0cmFjayA9IHRoaXMudG9rZW5zVG9UcmFjayh0b2tlbnMpO1xuICAgICAgICAgICAgdGVuc29yLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHJldHVybiB0cmFjaztcbiAgICAgICAgfSkpO1xuICAgICAgICB0cmFja3MuZm9yRWFjaCgodHJhY2ssIGluc3RydW1lbnQpID0+IHtcbiAgICAgICAgICAgIHRyYWNrLnNldE51bVN0ZXBzKHRoaXMudG90YWxTdGVwcyk7XG4gICAgICAgICAgICBub3RlU2VxdWVuY2Uubm90ZXMucHVzaCguLi50cmFjay50b05vdGVTZXF1ZW5jZShpbnN0cnVtZW50KS5ub3Rlcyk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbm90ZVNlcXVlbmNlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBHcm9vdmVDb252ZXJ0ZXIgZXh0ZW5kcyBEYXRhQ29udmVydGVyIHtcbiAgICBjb25zdHJ1Y3RvcihhcmdzKSB7XG4gICAgICAgIHN1cGVyKGFyZ3MpO1xuICAgICAgICB0aGlzLlRBUElGWV9DSEFOTkVMID0gMztcbiAgICAgICAgdGhpcy5zdGVwc1BlclF1YXJ0ZXIgPVxuICAgICAgICAgICAgYXJncy5zdGVwc1BlclF1YXJ0ZXIgfHwgY29uc3RhbnRzLkRFRkFVTFRfU1RFUFNfUEVSX1FVQVJURVI7XG4gICAgICAgIHRoaXMucGl0Y2hDbGFzc2VzID0gYXJncy5waXRjaENsYXNzZXMgfHwgREVGQVVMVF9EUlVNX1BJVENIX0NMQVNTRVM7XG4gICAgICAgIHRoaXMucGl0Y2hUb0NsYXNzID0gbmV3IE1hcCgpO1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHRoaXMucGl0Y2hDbGFzc2VzLmxlbmd0aDsgKytjKSB7XG4gICAgICAgICAgICB0aGlzLnBpdGNoQ2xhc3Nlc1tjXS5mb3JFYWNoKChwKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5waXRjaFRvQ2xhc3Muc2V0KHAsIGMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5odW1hbml6ZSA9IGFyZ3MuaHVtYW5pemUgfHwgZmFsc2U7XG4gICAgICAgIHRoaXMudGFwaWZ5ID0gYXJncy50YXBpZnkgfHwgZmFsc2U7XG4gICAgICAgIHRoaXMuc3BsaXRJbnN0cnVtZW50cyA9IGFyZ3Muc3BsaXRJbnN0cnVtZW50cyB8fCBmYWxzZTtcbiAgICAgICAgdGhpcy5kZXB0aCA9IDM7XG4gICAgfVxuICAgIHRvVGVuc29yKG5zKSB7XG4gICAgICAgIGNvbnN0IHFucyA9IHNlcXVlbmNlcy5pc1JlbGF0aXZlUXVhbnRpemVkU2VxdWVuY2UobnMpID9cbiAgICAgICAgICAgIG5zIDpcbiAgICAgICAgICAgIHNlcXVlbmNlcy5xdWFudGl6ZU5vdGVTZXF1ZW5jZShucywgdGhpcy5zdGVwc1BlclF1YXJ0ZXIpO1xuICAgICAgICBjb25zdCBudW1TdGVwcyA9IHRoaXMubnVtU3RlcHM7XG4gICAgICAgIGNvbnN0IHFwbSA9IChxbnMudGVtcG9zICYmIHFucy50ZW1wb3MubGVuZ3RoKSA/XG4gICAgICAgICAgICBxbnMudGVtcG9zWzBdLnFwbSA6XG4gICAgICAgICAgICBjb25zdGFudHMuREVGQVVMVF9RVUFSVEVSU19QRVJfTUlOVVRFO1xuICAgICAgICBjb25zdCBzdGVwTGVuZ3RoID0gKDYwLiAvIHFwbSkgLyB0aGlzLnN0ZXBzUGVyUXVhcnRlcjtcbiAgICAgICAgY29uc3Qgc3RlcE5vdGVzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtU3RlcHM7ICsraSkge1xuICAgICAgICAgICAgc3RlcE5vdGVzLnB1c2gobmV3IE1hcCgpKTtcbiAgICAgICAgfVxuICAgICAgICBxbnMubm90ZXMuZm9yRWFjaChuID0+IHtcbiAgICAgICAgICAgIGlmICghKHRoaXMudGFwaWZ5IHx8IHRoaXMucGl0Y2hUb0NsYXNzLmhhcyhuLnBpdGNoKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzID0gbi5xdWFudGl6ZWRTdGFydFN0ZXA7XG4gICAgICAgICAgICBpZiAocyA+PSBzdGVwTm90ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoYE1vZGVsIGRvZXMgbm90IHN1cHBvcnQgc2VxdWVuY2VzIHdpdGggbW9yZSB0aGFuICR7bnVtU3RlcHN9IHN0ZXBzICgke251bVN0ZXBzICogc3RlcExlbmd0aH0gc2Vjb25kcyBhdCBxcG0gJHtxcG19KS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGQgPSB0aGlzLnRhcGlmeSA/IHRoaXMuVEFQSUZZX0NIQU5ORUwgOiB0aGlzLnBpdGNoVG9DbGFzcy5nZXQobi5waXRjaCk7XG4gICAgICAgICAgICBpZiAoIXN0ZXBOb3Rlc1tzXS5oYXMoZCkgfHwgc3RlcE5vdGVzW3NdLmdldChkKS52ZWxvY2l0eSA8IG4udmVsb2NpdHkpIHtcbiAgICAgICAgICAgICAgICBzdGVwTm90ZXNbc10uc2V0KGQsIG4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgbnVtRHJ1bXMgPSB0aGlzLnBpdGNoQ2xhc3Nlcy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGhpdFZlY3RvcnMgPSB0Zi5idWZmZXIoW251bVN0ZXBzLCBudW1EcnVtc10pO1xuICAgICAgICBjb25zdCB2ZWxvY2l0eVZlY3RvcnMgPSB0Zi5idWZmZXIoW251bVN0ZXBzLCBudW1EcnVtc10pO1xuICAgICAgICBjb25zdCBvZmZzZXRWZWN0b3JzID0gdGYuYnVmZmVyKFtudW1TdGVwcywgbnVtRHJ1bXNdKTtcbiAgICAgICAgZnVuY3Rpb24gZ2V0T2Zmc2V0KG4pIHtcbiAgICAgICAgICAgIGlmIChuLnN0YXJ0VGltZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0T25zZXQgPSBuLnN0YXJ0VGltZTtcbiAgICAgICAgICAgIGNvbnN0IHFPbnNldCA9IG4ucXVhbnRpemVkU3RhcnRTdGVwICogc3RlcExlbmd0aDtcbiAgICAgICAgICAgIHJldHVybiAyICogKHFPbnNldCAtIHRPbnNldCkgLyBzdGVwTGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IHMgPSAwOyBzIDwgbnVtU3RlcHM7ICsrcykge1xuICAgICAgICAgICAgZm9yIChsZXQgZCA9IDA7IGQgPCBudW1EcnVtczsgKytkKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm90ZSA9IHN0ZXBOb3Rlc1tzXS5nZXQoZCk7XG4gICAgICAgICAgICAgICAgaGl0VmVjdG9ycy5zZXQobm90ZSA/IDEgOiAwLCBzLCBkKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaHVtYW5pemUgJiYgIXRoaXMudGFwaWZ5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZlbG9jaXR5VmVjdG9ycy5zZXQobm90ZSA/IG5vdGUudmVsb2NpdHkgLyBjb25zdGFudHMuTUFYX01JRElfVkVMT0NJVFkgOiAwLCBzLCBkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmh1bWFuaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFZlY3RvcnMuc2V0KG5vdGUgPyBnZXRPZmZzZXQobm90ZSkgOiAwLCBzLCBkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRmLnRpZHkoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaGl0cyA9IGhpdFZlY3RvcnMudG9UZW5zb3IoKTtcbiAgICAgICAgICAgIGNvbnN0IHZlbG9jaXRpZXMgPSB2ZWxvY2l0eVZlY3RvcnMudG9UZW5zb3IoKTtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldHMgPSBvZmZzZXRWZWN0b3JzLnRvVGVuc29yKCk7XG4gICAgICAgICAgICBjb25zdCBvdXRMZW5ndGggPSB0aGlzLnNwbGl0SW5zdHJ1bWVudHMgPyBudW1TdGVwcyAqIG51bURydW1zIDogbnVtU3RlcHM7XG4gICAgICAgICAgICByZXR1cm4gdGYuY29uY2F0KFtcbiAgICAgICAgICAgICAgICBoaXRzLmFzMkQob3V0TGVuZ3RoLCAtMSksIHZlbG9jaXRpZXMuYXMyRChvdXRMZW5ndGgsIC0xKSxcbiAgICAgICAgICAgICAgICBvZmZzZXRzLmFzMkQob3V0TGVuZ3RoLCAtMSlcbiAgICAgICAgICAgIF0sIDEpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgdG9Ob3RlU2VxdWVuY2UodCwgc3RlcHNQZXJRdWFydGVyLCBxcG0gPSBjb25zdGFudHMuREVGQVVMVF9RVUFSVEVSU19QRVJfTUlOVVRFKSB7XG4gICAgICAgIGlmIChzdGVwc1BlclF1YXJ0ZXIgJiYgc3RlcHNQZXJRdWFydGVyICE9PSB0aGlzLnN0ZXBzUGVyUXVhcnRlcikge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ2BzdGVwc1BlclF1YXJ0ZXJgIGlzIHNldCBieSB0aGUgbW9kZWwuJyk7XG4gICAgICAgIH1cbiAgICAgICAgc3RlcHNQZXJRdWFydGVyID0gdGhpcy5zdGVwc1BlclF1YXJ0ZXI7XG4gICAgICAgIGNvbnN0IG51bVN0ZXBzID0gdGhpcy5zcGxpdEluc3RydW1lbnRzID9cbiAgICAgICAgICAgIHQuc2hhcGVbMF0gLyB0aGlzLnBpdGNoQ2xhc3Nlcy5sZW5ndGggOlxuICAgICAgICAgICAgdC5zaGFwZVswXTtcbiAgICAgICAgY29uc3Qgc3RlcExlbmd0aCA9ICg2MC4gLyBxcG0pIC8gdGhpcy5zdGVwc1BlclF1YXJ0ZXI7XG4gICAgICAgIGNvbnN0IG5zID0gTm90ZVNlcXVlbmNlLmNyZWF0ZSh7IHRvdGFsVGltZTogbnVtU3RlcHMgKiBzdGVwTGVuZ3RoLCB0ZW1wb3M6IFt7IHFwbSB9XSB9KTtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IHQuZGF0YSgpO1xuICAgICAgICBmdW5jdGlvbiBjbGlwKHYsIG1pbiwgbWF4KSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgodiwgbWluKSwgbWF4KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBudW1EcnVtcyA9IHRoaXMucGl0Y2hDbGFzc2VzLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgcyA9IDA7IHMgPCBudW1TdGVwczsgKytzKSB7XG4gICAgICAgICAgICBjb25zdCBzdGVwUmVzdWx0cyA9IHJlc3VsdHMuc2xpY2UocyAqIG51bURydW1zICogdGhpcy5kZXB0aCwgKHMgKyAxKSAqIG51bURydW1zICogdGhpcy5kZXB0aCk7XG4gICAgICAgICAgICBmb3IgKGxldCBkID0gMDsgZCA8IG51bURydW1zOyArK2QpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBoaXRPdXRwdXQgPSBzdGVwUmVzdWx0c1t0aGlzLnNwbGl0SW5zdHJ1bWVudHMgPyBkICogdGhpcy5kZXB0aCA6IGRdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZlbEkgPSB0aGlzLnNwbGl0SW5zdHJ1bWVudHMgPyAoZCAqIHRoaXMuZGVwdGggKyAxKSA6IChudW1EcnVtcyArIGQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZlbE91dHB1dCA9IHN0ZXBSZXN1bHRzW3ZlbEldO1xuICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldEkgPSB0aGlzLnNwbGl0SW5zdHJ1bWVudHMgPyAoZCAqIHRoaXMuZGVwdGggKyAyKSA6ICgyICogbnVtRHJ1bXMgKyBkKTtcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXRPdXRwdXQgPSBzdGVwUmVzdWx0c1tvZmZzZXRJXTtcbiAgICAgICAgICAgICAgICBpZiAoaGl0T3V0cHV0ID4gMC41KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZlbG9jaXR5ID0gY2xpcChNYXRoLnJvdW5kKHZlbE91dHB1dCAqIGNvbnN0YW50cy5NQVhfTUlESV9WRUxPQ0lUWSksIGNvbnN0YW50cy5NSU5fTUlESV9WRUxPQ0lUWSwgY29uc3RhbnRzLk1BWF9NSURJX1ZFTE9DSVRZKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gY2xpcChvZmZzZXRPdXRwdXQgLyAyLCAtMC41LCAwLjUpO1xuICAgICAgICAgICAgICAgICAgICBucy5ub3Rlcy5wdXNoKE5vdGVTZXF1ZW5jZS5Ob3RlLmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBwaXRjaDogdGhpcy5waXRjaENsYXNzZXNbZF1bMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydFRpbWU6IChzIC0gb2Zmc2V0KSAqIHN0ZXBMZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRUaW1lOiAocyAtIG9mZnNldCArIDEpICogc3RlcExlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlbG9jaXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNEcnVtOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5zO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGEuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/index.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/index.js ***!
  \*********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePlayer: () => (/* reexport safe */ _player__WEBPACK_IMPORTED_MODULE_10__.BasePlayer),\n/* harmony export */   BasePlayerCallback: () => (/* reexport safe */ _player__WEBPACK_IMPORTED_MODULE_10__.BasePlayerCallback),\n/* harmony export */   BaseRecorderCallback: () => (/* reexport safe */ _recorder__WEBPACK_IMPORTED_MODULE_11__.BaseRecorderCallback),\n/* harmony export */   BaseSVGVisualizer: () => (/* reexport safe */ _visualizer__WEBPACK_IMPORTED_MODULE_12__.BaseSVGVisualizer),\n/* harmony export */   BaseVisualizer: () => (/* reexport safe */ _visualizer__WEBPACK_IMPORTED_MODULE_12__.BaseVisualizer),\n/* harmony export */   MIDIPlayer: () => (/* reexport safe */ _player__WEBPACK_IMPORTED_MODULE_10__.MIDIPlayer),\n/* harmony export */   Metronome: () => (/* reexport safe */ _metronome__WEBPACK_IMPORTED_MODULE_8__.Metronome),\n/* harmony export */   MetronomeCallbackObject: () => (/* reexport safe */ _metronome__WEBPACK_IMPORTED_MODULE_8__.MetronomeCallbackObject),\n/* harmony export */   MidiConversionError: () => (/* reexport safe */ _midi_io__WEBPACK_IMPORTED_MODULE_9__.MidiConversionError),\n/* harmony export */   PianoRollCanvasVisualizer: () => (/* reexport safe */ _visualizer__WEBPACK_IMPORTED_MODULE_12__.PianoRollCanvasVisualizer),\n/* harmony export */   PianoRollSVGVisualizer: () => (/* reexport safe */ _visualizer__WEBPACK_IMPORTED_MODULE_12__.PianoRollSVGVisualizer),\n/* harmony export */   Player: () => (/* reexport safe */ _player__WEBPACK_IMPORTED_MODULE_10__.Player),\n/* harmony export */   PlayerWithClick: () => (/* reexport safe */ _player__WEBPACK_IMPORTED_MODULE_10__.PlayerWithClick),\n/* harmony export */   Recorder: () => (/* reexport safe */ _recorder__WEBPACK_IMPORTED_MODULE_11__.Recorder),\n/* harmony export */   ScrollType: () => (/* reexport safe */ _visualizer__WEBPACK_IMPORTED_MODULE_12__.ScrollType),\n/* harmony export */   SoundFontPlayer: () => (/* reexport safe */ _player__WEBPACK_IMPORTED_MODULE_10__.SoundFontPlayer),\n/* harmony export */   StaffSVGVisualizer: () => (/* reexport safe */ _visualizer__WEBPACK_IMPORTED_MODULE_12__.StaffSVGVisualizer),\n/* harmony export */   Visualizer: () => (/* reexport safe */ _visualizer__WEBPACK_IMPORTED_MODULE_12__.Visualizer),\n/* harmony export */   WaterfallSVGVisualizer: () => (/* reexport safe */ _visualizer__WEBPACK_IMPORTED_MODULE_12__.WaterfallSVGVisualizer),\n/* harmony export */   aux_inputs: () => (/* reexport module object */ _aux_inputs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   blobToNoteSequence: () => (/* reexport safe */ _midi_io__WEBPACK_IMPORTED_MODULE_9__.blobToNoteSequence),\n/* harmony export */   chords: () => (/* reexport module object */ _chords__WEBPACK_IMPORTED_MODULE_1__),\n/* harmony export */   constants: () => (/* reexport module object */ _constants__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   data: () => (/* reexport module object */ _data__WEBPACK_IMPORTED_MODULE_3__),\n/* harmony export */   logging: () => (/* reexport module object */ _logging__WEBPACK_IMPORTED_MODULE_4__),\n/* harmony export */   melodies: () => (/* reexport module object */ _melodies__WEBPACK_IMPORTED_MODULE_5__),\n/* harmony export */   midiToSequenceProto: () => (/* reexport safe */ _midi_io__WEBPACK_IMPORTED_MODULE_9__.midiToSequenceProto),\n/* harmony export */   performance: () => (/* reexport module object */ _performance__WEBPACK_IMPORTED_MODULE_6__),\n/* harmony export */   sequenceProtoToMidi: () => (/* reexport safe */ _midi_io__WEBPACK_IMPORTED_MODULE_9__.sequenceProtoToMidi),\n/* harmony export */   sequences: () => (/* reexport module object */ _sequences__WEBPACK_IMPORTED_MODULE_7__),\n/* harmony export */   urlToBlob: () => (/* reexport safe */ _midi_io__WEBPACK_IMPORTED_MODULE_9__.urlToBlob),\n/* harmony export */   urlToNoteSequence: () => (/* reexport safe */ _midi_io__WEBPACK_IMPORTED_MODULE_9__.urlToNoteSequence)\n/* harmony export */ });\n/* harmony import */ var _aux_inputs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./aux_inputs */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/aux_inputs.js\");\n/* harmony import */ var _chords__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chords */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/chords.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/constants.js\");\n/* harmony import */ var _data__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./data */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/data.js\");\n/* harmony import */ var _logging__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/logging.js\");\n/* harmony import */ var _melodies__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./melodies */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/melodies.js\");\n/* harmony import */ var _performance__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./performance */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/performance.js\");\n/* harmony import */ var _sequences__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./sequences */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/sequences.js\");\n/* harmony import */ var _metronome__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./metronome */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/metronome.js\");\n/* harmony import */ var _midi_io__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./midi_io */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/midi_io.js\");\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./player */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/player.js\");\n/* harmony import */ var _recorder__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./recorder */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/recorder.js\");\n/* harmony import */ var _visualizer__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./visualizer */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/visualizer.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1hZ2VudGErbXVzaWNAMS4yMy4xX0B0ZW5zb3JmbG93K3RmanMtY29yZUAyLjguNl9zZWVkcmFuZG9tQDIuNC40L25vZGVfbW9kdWxlcy9AbWFnZW50YS9tdXNpYy9lc20vY29yZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBMkM7QUFDUjtBQUNNO0FBQ1Y7QUFDTTtBQUNFO0FBQ007QUFDSjtBQUNpRDtBQUM5RDtBQUNGO0FBQ0Q7QUFDRTtBQUNFO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9tb25nYWguZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtYWdlbnRhK211c2ljQDEuMjMuMV9AdGVuc29yZmxvdyt0ZmpzLWNvcmVAMi44LjZfc2VlZHJhbmRvbUAyLjQuNC9ub2RlX21vZHVsZXMvQG1hZ2VudGEvbXVzaWMvZXNtL2NvcmUvaW5kZXguanM/MDIzZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhdXhfaW5wdXRzIGZyb20gJy4vYXV4X2lucHV0cyc7XG5pbXBvcnQgKiBhcyBjaG9yZHMgZnJvbSAnLi9jaG9yZHMnO1xuaW1wb3J0ICogYXMgY29uc3RhbnRzIGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCAqIGFzIGRhdGEgZnJvbSAnLi9kYXRhJztcbmltcG9ydCAqIGFzIGxvZ2dpbmcgZnJvbSAnLi9sb2dnaW5nJztcbmltcG9ydCAqIGFzIG1lbG9kaWVzIGZyb20gJy4vbWVsb2RpZXMnO1xuaW1wb3J0ICogYXMgcGVyZm9ybWFuY2UgZnJvbSAnLi9wZXJmb3JtYW5jZSc7XG5pbXBvcnQgKiBhcyBzZXF1ZW5jZXMgZnJvbSAnLi9zZXF1ZW5jZXMnO1xuZXhwb3J0IHsgYXV4X2lucHV0cywgY2hvcmRzLCBjb25zdGFudHMsIGRhdGEsIGxvZ2dpbmcsIG1lbG9kaWVzLCBwZXJmb3JtYW5jZSwgc2VxdWVuY2VzIH07XG5leHBvcnQgKiBmcm9tICcuL21ldHJvbm9tZSc7XG5leHBvcnQgKiBmcm9tICcuL21pZGlfaW8nO1xuZXhwb3J0ICogZnJvbSAnLi9wbGF5ZXInO1xuZXhwb3J0ICogZnJvbSAnLi9yZWNvcmRlcic7XG5leHBvcnQgKiBmcm9tICcuL3Zpc3VhbGl6ZXInO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/logging.js":
/*!***********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/logging.js ***!
  \***********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Level: () => (/* binding */ Level),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   logWithDuration: () => (/* binding */ logWithDuration),\n/* harmony export */   setVerbosity: () => (/* binding */ setVerbosity),\n/* harmony export */   verbosity: () => (/* binding */ verbosity)\n/* harmony export */ });\n/* harmony import */ var _core_compat_global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/compat/global */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/compat/global.js\");\n\nvar Level;\n(function (Level) {\n    Level[Level[\"NONE\"] = 0] = \"NONE\";\n    Level[Level[\"WARN\"] = 5] = \"WARN\";\n    Level[Level[\"INFO\"] = 10] = \"INFO\";\n    Level[Level[\"DEBUG\"] = 20] = \"DEBUG\";\n})(Level || (Level = {}));\nlet verbosity = 10;\nfunction setVerbosity(verbosity) {\n    verbosity = verbosity;\n}\nfunction log(msg, prefix = 'Magenta.js', level = 10) {\n    if (level === 0) {\n        throw Error('Logging level cannot be NONE.');\n    }\n    if (verbosity >= level) {\n        const logMethod = level === 5 ? console.warn : console.log;\n        logMethod(`%c ${prefix} `, 'background:magenta; color:white', msg);\n    }\n}\nfunction logWithDuration(msg, startTime, prefix = 'Magenta.js', level = 10) {\n    const durationSeconds = (_core_compat_global__WEBPACK_IMPORTED_MODULE_0__.performance.now() - startTime) / 1000;\n    log(`${msg} in ${durationSeconds.toPrecision(3)}s`, prefix, level);\n}\n//# sourceMappingURL=logging.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1hZ2VudGErbXVzaWNAMS4yMy4xX0B0ZW5zb3JmbG93K3RmanMtY29yZUAyLjguNl9zZWVkcmFuZG9tQDIuNC40L25vZGVfbW9kdWxlcy9AbWFnZW50YS9tdXNpYy9lc20vY29yZS9sb2dnaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFvRDtBQUM3QztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNCQUFzQjtBQUNoQjtBQUNBO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixRQUFRLHdCQUF3QjtBQUN4RDtBQUNBO0FBQ087QUFDUCw2QkFBNkIsNERBQVc7QUFDeEMsV0FBVyxLQUFLLEtBQUssK0JBQStCO0FBQ3BEO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb21vbmdhaC5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvLnBucG0vQG1hZ2VudGErbXVzaWNAMS4yMy4xX0B0ZW5zb3JmbG93K3RmanMtY29yZUAyLjguNl9zZWVkcmFuZG9tQDIuNC40L25vZGVfbW9kdWxlcy9AbWFnZW50YS9tdXNpYy9lc20vY29yZS9sb2dnaW5nLmpzPzk2YTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGVyZm9ybWFuY2UgfSBmcm9tICcuLi9jb3JlL2NvbXBhdC9nbG9iYWwnO1xuZXhwb3J0IHZhciBMZXZlbDtcbihmdW5jdGlvbiAoTGV2ZWwpIHtcbiAgICBMZXZlbFtMZXZlbFtcIk5PTkVcIl0gPSAwXSA9IFwiTk9ORVwiO1xuICAgIExldmVsW0xldmVsW1wiV0FSTlwiXSA9IDVdID0gXCJXQVJOXCI7XG4gICAgTGV2ZWxbTGV2ZWxbXCJJTkZPXCJdID0gMTBdID0gXCJJTkZPXCI7XG4gICAgTGV2ZWxbTGV2ZWxbXCJERUJVR1wiXSA9IDIwXSA9IFwiREVCVUdcIjtcbn0pKExldmVsIHx8IChMZXZlbCA9IHt9KSk7XG5leHBvcnQgbGV0IHZlcmJvc2l0eSA9IDEwO1xuZXhwb3J0IGZ1bmN0aW9uIHNldFZlcmJvc2l0eSh2ZXJib3NpdHkpIHtcbiAgICB2ZXJib3NpdHkgPSB2ZXJib3NpdHk7XG59XG5leHBvcnQgZnVuY3Rpb24gbG9nKG1zZywgcHJlZml4ID0gJ01hZ2VudGEuanMnLCBsZXZlbCA9IDEwKSB7XG4gICAgaWYgKGxldmVsID09PSAwKSB7XG4gICAgICAgIHRocm93IEVycm9yKCdMb2dnaW5nIGxldmVsIGNhbm5vdCBiZSBOT05FLicpO1xuICAgIH1cbiAgICBpZiAodmVyYm9zaXR5ID49IGxldmVsKSB7XG4gICAgICAgIGNvbnN0IGxvZ01ldGhvZCA9IGxldmVsID09PSA1ID8gY29uc29sZS53YXJuIDogY29uc29sZS5sb2c7XG4gICAgICAgIGxvZ01ldGhvZChgJWMgJHtwcmVmaXh9IGAsICdiYWNrZ3JvdW5kOm1hZ2VudGE7IGNvbG9yOndoaXRlJywgbXNnKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gbG9nV2l0aER1cmF0aW9uKG1zZywgc3RhcnRUaW1lLCBwcmVmaXggPSAnTWFnZW50YS5qcycsIGxldmVsID0gMTApIHtcbiAgICBjb25zdCBkdXJhdGlvblNlY29uZHMgPSAocGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydFRpbWUpIC8gMTAwMDtcbiAgICBsb2coYCR7bXNnfSBpbiAke2R1cmF0aW9uU2Vjb25kcy50b1ByZWNpc2lvbigzKX1zYCwgcHJlZml4LCBsZXZlbCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dnaW5nLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/logging.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/melodies.js":
/*!************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/melodies.js ***!
  \************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Melody: () => (/* binding */ Melody),\n/* harmony export */   MelodyRegister: () => (/* binding */ MelodyRegister),\n/* harmony export */   MelodyRhythm: () => (/* binding */ MelodyRhythm),\n/* harmony export */   MelodyShape: () => (/* binding */ MelodyShape),\n/* harmony export */   NOTE_OFF: () => (/* binding */ NOTE_OFF),\n/* harmony export */   NO_EVENT: () => (/* binding */ NO_EVENT)\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs */ \"(ssr)/./node_modules/.pnpm/@tensorflow+tfjs@2.8.6_seedrandom@2.4.4/node_modules/@tensorflow/tfjs/dist/tf.node.js\");\n/* harmony import */ var _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _protobuf_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../protobuf/index */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/protobuf/index.js\");\n/* harmony import */ var _sequences__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sequences */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/sequences.js\");\n\n\n\nconst NO_EVENT = 0;\nconst NOTE_OFF = 1;\nconst FIRST_PITCH = 2;\nclass Melody {\n    constructor(events, minPitch, maxPitch) {\n        this.events = events;\n        this.minPitch = minPitch;\n        this.maxPitch = maxPitch;\n    }\n    static fromNoteSequence(noteSequence, minPitch, maxPitch, ignorePolyphony = true, numSteps) {\n        _sequences__WEBPACK_IMPORTED_MODULE_2__.assertIsQuantizedSequence(noteSequence);\n        const sortedNotes = noteSequence.notes.sort((n1, n2) => {\n            if (n1.quantizedStartStep === n2.quantizedStartStep) {\n                return n2.pitch - n1.pitch;\n            }\n            return n1.quantizedStartStep - n2.quantizedStartStep;\n        });\n        const events = new Int32Array(numSteps || noteSequence.totalQuantizedSteps);\n        let lastStart = -1;\n        sortedNotes.forEach(n => {\n            if (n.quantizedStartStep === lastStart) {\n                if (!ignorePolyphony) {\n                    throw new Error('`NoteSequence` is not monophonic.');\n                }\n                else {\n                    return;\n                }\n            }\n            if (n.pitch < minPitch || n.pitch > maxPitch) {\n                throw Error('`NoteSequence` has a pitch outside of the valid range: ' +\n                    `${n.pitch}`);\n            }\n            events[n.quantizedStartStep] = n.pitch - minPitch + FIRST_PITCH;\n            events[n.quantizedEndStep] = NOTE_OFF;\n            lastStart = n.quantizedStartStep;\n        });\n        return new Melody(events, minPitch, maxPitch);\n    }\n    toNoteSequence(stepsPerQuarter, qpm) {\n        const noteSequence = _sequences__WEBPACK_IMPORTED_MODULE_2__.createQuantizedNoteSequence(stepsPerQuarter, qpm);\n        let currNote = null;\n        for (let s = 0; s < this.events.length; ++s) {\n            const event = this.events[s];\n            switch (event) {\n                case NO_EVENT:\n                    break;\n                case NOTE_OFF:\n                    if (currNote) {\n                        currNote.quantizedEndStep = s;\n                        noteSequence.notes.push(currNote);\n                        currNote = null;\n                    }\n                    break;\n                default:\n                    if (currNote) {\n                        currNote.quantizedEndStep = s;\n                        noteSequence.notes.push(currNote);\n                    }\n                    currNote = _protobuf_index__WEBPACK_IMPORTED_MODULE_1__.NoteSequence.Note.create({\n                        pitch: event - FIRST_PITCH + this.minPitch,\n                        quantizedStartStep: s\n                    });\n            }\n        }\n        if (currNote) {\n            currNote.quantizedEndStep = this.events.length;\n            noteSequence.notes.push(currNote);\n        }\n        noteSequence.totalQuantizedSteps = this.events.length;\n        return noteSequence;\n    }\n}\nclass MelodyRhythm {\n    constructor() {\n        this.depth = 1;\n    }\n    extract(melody) {\n        const numSteps = melody.events.length;\n        const buffer = _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.buffer([numSteps, 1]);\n        for (let step = 0; step < numSteps; ++step) {\n            buffer.set(melody.events[step] >= FIRST_PITCH ? 1 : 0, step, 0);\n        }\n        return buffer.toTensor().as2D(numSteps, 1);\n    }\n}\nclass MelodyShape {\n    constructor() {\n        this.depth = 3;\n    }\n    extract(melody) {\n        const numSteps = melody.events.length;\n        const buffer = _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.buffer([numSteps, 3]);\n        let lastIndex = null;\n        let lastPitch = null;\n        for (let step = 0; step < numSteps; ++step) {\n            if (melody.events[step] >= FIRST_PITCH) {\n                if (lastIndex !== null) {\n                    if (buffer.get(lastIndex, 0) === 0 &&\n                        buffer.get(lastIndex, 1) === 0 &&\n                        buffer.get(lastIndex, 2) === 0) {\n                        lastIndex = -1;\n                    }\n                    let direction;\n                    if (melody.events[step] < lastPitch) {\n                        direction = 0;\n                    }\n                    else if (melody.events[step] > lastPitch) {\n                        direction = 2;\n                    }\n                    else {\n                        direction = 1;\n                    }\n                    for (let i = step; i > lastIndex; --i) {\n                        buffer.set(1, i, direction);\n                    }\n                }\n                lastIndex = step;\n                lastPitch = melody.events[step];\n            }\n        }\n        if (lastIndex !== numSteps - 1) {\n            if ((lastIndex === null) ||\n                (buffer.get(lastIndex, 0) === 0 && buffer.get(lastIndex, 1) === 0 &&\n                    buffer.get(lastIndex, 2) === 0)) {\n                for (let i = 0; i < numSteps; ++i) {\n                    buffer.set(1, i, 1);\n                }\n            }\n            else {\n                for (let i = numSteps - 1; i > lastIndex; --i) {\n                    for (let j = 0; j < 3; j++) {\n                        buffer.set(buffer.get(lastIndex, j), i, j);\n                    }\n                }\n            }\n        }\n        return buffer.toTensor().as2D(numSteps, 3);\n    }\n}\nclass MelodyRegister {\n    constructor(boundaryPitches) {\n        this.boundaryPitches = boundaryPitches;\n        this.depth = boundaryPitches.length + 1;\n    }\n    meanMelodyPitch(melody) {\n        let total = 0;\n        let count = 0;\n        let currentPitch = null;\n        for (let step = 0; step < melody.events.length; ++step) {\n            if (melody.events[step] === NOTE_OFF) {\n                currentPitch = null;\n            }\n            else if (melody.events[step] >= FIRST_PITCH) {\n                currentPitch = melody.minPitch + melody.events[step] - FIRST_PITCH;\n            }\n            if (currentPitch !== null) {\n                total += currentPitch;\n                count += 1;\n            }\n        }\n        if (count) {\n            return total / count;\n        }\n        else {\n            return null;\n        }\n    }\n    extract(melody) {\n        const numSteps = melody.events.length;\n        const meanPitch = this.meanMelodyPitch(melody);\n        if (meanPitch === null) {\n            return _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.zeros([numSteps, this.depth]);\n        }\n        let bin = 0;\n        while (bin < this.boundaryPitches.length &&\n            meanPitch >= this.boundaryPitches[bin]) {\n            bin++;\n        }\n        const buffer = _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__.buffer([numSteps, this.depth]);\n        for (let step = 0; step < numSteps; ++step) {\n            buffer.set(1, step, bin);\n        }\n        return buffer.toTensor().as2D(numSteps, this.depth);\n    }\n}\n//# sourceMappingURL=melodies.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/melodies.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/metronome.js":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/metronome.js ***!
  \*************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Metronome: () => (/* binding */ Metronome),\n/* harmony export */   MetronomeCallbackObject: () => (/* binding */ MetronomeCallbackObject)\n/* harmony export */ });\n/* harmony import */ var tone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tone */ \"(ssr)/./node_modules/.pnpm/tone@14.7.77/node_modules/tone/build/Tone.js\");\n/* harmony import */ var tone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tone__WEBPACK_IMPORTED_MODULE_0__);\n\nconst QUARTERS_PER_BAR = 4;\nclass MetronomeCallbackObject {\n}\nclass Metronome {\n    constructor(callbackObject, clicksPerQuarter = 1) {\n        this.clicksPerQuarter = 1;\n        this.muted = false;\n        this.loClick = new tone__WEBPACK_IMPORTED_MODULE_0__.MembraneSynth({\n            pitchDecay: 0.008,\n            envelope: { attack: 0.001, decay: 0.3, sustain: 0 },\n        })\n            .toDestination();\n        this.hiClick = new tone__WEBPACK_IMPORTED_MODULE_0__.MembraneSynth({\n            pitchDecay: 0.008,\n            envelope: { attack: 0.001, decay: 0.3, sustain: 0 },\n        })\n            .toDestination();\n        this.loClickNote = 'c5';\n        this.hiClickNote = 'g5';\n        this.ticking = false;\n        this.startedAt = null;\n        this.step = -1;\n        this.reset();\n        this.callbackObject = callbackObject;\n        this.clicksPerQuarter = clicksPerQuarter;\n    }\n    isTicking() {\n        return this.ticking;\n    }\n    getStartedAt() {\n        return this.startedAt;\n    }\n    getOffsetTime() {\n        return tone__WEBPACK_IMPORTED_MODULE_0__.immediate() - this.startedAt;\n    }\n    start(bpm = 120) {\n        this.reset();\n        this.ticking = true;\n        if (!this.callbackObject.click) {\n            this.callbackObject.click = () => { };\n        }\n        if (!this.callbackObject.quarter) {\n            this.callbackObject.quarter = () => { };\n        }\n        if (!this.callbackObject.bar) {\n            this.callbackObject.bar = () => { };\n        }\n        let bar = 0;\n        const clicksInBar = QUARTERS_PER_BAR * this.clicksPerQuarter;\n        tone__WEBPACK_IMPORTED_MODULE_0__.Transport.scheduleRepeat((time) => {\n            if (!this.startedAt) {\n                this.startedAt = time;\n            }\n            const offsetTime = time - this.startedAt;\n            this.step++;\n            const clickInBar = this.step % clicksInBar;\n            const clickInQuarter = Math.floor(clickInBar / this.clicksPerQuarter);\n            const quarter = clickInBar % this.clicksPerQuarter;\n            this.callbackObject.click(offsetTime, clickInBar);\n            if (quarter === 0) {\n                this.callbackObject.quarter(offsetTime, clickInQuarter);\n            }\n            if (!this.muted) {\n                if (clickInBar === 0) {\n                    this.hiClick.triggerAttack(this.hiClickNote, time, 0.1);\n                }\n                else {\n                    this.loClick.triggerAttack(this.loClickNote, time, 0.1);\n                }\n            }\n            if (clickInBar === 0) {\n                this.callbackObject.bar(offsetTime, bar);\n                bar++;\n            }\n        }, `${clicksInBar}n`);\n        tone__WEBPACK_IMPORTED_MODULE_0__.Transport.bpm.value = bpm;\n        tone__WEBPACK_IMPORTED_MODULE_0__.Transport.start();\n    }\n    stop() {\n        this.ticking = false;\n        tone__WEBPACK_IMPORTED_MODULE_0__.Transport.cancel();\n        tone__WEBPACK_IMPORTED_MODULE_0__.Transport.stop();\n    }\n    reset() {\n        this.muted = false;\n        this.ticking = false;\n        this.step = -1;\n        this.startedAt = null;\n    }\n}\n//# sourceMappingURL=metronome.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1hZ2VudGErbXVzaWNAMS4yMy4xX0B0ZW5zb3JmbG93K3RmanMtY29yZUAyLjguNl9zZWVkcmFuZG9tQDIuNC40L25vZGVfbW9kdWxlcy9AbWFnZW50YS9tdXNpYy9lc20vY29yZS9tZXRyb25vbWUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE2QjtBQUM3QjtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiwrQ0FDRDtBQUMxQjtBQUNBLHdCQUF3Qix1Q0FBdUM7QUFDL0QsU0FBUztBQUNUO0FBQ0EsMkJBQTJCLCtDQUNEO0FBQzFCO0FBQ0Esd0JBQXdCLHVDQUF1QztBQUMvRCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMkNBQWM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSwyQ0FBYztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLEtBQUssWUFBWTtBQUMxQixRQUFRLDJDQUFjO0FBQ3RCLFFBQVEsMkNBQWM7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsUUFBUSwyQ0FBYztBQUN0QixRQUFRLDJDQUFjO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21vbW9uZ2FoLmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbWFnZW50YSttdXNpY0AxLjIzLjFfQHRlbnNvcmZsb3crdGZqcy1jb3JlQDIuOC42X3NlZWRyYW5kb21AMi40LjQvbm9kZV9tb2R1bGVzL0BtYWdlbnRhL211c2ljL2VzbS9jb3JlL21ldHJvbm9tZS5qcz9iM2VhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFRvbmUgZnJvbSAndG9uZSc7XG5jb25zdCBRVUFSVEVSU19QRVJfQkFSID0gNDtcbmV4cG9ydCBjbGFzcyBNZXRyb25vbWVDYWxsYmFja09iamVjdCB7XG59XG5leHBvcnQgY2xhc3MgTWV0cm9ub21lIHtcbiAgICBjb25zdHJ1Y3RvcihjYWxsYmFja09iamVjdCwgY2xpY2tzUGVyUXVhcnRlciA9IDEpIHtcbiAgICAgICAgdGhpcy5jbGlja3NQZXJRdWFydGVyID0gMTtcbiAgICAgICAgdGhpcy5tdXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxvQ2xpY2sgPSBuZXcgVG9uZVxuICAgICAgICAgICAgLk1lbWJyYW5lU3ludGgoe1xuICAgICAgICAgICAgcGl0Y2hEZWNheTogMC4wMDgsXG4gICAgICAgICAgICBlbnZlbG9wZTogeyBhdHRhY2s6IDAuMDAxLCBkZWNheTogMC4zLCBzdXN0YWluOiAwIH0sXG4gICAgICAgIH0pXG4gICAgICAgICAgICAudG9EZXN0aW5hdGlvbigpO1xuICAgICAgICB0aGlzLmhpQ2xpY2sgPSBuZXcgVG9uZVxuICAgICAgICAgICAgLk1lbWJyYW5lU3ludGgoe1xuICAgICAgICAgICAgcGl0Y2hEZWNheTogMC4wMDgsXG4gICAgICAgICAgICBlbnZlbG9wZTogeyBhdHRhY2s6IDAuMDAxLCBkZWNheTogMC4zLCBzdXN0YWluOiAwIH0sXG4gICAgICAgIH0pXG4gICAgICAgICAgICAudG9EZXN0aW5hdGlvbigpO1xuICAgICAgICB0aGlzLmxvQ2xpY2tOb3RlID0gJ2M1JztcbiAgICAgICAgdGhpcy5oaUNsaWNrTm90ZSA9ICdnNSc7XG4gICAgICAgIHRoaXMudGlja2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN0YXJ0ZWRBdCA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RlcCA9IC0xO1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tPYmplY3QgPSBjYWxsYmFja09iamVjdDtcbiAgICAgICAgdGhpcy5jbGlja3NQZXJRdWFydGVyID0gY2xpY2tzUGVyUXVhcnRlcjtcbiAgICB9XG4gICAgaXNUaWNraW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50aWNraW5nO1xuICAgIH1cbiAgICBnZXRTdGFydGVkQXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0ZWRBdDtcbiAgICB9XG4gICAgZ2V0T2Zmc2V0VGltZSgpIHtcbiAgICAgICAgcmV0dXJuIFRvbmUuaW1tZWRpYXRlKCkgLSB0aGlzLnN0YXJ0ZWRBdDtcbiAgICB9XG4gICAgc3RhcnQoYnBtID0gMTIwKSB7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgdGhpcy50aWNraW5nID0gdHJ1ZTtcbiAgICAgICAgaWYgKCF0aGlzLmNhbGxiYWNrT2JqZWN0LmNsaWNrKSB7XG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrT2JqZWN0LmNsaWNrID0gKCkgPT4geyB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5jYWxsYmFja09iamVjdC5xdWFydGVyKSB7XG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrT2JqZWN0LnF1YXJ0ZXIgPSAoKSA9PiB7IH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmNhbGxiYWNrT2JqZWN0LmJhcikge1xuICAgICAgICAgICAgdGhpcy5jYWxsYmFja09iamVjdC5iYXIgPSAoKSA9PiB7IH07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGJhciA9IDA7XG4gICAgICAgIGNvbnN0IGNsaWNrc0luQmFyID0gUVVBUlRFUlNfUEVSX0JBUiAqIHRoaXMuY2xpY2tzUGVyUXVhcnRlcjtcbiAgICAgICAgVG9uZS5UcmFuc3BvcnQuc2NoZWR1bGVSZXBlYXQoKHRpbWUpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5zdGFydGVkQXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0ZWRBdCA9IHRpbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvZmZzZXRUaW1lID0gdGltZSAtIHRoaXMuc3RhcnRlZEF0O1xuICAgICAgICAgICAgdGhpcy5zdGVwKys7XG4gICAgICAgICAgICBjb25zdCBjbGlja0luQmFyID0gdGhpcy5zdGVwICUgY2xpY2tzSW5CYXI7XG4gICAgICAgICAgICBjb25zdCBjbGlja0luUXVhcnRlciA9IE1hdGguZmxvb3IoY2xpY2tJbkJhciAvIHRoaXMuY2xpY2tzUGVyUXVhcnRlcik7XG4gICAgICAgICAgICBjb25zdCBxdWFydGVyID0gY2xpY2tJbkJhciAlIHRoaXMuY2xpY2tzUGVyUXVhcnRlcjtcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tPYmplY3QuY2xpY2sob2Zmc2V0VGltZSwgY2xpY2tJbkJhcik7XG4gICAgICAgICAgICBpZiAocXVhcnRlciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tPYmplY3QucXVhcnRlcihvZmZzZXRUaW1lLCBjbGlja0luUXVhcnRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMubXV0ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2xpY2tJbkJhciA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpQ2xpY2sudHJpZ2dlckF0dGFjayh0aGlzLmhpQ2xpY2tOb3RlLCB0aW1lLCAwLjEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb0NsaWNrLnRyaWdnZXJBdHRhY2sodGhpcy5sb0NsaWNrTm90ZSwgdGltZSwgMC4xKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2xpY2tJbkJhciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tPYmplY3QuYmFyKG9mZnNldFRpbWUsIGJhcik7XG4gICAgICAgICAgICAgICAgYmFyKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGAke2NsaWNrc0luQmFyfW5gKTtcbiAgICAgICAgVG9uZS5UcmFuc3BvcnQuYnBtLnZhbHVlID0gYnBtO1xuICAgICAgICBUb25lLlRyYW5zcG9ydC5zdGFydCgpO1xuICAgIH1cbiAgICBzdG9wKCkge1xuICAgICAgICB0aGlzLnRpY2tpbmcgPSBmYWxzZTtcbiAgICAgICAgVG9uZS5UcmFuc3BvcnQuY2FuY2VsKCk7XG4gICAgICAgIFRvbmUuVHJhbnNwb3J0LnN0b3AoKTtcbiAgICB9XG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMubXV0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy50aWNraW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3RlcCA9IC0xO1xuICAgICAgICB0aGlzLnN0YXJ0ZWRBdCA9IG51bGw7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWV0cm9ub21lLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/metronome.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/midi_io.js":
/*!***********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/midi_io.js ***!
  \***********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MidiConversionError: () => (/* binding */ MidiConversionError),\n/* harmony export */   blobToNoteSequence: () => (/* binding */ blobToNoteSequence),\n/* harmony export */   midiToSequenceProto: () => (/* binding */ midiToSequenceProto),\n/* harmony export */   sequenceProtoToMidi: () => (/* binding */ sequenceProtoToMidi),\n/* harmony export */   urlToBlob: () => (/* binding */ urlToBlob),\n/* harmony export */   urlToNoteSequence: () => (/* binding */ urlToNoteSequence)\n/* harmony export */ });\n/* harmony import */ var _tonejs_midi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tonejs/midi */ \"(ssr)/./node_modules/.pnpm/@tonejs+midi@2.0.28/node_modules/@tonejs/midi/build/Midi.js\");\n/* harmony import */ var _tonejs_midi__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tonejs_midi__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _core_compat_global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/compat/global */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/compat/global.js\");\n/* harmony import */ var _protobuf_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../protobuf/index */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/protobuf/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/constants.js\");\n/* harmony import */ var _sequences__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sequences */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/sequences.js\");\n\n\n\n\n\nclass MidiConversionError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n}\nfunction midiToSequenceProto(midi) {\n    const parsedMidi = new _tonejs_midi__WEBPACK_IMPORTED_MODULE_0__.Midi(midi);\n    const ns = _protobuf_index__WEBPACK_IMPORTED_MODULE_2__.NoteSequence.create();\n    ns.ticksPerQuarter = parsedMidi.header.ppq;\n    ns.sourceInfo = _protobuf_index__WEBPACK_IMPORTED_MODULE_2__.NoteSequence.SourceInfo.create({\n        parser: _protobuf_index__WEBPACK_IMPORTED_MODULE_2__.NoteSequence.SourceInfo.Parser.TONEJS_MIDI_CONVERT,\n        encodingType: _protobuf_index__WEBPACK_IMPORTED_MODULE_2__.NoteSequence.SourceInfo.EncodingType.MIDI\n    });\n    for (const ts of parsedMidi.header.timeSignatures) {\n        ns.timeSignatures.push(_protobuf_index__WEBPACK_IMPORTED_MODULE_2__.NoteSequence.TimeSignature.create({\n            time: parsedMidi.header.ticksToSeconds(ts.ticks),\n            numerator: ts.timeSignature[0],\n            denominator: ts.timeSignature[1],\n        }));\n    }\n    if (!ns.timeSignatures.length) {\n        ns.timeSignatures.push(_protobuf_index__WEBPACK_IMPORTED_MODULE_2__.NoteSequence.TimeSignature.create({\n            time: 0,\n            numerator: 4,\n            denominator: 4,\n        }));\n    }\n    for (const tempo of parsedMidi.header.tempos) {\n        ns.tempos.push(_protobuf_index__WEBPACK_IMPORTED_MODULE_2__.NoteSequence.Tempo.create({\n            time: tempo.time,\n            qpm: tempo.bpm,\n        }));\n    }\n    let instrumentNumber = -1;\n    for (const track of parsedMidi.tracks) {\n        if (track.notes.length > 0) {\n            instrumentNumber += 1;\n        }\n        for (const note of track.notes) {\n            const startTime = note.time;\n            const duration = note.duration;\n            const endTime = startTime + duration;\n            ns.notes.push(_protobuf_index__WEBPACK_IMPORTED_MODULE_2__.NoteSequence.Note.create({\n                instrument: instrumentNumber,\n                program: track.instrument.number,\n                startTime,\n                endTime,\n                pitch: note.midi,\n                velocity: Math.floor(note.velocity * _constants__WEBPACK_IMPORTED_MODULE_3__.MIDI_VELOCITIES),\n                isDrum: track.instrument.percussion\n            }));\n            if (endTime > ns.totalTime) {\n                ns.totalTime = endTime;\n            }\n        }\n        const controlChangeValues = Object.values(track.controlChanges);\n        const flattenedControlChangeValues = [].concat.apply([], controlChangeValues);\n        for (const controlChange of flattenedControlChangeValues) {\n            ns.controlChanges.push(_protobuf_index__WEBPACK_IMPORTED_MODULE_2__.NoteSequence.ControlChange.create({\n                time: controlChange.time,\n                controlNumber: controlChange.number,\n                controlValue: Math.floor(controlChange.value * (_constants__WEBPACK_IMPORTED_MODULE_3__.MIDI_VELOCITIES - 1)),\n                instrument: instrumentNumber,\n                program: track.instrument.number,\n                isDrum: track.instrument.percussion\n            }));\n        }\n    }\n    return ns;\n}\nfunction sequenceProtoToMidi(ns) {\n    if (_sequences__WEBPACK_IMPORTED_MODULE_4__.isQuantizedSequence(ns)) {\n        ns = _sequences__WEBPACK_IMPORTED_MODULE_4__.unquantizeSequence(ns);\n    }\n    const midi = new _tonejs_midi__WEBPACK_IMPORTED_MODULE_0__.Midi();\n    midi.fromJSON({\n        header: {\n            name: '',\n            ppq: ns.ticksPerQuarter || _constants__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_TICKS_PER_QUARTER,\n            tempos: [],\n            timeSignatures: [],\n            keySignatures: [],\n            meta: []\n        },\n        tracks: []\n    });\n    const tempos = Array.from(ns.tempos || []);\n    if (tempos.length === 0) {\n        tempos.push({ time: 0, qpm: _constants__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_QUARTERS_PER_MINUTE });\n    }\n    tempos.sort((a, b) => a.time - b.time);\n    for (const tempo of tempos) {\n        midi.header.tempos.push({ ticks: midi.header.secondsToTicks(tempo.time),\n            bpm: tempo.qpm });\n        midi.header.update();\n    }\n    if (!ns.timeSignatures || ns.timeSignatures.length === 0) {\n        midi.header.timeSignatures.push({ ticks: 0, timeSignature: [4, 4] });\n    }\n    else {\n        for (const ts of ns.timeSignatures) {\n            midi.header.timeSignatures.push({\n                ticks: midi.header.secondsToTicks(ts.time),\n                timeSignature: [ts.numerator, ts.denominator]\n            });\n        }\n    }\n    midi.header.update();\n    const tracks = new Map();\n    for (const note of ns.notes) {\n        const instrument = note.instrument ? note.instrument : 0;\n        const program = (note.program === undefined) ? _constants__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_PROGRAM :\n            note.program;\n        const isDrum = !!note.isDrum;\n        const key = JSON.stringify([instrument, program, isDrum]);\n        if (!tracks.has(key)) {\n            tracks.set(key, { notes: [], controlChanges: [] });\n        }\n        tracks.get(key).notes.push(note);\n    }\n    for (const controlChange of ns.controlChanges) {\n        const instrument = controlChange.instrument ? controlChange.instrument : 0;\n        const program = (controlChange.program === undefined)\n            ? _constants__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_PROGRAM : controlChange.program;\n        const isDrum = !!controlChange.isDrum;\n        const key = JSON.stringify([instrument, program, isDrum]);\n        if (!tracks.has(key)) {\n            tracks.set(key, { notes: [], controlChanges: [] });\n        }\n        tracks.get(key).controlChanges.push(controlChange);\n    }\n    tracks.forEach((trackData, key) => {\n        const [program, isDrum] = JSON.parse(key).slice(1);\n        const track = midi.addTrack();\n        if (isDrum) {\n            track.channel = _constants__WEBPACK_IMPORTED_MODULE_3__.DRUM_CHANNEL;\n        }\n        else {\n            track.channel = _constants__WEBPACK_IMPORTED_MODULE_3__.NON_DRUM_CHANNELS[(midi.tracks.length - 1) % _constants__WEBPACK_IMPORTED_MODULE_3__.NON_DRUM_CHANNELS.length];\n        }\n        track.instrument.number = program;\n        for (const note of trackData.notes) {\n            const velocity = (note.velocity === undefined) ?\n                _constants__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_VELOCITY :\n                note.velocity;\n            track.addNote({\n                midi: note.pitch,\n                time: note.startTime,\n                duration: note.endTime - note.startTime,\n                velocity: (velocity + 1) / _constants__WEBPACK_IMPORTED_MODULE_3__.MIDI_VELOCITIES\n            });\n        }\n        for (const controlChange of trackData.controlChanges) {\n            track.addCC({\n                number: controlChange.controlNumber,\n                value: controlChange.controlValue,\n                time: controlChange.time\n            });\n        }\n    });\n    return midi.toArray();\n}\nfunction urlToBlob(url) {\n    return new Promise((resolve, reject) => {\n        (0,_core_compat_global__WEBPACK_IMPORTED_MODULE_1__.fetch)(url)\n            .then((response) => {\n            return response.blob();\n        })\n            .then((blob) => {\n            resolve(blob);\n        })\n            .catch((error) => reject(error));\n    });\n}\nfunction blobToNoteSequence(blob) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            try {\n                const ns = midiToSequenceProto(reader.result);\n                resolve(ns);\n            }\n            catch (error) {\n                reject(error);\n            }\n        };\n        reader.onerror = (e) => reject(e);\n        reader.readAsArrayBuffer(blob);\n    });\n}\nfunction urlToNoteSequence(url) {\n    return urlToBlob(url).then(blobToNoteSequence);\n}\n//# sourceMappingURL=midi_io.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/midi_io.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/performance.js":
/*!***************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/performance.js ***!
  \***************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Performance: () => (/* binding */ Performance)\n/* harmony export */ });\n/* harmony import */ var _protobuf_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../protobuf/index */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/protobuf/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/constants.js\");\n/* harmony import */ var _sequences__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sequences */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/sequences.js\");\n/* harmony import */ var _logging__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/logging.js\");\n\n\n\n\nclass Performance {\n    constructor(events, maxShiftSteps, numVelocityBins, program, isDrum) {\n        this.events = events;\n        this.maxShiftSteps = maxShiftSteps;\n        this.numVelocityBins = numVelocityBins;\n        this.program = program;\n        this.isDrum = isDrum;\n    }\n    static fromNoteSequence(noteSequence, maxShiftSteps, numVelocityBins, instrument) {\n        _sequences__WEBPACK_IMPORTED_MODULE_2__.assertIsQuantizedSequence(noteSequence);\n        const notes = noteSequence.notes.filter((note, _) => instrument !== undefined ? note.instrument === instrument : true);\n        const sortedNotes = notes.sort((a, b) => a.startTime === b.startTime ? a.pitch - b.pitch :\n            a.startTime - b.startTime);\n        const onsets = sortedNotes.map((note, i) => ({ step: note.quantizedStartStep, index: i, isOffset: 0 }));\n        const offsets = sortedNotes.map((note, i) => ({ step: note.quantizedEndStep, index: i, isOffset: 1 }));\n        const noteEvents = onsets.concat(offsets).sort((a, b) => a.step === b.step ?\n            (a.index === b.index ? a.isOffset - b.isOffset :\n                a.index - b.index) :\n            a.step - b.step);\n        const velocityBinSize = numVelocityBins ?\n            Math.ceil((_constants__WEBPACK_IMPORTED_MODULE_1__.MIDI_VELOCITIES - 1) / numVelocityBins) :\n            undefined;\n        const events = [];\n        let currentStep = 0;\n        let currentVelocityBin = numVelocityBins;\n        for (const e of noteEvents) {\n            if (e.step > currentStep) {\n                while (e.step > currentStep + maxShiftSteps) {\n                    events.push({ type: 'time-shift', steps: maxShiftSteps });\n                    currentStep += maxShiftSteps;\n                }\n                events.push({ type: 'time-shift', steps: e.step - currentStep });\n                currentStep = e.step;\n            }\n            if (e.isOffset) {\n                events.push({ type: 'note-off', pitch: sortedNotes[e.index].pitch });\n            }\n            else {\n                if (velocityBinSize) {\n                    const velocityBin = Math.floor((sortedNotes[e.index].velocity -\n                        _constants__WEBPACK_IMPORTED_MODULE_1__.MIN_MIDI_VELOCITY - 1) /\n                        velocityBinSize) +\n                        1;\n                    if (velocityBin !== currentVelocityBin) {\n                        events.push({ type: 'velocity-change', velocityBin });\n                        currentVelocityBin = velocityBin;\n                    }\n                }\n                events.push({ type: 'note-on', pitch: sortedNotes[e.index].pitch });\n            }\n        }\n        const isDrum = notes.some(note => note.isDrum) ?\n            (notes.some(note => !note.isDrum) ? undefined : true) :\n            false;\n        const programs = Array.from(new Set(notes.map(note => note.program)));\n        const program = (!isDrum && programs.length === 1) ? programs[0] : undefined;\n        const performance = new Performance(events, maxShiftSteps, numVelocityBins, program, isDrum);\n        performance.setNumSteps(noteSequence.totalQuantizedSteps);\n        return performance;\n    }\n    getNumSteps() {\n        return this.events.filter((event) => event.type === 'time-shift')\n            .map((event) => event.steps)\n            .reduce((a, b) => a + b, 0);\n    }\n    setNumSteps(numSteps) {\n        let currentNumSteps = this.getNumSteps();\n        if (currentNumSteps < numSteps) {\n            if (this.events.length) {\n                const event = this.events[this.events.length - 1];\n                if (event.type === 'time-shift') {\n                    const steps = Math.min(numSteps - currentNumSteps, this.maxShiftSteps - event.steps);\n                    event.steps += steps;\n                    currentNumSteps += steps;\n                }\n            }\n            while (currentNumSteps < numSteps) {\n                if (currentNumSteps + this.maxShiftSteps > numSteps) {\n                    this.events.push({ type: 'time-shift', steps: numSteps - currentNumSteps });\n                    currentNumSteps = numSteps;\n                }\n                else {\n                    this.events.push({ type: 'time-shift', steps: this.maxShiftSteps });\n                    currentNumSteps += this.maxShiftSteps;\n                }\n            }\n        }\n        else if (currentNumSteps > numSteps) {\n            while (this.events.length && currentNumSteps > numSteps) {\n                const event = this.events[this.events.length - 1];\n                if (event.type === 'time-shift') {\n                    if (currentNumSteps - event.steps < numSteps) {\n                        event.steps -= currentNumSteps - numSteps;\n                        currentNumSteps = numSteps;\n                    }\n                    else {\n                        this.events.pop();\n                        currentNumSteps -= event.steps;\n                    }\n                }\n                else {\n                    this.events.pop();\n                }\n            }\n        }\n    }\n    toNoteSequence(instrument) {\n        const velocityBinSize = this.numVelocityBins ?\n            Math.ceil((_constants__WEBPACK_IMPORTED_MODULE_1__.MIDI_VELOCITIES - 1) / this.numVelocityBins) :\n            undefined;\n        const noteSequence = _protobuf_index__WEBPACK_IMPORTED_MODULE_0__.NoteSequence.create();\n        let currentStep = 0;\n        let currentVelocity = undefined;\n        const pitchStartStepsAndVelocities = new Map();\n        for (let i = _constants__WEBPACK_IMPORTED_MODULE_1__.MIN_MIDI_PITCH; i <= _constants__WEBPACK_IMPORTED_MODULE_1__.MAX_MIDI_PITCH; ++i) {\n            pitchStartStepsAndVelocities.set(i, []);\n        }\n        for (const event of this.events) {\n            switch (event.type) {\n                case 'note-on':\n                    pitchStartStepsAndVelocities.get(event.pitch).push([\n                        currentStep, currentVelocity\n                    ]);\n                    break;\n                case 'note-off':\n                    const startStepsAndVelocities = pitchStartStepsAndVelocities.get(event.pitch);\n                    if (startStepsAndVelocities.length) {\n                        const [startStep, velocity] = startStepsAndVelocities.shift();\n                        if (currentStep > startStep) {\n                            noteSequence.notes.push(_protobuf_index__WEBPACK_IMPORTED_MODULE_0__.NoteSequence.Note.create({\n                                pitch: event.pitch,\n                                velocity,\n                                instrument,\n                                quantizedStartStep: startStep,\n                                quantizedEndStep: currentStep,\n                                program: this.program,\n                                isDrum: this.isDrum,\n                            }));\n                        }\n                        else {\n                            _logging__WEBPACK_IMPORTED_MODULE_3__.log('Ignoring zero-length note: ' +\n                                `(pitch = ${event.pitch}, step = ${currentStep})`, 'Performance');\n                        }\n                    }\n                    else {\n                        _logging__WEBPACK_IMPORTED_MODULE_3__.log('Ignoring note-off with no previous note-on:' +\n                            `(pitch = ${event.pitch}, step = ${currentStep})`, 'Performance');\n                    }\n                    break;\n                case 'time-shift':\n                    currentStep += event.steps;\n                    break;\n                case 'velocity-change':\n                    if (velocityBinSize) {\n                        currentVelocity = _constants__WEBPACK_IMPORTED_MODULE_1__.MIN_MIDI_VELOCITY +\n                            (event.velocityBin - 1) * velocityBinSize + 1;\n                    }\n                    else {\n                        throw new Error(`Unexpected velocity change event: ${event}`);\n                    }\n                    break;\n                default:\n                    throw new Error(`Unrecognized performance event: ${event}`);\n            }\n        }\n        pitchStartStepsAndVelocities.forEach((startStepsAndVelocities, pitch) => {\n            for (const [startStep, velocity] of startStepsAndVelocities) {\n                if (currentStep > startStep) {\n                    noteSequence.notes.push(_protobuf_index__WEBPACK_IMPORTED_MODULE_0__.NoteSequence.Note.create({\n                        pitch,\n                        velocity,\n                        instrument,\n                        quantizedStartStep: startStep,\n                        quantizedEndStep: currentStep,\n                        program: this.program,\n                        isDrum: this.isDrum\n                    }));\n                }\n                else {\n                    _logging__WEBPACK_IMPORTED_MODULE_3__.log('Ignoring zero-length note: ' +\n                        `(pitch = ${pitch}, step = ${currentStep})`, 'Performance');\n                }\n            }\n        });\n        noteSequence.totalQuantizedSteps = currentStep;\n        return noteSequence;\n    }\n}\n//# sourceMappingURL=performance.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/performance.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/player.js":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/player.js ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePlayer: () => (/* binding */ BasePlayer),\n/* harmony export */   BasePlayerCallback: () => (/* binding */ BasePlayerCallback),\n/* harmony export */   MIDIPlayer: () => (/* binding */ MIDIPlayer),\n/* harmony export */   Player: () => (/* binding */ Player),\n/* harmony export */   PlayerWithClick: () => (/* binding */ PlayerWithClick),\n/* harmony export */   SoundFontPlayer: () => (/* binding */ SoundFontPlayer)\n/* harmony export */ });\n/* harmony import */ var tone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tone */ \"(ssr)/./node_modules/.pnpm/tone@14.7.77/node_modules/tone/build/Tone.js\");\n/* harmony import */ var tone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tone__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _core_compat_global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/compat/global */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/compat/global.js\");\n/* harmony import */ var _protobuf_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../protobuf/index */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/protobuf/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/constants.js\");\n/* harmony import */ var _soundfont__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./soundfont */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/soundfont.js\");\n/* harmony import */ var _sequences__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sequences */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/sequences.js\");\n\n\n\n\n\n\nfunction compareQuantizedNotes(a, b) {\n    if (a.quantizedStartStep < b.quantizedStartStep) {\n        return -1;\n    }\n    if (a.quantizedStartStep > b.quantizedStartStep) {\n        return 1;\n    }\n    if (a.pitch < b.pitch) {\n        return -1;\n    }\n    return 1;\n}\nclass BasePlayerCallback {\n}\nclass BasePlayer {\n    constructor(playClick = false, callbackObject) {\n        this.playClick = playClick;\n        this.callbackObject = callbackObject;\n        this.desiredQPM = undefined;\n    }\n    setTempo(qpm) {\n        this.desiredQPM = qpm;\n        if (tone__WEBPACK_IMPORTED_MODULE_0__.Transport.state === 'started') {\n            tone__WEBPACK_IMPORTED_MODULE_0__.Transport.bpm.value = qpm;\n        }\n    }\n    makeClickSequence(seq) {\n        const clickSeq = _sequences__WEBPACK_IMPORTED_MODULE_5__.clone(seq);\n        const sixteenthEnds = clickSeq.notes.map((n) => n.quantizedEndStep);\n        const lastSixteenth = Math.max(...sixteenthEnds);\n        for (let i = 0; i < lastSixteenth; i += 4) {\n            const click = {\n                pitch: i % 16 === 0 ? _constants__WEBPACK_IMPORTED_MODULE_3__.LO_CLICK_PITCH :\n                    _constants__WEBPACK_IMPORTED_MODULE_3__.HI_CLICK_PITCH,\n                quantizedStartStep: i,\n                isDrum: true,\n                quantizedEndStep: i + 1,\n            };\n            clickSeq.notes.push(click);\n        }\n        clickSeq.notes.sort(compareQuantizedNotes);\n        return clickSeq;\n    }\n    resumeContext() {\n        tone__WEBPACK_IMPORTED_MODULE_0__.context.resume();\n    }\n    start(seq, qpm, offset = 0) {\n        if (this.getPlayState() === 'started') {\n            throw new Error('Cannot start playback; player is already playing.');\n        }\n        else if (this.getPlayState() === 'paused') {\n            throw new Error('Cannot `start()` a paused player; use `resume()`.');\n        }\n        if (tone__WEBPACK_IMPORTED_MODULE_0__.Transport.state !== 'stopped') {\n            throw new Error('Cannot start playback while `Tone.Transport` is in use.');\n        }\n        this.resumeContext();\n        const isQuantized = _sequences__WEBPACK_IMPORTED_MODULE_5__.isQuantizedSequence(seq);\n        if (this.playClick && isQuantized) {\n            seq = this.makeClickSequence(seq);\n        }\n        if (qpm) {\n            tone__WEBPACK_IMPORTED_MODULE_0__.Transport.bpm.value = qpm;\n        }\n        else if (seq.tempos && seq.tempos.length > 0 && seq.tempos[0].qpm > 0) {\n            tone__WEBPACK_IMPORTED_MODULE_0__.Transport.bpm.value = seq.tempos[0].qpm;\n        }\n        else {\n            tone__WEBPACK_IMPORTED_MODULE_0__.Transport.bpm.value = _constants__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_QUARTERS_PER_MINUTE;\n        }\n        if (isQuantized) {\n            seq = _sequences__WEBPACK_IMPORTED_MODULE_5__.unquantizeSequence(seq, qpm);\n        }\n        else if (qpm) {\n            throw new Error('Cannot specify a `qpm` for a non-quantized sequence.');\n        }\n        const thisPart = new tone__WEBPACK_IMPORTED_MODULE_0__.Part((t, n) => {\n            if (this.currentPart !== thisPart) {\n                return;\n            }\n            this.playNote(t, n);\n            if (this.callbackObject) {\n                tone__WEBPACK_IMPORTED_MODULE_0__.Draw.schedule(() => {\n                    this.callbackObject.run(n, t);\n                }, t);\n            }\n        }, seq.notes.map((n) => [n.startTime, n]));\n        this.currentPart = thisPart;\n        if (this.desiredQPM) {\n            tone__WEBPACK_IMPORTED_MODULE_0__.Transport.bpm.value = this.desiredQPM;\n        }\n        this.currentPart.start(undefined, offset);\n        if (tone__WEBPACK_IMPORTED_MODULE_0__.Transport.state !== 'started') {\n            tone__WEBPACK_IMPORTED_MODULE_0__.Transport.start();\n        }\n        return new Promise((resolve) => {\n            this.scheduledStop = tone__WEBPACK_IMPORTED_MODULE_0__.Transport.schedule(() => {\n                this.stop();\n                resolve();\n                if (this.callbackObject) {\n                    this.callbackObject.stop();\n                }\n            }, `+${seq.totalTime}`);\n        });\n    }\n    stop() {\n        if (this.isPlaying()) {\n            this.currentPart.stop();\n            tone__WEBPACK_IMPORTED_MODULE_0__.Transport.stop();\n            this.currentPart = null;\n        }\n        tone__WEBPACK_IMPORTED_MODULE_0__.Transport.clear(this.scheduledStop);\n        this.scheduledStop = undefined;\n        this.desiredQPM = undefined;\n    }\n    pause() {\n        if (!this.isPlaying()) {\n            throw new Error('Cannot pause playback while the player is stopped.');\n        }\n        tone__WEBPACK_IMPORTED_MODULE_0__.Transport.pause();\n    }\n    resume() {\n        if (this.getPlayState() !== 'paused') {\n            throw new Error(`Cannot resume playback while \"${this.getPlayState()}\".`);\n        }\n        tone__WEBPACK_IMPORTED_MODULE_0__.Transport.start();\n    }\n    seekTo(seconds) {\n        if (!this.isPlaying()) {\n            throw new Error('Cannot seek while the player is stopped.');\n        }\n        tone__WEBPACK_IMPORTED_MODULE_0__.Transport.seconds = seconds;\n    }\n    isPlaying() {\n        return !!this.currentPart;\n    }\n    getPlayState() {\n        return this.isPlaying() ? tone__WEBPACK_IMPORTED_MODULE_0__.Transport.state : 'stopped';\n    }\n}\nclass DrumKit {\n    constructor() {\n        this.DRUM_PITCH_TO_CLASS = new Map();\n        this.kick = new tone__WEBPACK_IMPORTED_MODULE_0__.MembraneSynth().toDestination();\n        this.tomLow = new tone__WEBPACK_IMPORTED_MODULE_0__.MembraneSynth({\n            pitchDecay: 0.008,\n            envelope: { attack: 0.01, decay: 0.5, sustain: 0 },\n        })\n            .toDestination();\n        this.tomMid = new tone__WEBPACK_IMPORTED_MODULE_0__.MembraneSynth({\n            pitchDecay: 0.008,\n            envelope: { attack: 0.01, decay: 0.5, sustain: 0 },\n        })\n            .toDestination();\n        this.tomHigh = new tone__WEBPACK_IMPORTED_MODULE_0__.MembraneSynth({\n            pitchDecay: 0.008,\n            envelope: { attack: 0.01, decay: 0.5, sustain: 0 },\n        })\n            .toDestination();\n        this.closedHihat = new tone__WEBPACK_IMPORTED_MODULE_0__.MetalSynth({\n            frequency: 400,\n            envelope: { attack: 0.001, decay: 0.1, release: 0.8 },\n            harmonicity: 5.1,\n            modulationIndex: 32,\n            resonance: 4000,\n            octaves: 1,\n        })\n            .toDestination();\n        this.openHihat = new tone__WEBPACK_IMPORTED_MODULE_0__.MetalSynth({\n            frequency: 400,\n            envelope: { attack: 0.001, decay: 0.5, release: 0.8, sustain: 1 },\n            harmonicity: 5.1,\n            modulationIndex: 32,\n            resonance: 4000,\n            octaves: 1,\n        })\n            .toDestination();\n        this.ride = new tone__WEBPACK_IMPORTED_MODULE_0__.MetalSynth().toDestination();\n        this.crash = new tone__WEBPACK_IMPORTED_MODULE_0__.MetalSynth({\n            frequency: 300,\n            envelope: { attack: 0.001, decay: 1, release: 3 },\n            harmonicity: 5.1,\n            modulationIndex: 64,\n            resonance: 4000,\n            octaves: 1.5,\n        })\n            .toDestination();\n        this.snare = new tone__WEBPACK_IMPORTED_MODULE_0__.NoiseSynth({\n            noise: { type: 'white' },\n            envelope: { attack: 0.005, decay: 0.05, sustain: 0.1, release: 0.4 },\n        })\n            .toDestination();\n        this.loClick = new tone__WEBPACK_IMPORTED_MODULE_0__.MembraneSynth({\n            pitchDecay: 0.008,\n            envelope: { attack: 0.001, decay: 0.3, sustain: 0 },\n        })\n            .toDestination();\n        this.hiClick = new tone__WEBPACK_IMPORTED_MODULE_0__.MembraneSynth({\n            pitchDecay: 0.008,\n            envelope: { attack: 0.001, decay: 0.3, sustain: 0 },\n        })\n            .toDestination();\n        this.pitchPlayers = [\n            (time, velocity = 1) => this.kick.triggerAttackRelease('C2', '8n', time, velocity),\n            (time, velocity = 1) => this.snare.triggerAttackRelease('16n', time, velocity),\n            (time, velocity = 1) => this.closedHihat.triggerAttack(time, 0.3, velocity),\n            (time, velocity = 1) => this.openHihat.triggerAttack(time, 0.3, velocity),\n            (time, velocity = 0.5) => this.tomLow.triggerAttack('G3', time, velocity),\n            (time, velocity = 0.5) => this.tomMid.triggerAttack('C4', time, velocity),\n            (time, velocity = 0.5) => this.tomHigh.triggerAttack('F4', time, velocity),\n            (time, velocity = 1) => this.crash.triggerAttack(time, 1.0, velocity),\n            (time, velocity = 1) => this.ride.triggerAttack(time, 0.5, velocity),\n            (time, velocity = 0.5) => this.loClick.triggerAttack('G5', time, velocity),\n            (time, velocity = 0.5) => this.hiClick.triggerAttack('C6', time, velocity),\n        ];\n        for (let c = 0; c < _constants__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_DRUM_PITCH_CLASSES.length; ++c) {\n            _constants__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_DRUM_PITCH_CLASSES[c].forEach((p) => {\n                this.DRUM_PITCH_TO_CLASS.set(p, c);\n            });\n        }\n        this.DRUM_PITCH_TO_CLASS.set(_constants__WEBPACK_IMPORTED_MODULE_3__.LO_CLICK_PITCH, _constants__WEBPACK_IMPORTED_MODULE_3__.LO_CLICK_CLASS);\n        this.DRUM_PITCH_TO_CLASS.set(_constants__WEBPACK_IMPORTED_MODULE_3__.HI_CLICK_PITCH, _constants__WEBPACK_IMPORTED_MODULE_3__.HI_CLICK_CLASS);\n    }\n    static getInstance() {\n        if (!DrumKit.instance) {\n            DrumKit.instance = new DrumKit();\n        }\n        return DrumKit.instance;\n    }\n    playNote(pitch, time, velocity) {\n        this.pitchPlayers[this.DRUM_PITCH_TO_CLASS.get(pitch)](time, velocity);\n    }\n}\nclass Player extends BasePlayer {\n    constructor() {\n        super(...arguments);\n        this.drumKit = DrumKit.getInstance();\n        this.bassSynth = new tone__WEBPACK_IMPORTED_MODULE_0__.Synth({\n            volume: 5,\n            oscillator: { type: 'triangle' },\n        })\n            .toDestination();\n        this.polySynth = new tone__WEBPACK_IMPORTED_MODULE_0__.PolySynth().toDestination();\n    }\n    playNote(time, note) {\n        const velocity = note.hasOwnProperty('velocity') ?\n            note.velocity / _constants__WEBPACK_IMPORTED_MODULE_3__.MAX_MIDI_VELOCITY :\n            undefined;\n        if (note.isDrum) {\n            this.drumKit.playNote(note.pitch, time, velocity);\n        }\n        else {\n            const freq = tone__WEBPACK_IMPORTED_MODULE_0__.Frequency(note.pitch, 'midi').toFrequency();\n            const dur = note.endTime - note.startTime;\n            this.getSynth(note.instrument, note.program)\n                .triggerAttackRelease(freq, dur, time, velocity);\n        }\n    }\n    getSynth(instrument, program) {\n        if (program !== undefined && program >= 32 && program <= 39) {\n            return this.bassSynth;\n        }\n        else {\n            return this.polySynth;\n        }\n    }\n}\nPlayer.tone = tone__WEBPACK_IMPORTED_MODULE_0__;\nclass SoundFontPlayer extends BasePlayer {\n    constructor(soundFontURL, output = tone__WEBPACK_IMPORTED_MODULE_0__.Master, programOutputs, drumOutputs, callbackObject) {\n        super(false, callbackObject);\n        this.soundFont = new _soundfont__WEBPACK_IMPORTED_MODULE_4__.SoundFont(soundFontURL);\n        this.output = output;\n        this.programOutputs = programOutputs;\n        this.drumOutputs = drumOutputs;\n    }\n    async loadSamples(seq) {\n        await this.soundFont.loadSamples(seq.notes.map((note) => ({\n            pitch: note.pitch,\n            velocity: note.velocity,\n            program: note.program || 0,\n            isDrum: note.isDrum || false,\n        })));\n    }\n    async loadAllSamples(program = 0, isDrum = false) {\n        const ns = _protobuf_index__WEBPACK_IMPORTED_MODULE_2__.NoteSequence.create();\n        const min = isDrum ? _constants__WEBPACK_IMPORTED_MODULE_3__.MIN_DRUM_PITCH : _constants__WEBPACK_IMPORTED_MODULE_3__.MIN_PIANO_PITCH;\n        const max = isDrum ? _constants__WEBPACK_IMPORTED_MODULE_3__.MAX_DRUM_PITCH : _constants__WEBPACK_IMPORTED_MODULE_3__.MAX_PIANO_PITCH;\n        for (let i = min; i <= max; i++) {\n            for (let j = _constants__WEBPACK_IMPORTED_MODULE_3__.MIN_MIDI_VELOCITY; j < _constants__WEBPACK_IMPORTED_MODULE_3__.MAX_MIDI_VELOCITY; j++) {\n                ns.notes.push({ pitch: i, velocity: j, program, isDrum });\n            }\n        }\n        return this.loadSamples(ns);\n    }\n    resumeContext() {\n        tone__WEBPACK_IMPORTED_MODULE_0__.context.resume();\n    }\n    start(seq, qpm, offset = 0) {\n        this.resumeContext();\n        return this.loadSamples(seq).then(() => super.start(seq, qpm, offset));\n    }\n    playNote(time, note) {\n        this.soundFont.playNote(note.pitch, note.velocity, time, note.endTime - note.startTime, note.program, note.isDrum, this.getAudioNodeOutput(note));\n    }\n    playNoteDown(note) {\n        this.soundFont.playNoteDown(note.pitch, note.velocity, note.program, note.isDrum, this.getAudioNodeOutput(note));\n    }\n    playNoteUp(note) {\n        this.soundFont.playNoteUp(note.pitch, note.velocity, note.program, note.isDrum, this.getAudioNodeOutput(note));\n    }\n    getAudioNodeOutput(note) {\n        let output = this.output;\n        if (this.programOutputs && !note.isDrum) {\n            if (this.programOutputs.has(note.program)) {\n                output = this.programOutputs.get(note.program);\n            }\n        }\n        else if (this.drumOutputs && note.isDrum) {\n            if (this.drumOutputs.has(note.pitch)) {\n                output = this.drumOutputs.get(note.pitch);\n            }\n        }\n        return output;\n    }\n}\nclass PlayerWithClick extends Player {\n    constructor(callbackObject) {\n        super(true, callbackObject);\n    }\n}\nclass MIDIPlayer extends BasePlayer {\n    constructor(callbackObject) {\n        super(false, callbackObject);\n        this.outputs = [];\n        this.outputChannel = 0;\n        this.availableOutputs = [];\n        this.NOTE_ON = 0x90;\n        this.NOTE_OFF = 0x80;\n    }\n    async requestMIDIAccess() {\n        if (navigator.requestMIDIAccess) {\n            return new Promise((resolve, reject) => {\n                navigator.requestMIDIAccess().then((midi) => {\n                    midi.addEventListener('statechange', (event) => this.initOutputs(midi));\n                    resolve(this.initOutputs(midi));\n                }, (err) => console.log('Something went wrong', reject(err)));\n            });\n        }\n        else {\n            return null;\n        }\n    }\n    initOutputs(midi) {\n        const outputs = midi.outputs.values();\n        for (let output = outputs.next(); output && !output.done; output = outputs.next()) {\n            this.availableOutputs.push(output.value);\n        }\n        return this.availableOutputs;\n    }\n    playNote(time, note) {\n        const velocity = note.velocity || 100;\n        const length = (note.endTime - note.startTime) * 1000;\n        const msgOn = [this.NOTE_ON + this.outputChannel, note.pitch, velocity];\n        const msgOff = [this.NOTE_OFF + this.outputChannel, note.pitch, velocity];\n        const outputs = this.outputs ? this.outputs : this.availableOutputs;\n        for (let i = 0; i < outputs.length; i++) {\n            this.sendMessageToOutput(outputs[i], msgOn);\n            this.sendMessageToOutput(outputs[i], msgOff, _core_compat_global__WEBPACK_IMPORTED_MODULE_1__.performance.now() + length);\n        }\n    }\n    sendMessageToOutput(output, message, time) {\n        if (output) {\n            output.send(message, time);\n        }\n    }\n    playNoteDown(note) {\n        const msgOn = [this.NOTE_ON, note.pitch, note.velocity];\n        const outputs = this.outputs ? this.outputs : this.availableOutputs;\n        for (let i = 0; i < outputs.length; i++) {\n            this.sendMessageToOutput(outputs[i], msgOn);\n        }\n    }\n    playNoteUp(note) {\n        const msgOff = [this.NOTE_OFF, note.pitch, note.velocity];\n        const outputs = this.outputs ? this.outputs : this.availableOutputs;\n        for (let i = 0; i < outputs.length; i++) {\n            this.sendMessageToOutput(outputs[i], msgOff, note.endTime - note.startTime);\n        }\n    }\n}\n//# sourceMappingURL=player.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/player.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/recorder.js":
/*!************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/recorder.js ***!
  \************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseRecorderCallback: () => (/* binding */ BaseRecorderCallback),\n/* harmony export */   Recorder: () => (/* binding */ Recorder)\n/* harmony export */ });\n/* harmony import */ var tone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tone */ \"(ssr)/./node_modules/.pnpm/tone@14.7.77/node_modules/tone/build/Tone.js\");\n/* harmony import */ var tone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tone__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _core_compat_global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/compat/global */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/compat/global.js\");\n/* harmony import */ var _protobuf_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../protobuf/index */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/protobuf/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/constants.js\");\n/* harmony import */ var _logging__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/logging.js\");\n\n\n\n\n\nclass BaseRecorderCallback {\n}\nclass Recorder {\n    constructor(config = {}, callbackObject) {\n        this.notes = [];\n        this.midiInputs = [];\n        this.loClick = new tone__WEBPACK_IMPORTED_MODULE_0__.MembraneSynth({\n            pitchDecay: 0.008,\n            envelope: { attack: 0.001, decay: 0.3, sustain: 0 },\n        })\n            .toDestination();\n        this.hiClick = new tone__WEBPACK_IMPORTED_MODULE_0__.MembraneSynth({\n            pitchDecay: 0.008,\n            envelope: { attack: 0.001, decay: 0.3, sustain: 0 },\n        })\n            .toDestination();\n        this.config = {\n            playClick: config.playClick,\n            qpm: config.qpm || _constants__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_QUARTERS_PER_MINUTE,\n            playCountIn: config.playCountIn,\n            startRecordingAtFirstNote: config.startRecordingAtFirstNote || false,\n        };\n        this.callbackObject = callbackObject;\n        this.recording = false;\n        this.onNotes = new Map();\n    }\n    async initialize() {\n        await navigator\n            .requestMIDIAccess()\n            .then((midi) => this.midiReady(midi), (err) => console.log('Something went wrong', err));\n    }\n    midiReady(midi) {\n        _logging__WEBPACK_IMPORTED_MODULE_4__.log('Initialized Recorder', 'Recorder');\n        const inputs = midi.inputs.values();\n        for (let input = inputs.next(); input && !input.done; input = inputs.next()) {\n            this.midiInputs.push(input.value);\n        }\n    }\n    isRecording() {\n        return this.recording;\n    }\n    setTempo(qpm) {\n        this.config.qpm = qpm;\n        if (tone__WEBPACK_IMPORTED_MODULE_0__.Transport.state === 'started') {\n            tone__WEBPACK_IMPORTED_MODULE_0__.Transport.bpm.value = qpm;\n        }\n    }\n    enablePlayClick(playClick) {\n        this.config.playClick = playClick;\n    }\n    enablePlayCountIn(countIn) {\n        this.config.playCountIn = countIn;\n    }\n    initClickLoop() {\n        let clickStep = 0;\n        this.clickLoop = new tone__WEBPACK_IMPORTED_MODULE_0__.Loop((time) => {\n            if (clickStep % 4 === 0) {\n                this.loClick.triggerAttack('G5', time);\n            }\n            else {\n                this.hiClick.triggerAttack('C6', time);\n            }\n            clickStep++;\n            if (this.config.playCountIn && clickStep === 4) {\n                tone__WEBPACK_IMPORTED_MODULE_0__.Transport.stop();\n                this.clickLoop.stop();\n            }\n        }, '4n');\n    }\n    getMIDIInputs() {\n        return this.midiInputs;\n    }\n    start(midiInputs) {\n        const list = midiInputs ? midiInputs : this.midiInputs;\n        for (const input of list) {\n            input.onmidimessage = (event) => {\n                this.midiMessageReceived(event);\n            };\n        }\n        if (this.config.playClick || this.config.playCountIn) {\n            this.initClickLoop();\n            tone__WEBPACK_IMPORTED_MODULE_0__.Transport.bpm.value = this.config.qpm;\n            tone__WEBPACK_IMPORTED_MODULE_0__.Transport.start();\n            this.clickLoop.start();\n        }\n        else {\n            this.clickLoop = null;\n        }\n        this.recording = true;\n        this.firstNoteTimestamp = undefined;\n        this.notes = [];\n        this.onNotes = new Map();\n        if (!this.startRecordingAtFirstNote) {\n            const timeStamp = Date.now();\n            this.firstNoteTimestamp = timeStamp;\n        }\n    }\n    stop() {\n        this.recording = false;\n        const timeStamp = Date.now();\n        this.onNotes.forEach((pitch, note) => {\n            this.noteOff(note, timeStamp);\n        });\n        for (const input of this.midiInputs) {\n            input.onmidimessage = null;\n        }\n        if (this.clickLoop) {\n            tone__WEBPACK_IMPORTED_MODULE_0__.Transport.stop();\n            this.clickLoop.stop();\n        }\n        if (this.notes.length === 0) {\n            return null;\n        }\n        return this.getNoteSequence();\n    }\n    getNoteSequence() {\n        if (this.notes.length === 0) {\n            return null;\n        }\n        return _protobuf_index__WEBPACK_IMPORTED_MODULE_2__.NoteSequence.create({\n            notes: this.notes,\n            totalTime: this.notes[this.notes.length - 1].endTime,\n        });\n    }\n    reset() {\n        const noteSequence = this.stop();\n        this.firstNoteTimestamp = undefined;\n        this.notes = [];\n        this.onNotes = new Map();\n        return noteSequence;\n    }\n    midiMessageReceived(event) {\n        if (!this.recording) {\n            return;\n        }\n        let timeStampOffset;\n        if (event.timeStamp !== undefined && event.timeStamp !== 0) {\n            timeStampOffset = event.timeStamp;\n        }\n        else {\n            timeStampOffset = _core_compat_global__WEBPACK_IMPORTED_MODULE_1__.performance.now();\n        }\n        const timeStamp = timeStampOffset + _core_compat_global__WEBPACK_IMPORTED_MODULE_1__.performance.timing.navigationStart;\n        if (this.firstNoteTimestamp === undefined) {\n            this.firstNoteTimestamp = timeStamp;\n        }\n        const NOTE_ON = 9;\n        const NOTE_OFF = 8;\n        const cmd = event.data[0] >> 4;\n        const pitch = event.data[1];\n        const velocity = event.data.length > 2 ? event.data[2] : 1;\n        const device = event.srcElement;\n        if (cmd === NOTE_OFF || (cmd === NOTE_ON && velocity === 0)) {\n            if (this.callbackObject && this.callbackObject.noteOff) {\n                this.callbackObject.noteOff(pitch, velocity, device);\n            }\n            this.noteOff(pitch, timeStamp);\n            if (this.callbackObject && this.callbackObject.run) {\n                this.callbackObject.run(this.getNoteSequence());\n            }\n        }\n        else if (cmd === NOTE_ON) {\n            if (this.callbackObject && this.callbackObject.noteOn) {\n                this.callbackObject.noteOn(pitch, velocity, device);\n            }\n            this.noteOn(pitch, velocity, timeStamp);\n        }\n    }\n    noteOn(pitch, velocity, timeStamp) {\n        const MILLIS_PER_SECOND = 1000;\n        const note = new _protobuf_index__WEBPACK_IMPORTED_MODULE_2__.NoteSequence.Note();\n        note.pitch = pitch;\n        note.startTime = (timeStamp - this.firstNoteTimestamp) / MILLIS_PER_SECOND;\n        note.velocity = velocity;\n        this.onNotes.set(pitch, note);\n    }\n    noteOff(pitch, timeStamp) {\n        const MILLIS_PER_SECOND = 1000;\n        const note = this.onNotes.get(pitch);\n        if (note) {\n            note.endTime = (timeStamp - this.firstNoteTimestamp) / MILLIS_PER_SECOND;\n            this.notes.push(note);\n        }\n        this.onNotes.delete(pitch);\n    }\n}\n//# sourceMappingURL=recorder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/recorder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/sequences.js":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/sequences.js ***!
  \*************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BadTimeSignatureException: () => (/* binding */ BadTimeSignatureException),\n/* harmony export */   MultipleTempoException: () => (/* binding */ MultipleTempoException),\n/* harmony export */   MultipleTimeSignatureException: () => (/* binding */ MultipleTimeSignatureException),\n/* harmony export */   NegativeTimeException: () => (/* binding */ NegativeTimeException),\n/* harmony export */   QuantizationStatusException: () => (/* binding */ QuantizationStatusException),\n/* harmony export */   applySustainControlChanges: () => (/* binding */ applySustainControlChanges),\n/* harmony export */   assertIsAbsoluteQuantizedSequence: () => (/* binding */ assertIsAbsoluteQuantizedSequence),\n/* harmony export */   assertIsQuantizedSequence: () => (/* binding */ assertIsQuantizedSequence),\n/* harmony export */   assertIsRelativeQuantizedSequence: () => (/* binding */ assertIsRelativeQuantizedSequence),\n/* harmony export */   clone: () => (/* binding */ clone),\n/* harmony export */   concatenate: () => (/* binding */ concatenate),\n/* harmony export */   createQuantizedNoteSequence: () => (/* binding */ createQuantizedNoteSequence),\n/* harmony export */   isAbsoluteQuantizedSequence: () => (/* binding */ isAbsoluteQuantizedSequence),\n/* harmony export */   isQuantizedSequence: () => (/* binding */ isQuantizedSequence),\n/* harmony export */   isRelativeQuantizedSequence: () => (/* binding */ isRelativeQuantizedSequence),\n/* harmony export */   mergeConsecutiveNotes: () => (/* binding */ mergeConsecutiveNotes),\n/* harmony export */   mergeInstruments: () => (/* binding */ mergeInstruments),\n/* harmony export */   quantizeNoteSequence: () => (/* binding */ quantizeNoteSequence),\n/* harmony export */   quantizeToStep: () => (/* binding */ quantizeToStep),\n/* harmony export */   replaceInstruments: () => (/* binding */ replaceInstruments),\n/* harmony export */   split: () => (/* binding */ split),\n/* harmony export */   stepsPerQuarterToStepsPerSecond: () => (/* binding */ stepsPerQuarterToStepsPerSecond),\n/* harmony export */   trim: () => (/* binding */ trim),\n/* harmony export */   unquantizeSequence: () => (/* binding */ unquantizeSequence)\n/* harmony export */ });\n/* harmony import */ var _protobuf_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../protobuf/index */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/protobuf/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/constants.js\");\n\n\nconst QUANTIZE_CUTOFF = 0.5;\nclass MultipleTimeSignatureException extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n}\nclass BadTimeSignatureException extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n}\nclass NegativeTimeException extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n}\nclass MultipleTempoException extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n}\nclass QuantizationStatusException extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n}\nfunction isPowerOf2(n) {\n    return n && (n & (n - 1)) === 0;\n}\nfunction clone(ns) {\n    return _protobuf_index__WEBPACK_IMPORTED_MODULE_0__.NoteSequence.decode(_protobuf_index__WEBPACK_IMPORTED_MODULE_0__.NoteSequence.encode(ns).finish());\n}\nfunction stepsPerQuarterToStepsPerSecond(stepsPerQuarter, qpm) {\n    return stepsPerQuarter * qpm / 60.0;\n}\nfunction quantizeToStep(unquantizedSeconds, stepsPerSecond, quantizeCutoff = QUANTIZE_CUTOFF) {\n    const unquantizedSteps = unquantizedSeconds * stepsPerSecond;\n    return Math.floor(unquantizedSteps + (1 - quantizeCutoff));\n}\nfunction getQuantizedTimeEvents(ns) {\n    return ns.controlChanges.concat(ns.textAnnotations);\n}\nfunction quantizeNotesAndEvents(ns, stepsPerSecond) {\n    for (const note of ns.notes) {\n        note.quantizedStartStep = quantizeToStep(note.startTime, stepsPerSecond);\n        note.quantizedEndStep = quantizeToStep(note.endTime, stepsPerSecond);\n        if (note.quantizedEndStep === note.quantizedStartStep) {\n            note.quantizedEndStep += 1;\n        }\n        if (note.quantizedStartStep < 0 || note.quantizedEndStep < 0) {\n            throw new NegativeTimeException(`Got negative note time: start_step = ` +\n                `${note.quantizedStartStep}, end_step = ` +\n                `${note.quantizedEndStep}`);\n        }\n        if (note.quantizedEndStep > ns.totalQuantizedSteps) {\n            ns.totalQuantizedSteps = note.quantizedEndStep;\n        }\n    }\n    getQuantizedTimeEvents(ns).forEach(event => {\n        event.quantizedStep = quantizeToStep(event.time, stepsPerSecond);\n        if (event.quantizedStep < 0) {\n            throw new NegativeTimeException(`Got negative event time: step = ${event.quantizedStep}`);\n        }\n    });\n}\nfunction assertSingleTempo(ns) {\n    if (!ns.tempos || ns.tempos.length === 0) {\n        return;\n    }\n    ns.tempos.sort((a, b) => a.time - b.time);\n    if (ns.tempos[0].time !== 0 &&\n        ns.tempos[0].qpm !== _constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_QUARTERS_PER_MINUTE) {\n        throw new MultipleTempoException('NoteSequence has an implicit tempo change from initial ' +\n            `${_constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_QUARTERS_PER_MINUTE} qpm to ` +\n            `${ns.tempos[0].qpm} qpm at ${ns.tempos[0].time} seconds.`);\n    }\n    for (let i = 1; i < ns.tempos.length; i++) {\n        if (ns.tempos[i].qpm !== ns.tempos[0].qpm) {\n            throw new MultipleTempoException('NoteSequence has at least one tempo change from ' +\n                `${ns.tempos[0].qpm} qpm to ${ns.tempos[i].qpm}` +\n                `qpm at ${ns.tempos[i].time} seconds.`);\n        }\n    }\n}\nfunction quantizeNoteSequence(ns, stepsPerQuarter) {\n    const qns = clone(ns);\n    qns.quantizationInfo =\n        _protobuf_index__WEBPACK_IMPORTED_MODULE_0__.NoteSequence.QuantizationInfo.create({ stepsPerQuarter });\n    if (qns.timeSignatures.length > 0) {\n        qns.timeSignatures.sort((a, b) => a.time - b.time);\n        if (qns.timeSignatures[0].time !== 0 &&\n            !(qns.timeSignatures[0].numerator === 4 &&\n                qns.timeSignatures[0].denominator === 4)) {\n            throw new MultipleTimeSignatureException('NoteSequence has an implicit change from initial 4/4 time ' +\n                `signature to ${qns.timeSignatures[0].numerator}/` +\n                `${qns.timeSignatures[0].denominator} at ` +\n                `${qns.timeSignatures[0].time} seconds.`);\n        }\n        for (let i = 1; i < qns.timeSignatures.length; i++) {\n            const timeSignature = qns.timeSignatures[i];\n            if (timeSignature.numerator !== qns.timeSignatures[0].numerator ||\n                timeSignature.denominator !== qns.timeSignatures[0].denominator) {\n                throw new MultipleTimeSignatureException('NoteSequence has at least one time signature change from ' +\n                    `${qns.timeSignatures[0].numerator}/` +\n                    `${qns.timeSignatures[0].denominator} to ` +\n                    `${timeSignature.numerator}/${timeSignature.denominator} ` +\n                    `at ${timeSignature.time} seconds`);\n            }\n        }\n        qns.timeSignatures[0].time = 0;\n        qns.timeSignatures = [qns.timeSignatures[0]];\n    }\n    else {\n        const timeSignature = _protobuf_index__WEBPACK_IMPORTED_MODULE_0__.NoteSequence.TimeSignature.create({ numerator: 4, denominator: 4, time: 0 });\n        qns.timeSignatures.push(timeSignature);\n    }\n    const firstTS = qns.timeSignatures[0];\n    if (!isPowerOf2(firstTS.denominator)) {\n        throw new BadTimeSignatureException('Denominator is not a power of 2. Time signature: ' +\n            `${firstTS.numerator}/${firstTS.denominator}`);\n    }\n    if (firstTS.numerator === 0) {\n        throw new BadTimeSignatureException('Numerator is 0. Time signature: ' +\n            `${firstTS.numerator}/${firstTS.denominator}`);\n    }\n    if (qns.tempos.length > 0) {\n        assertSingleTempo(qns);\n        qns.tempos[0].time = 0;\n        qns.tempos = [qns.tempos[0]];\n    }\n    else {\n        const tempo = _protobuf_index__WEBPACK_IMPORTED_MODULE_0__.NoteSequence.Tempo.create({ qpm: _constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_QUARTERS_PER_MINUTE, time: 0 });\n        qns.tempos.push(tempo);\n    }\n    const stepsPerSecond = stepsPerQuarterToStepsPerSecond(stepsPerQuarter, qns.tempos[0].qpm);\n    qns.totalQuantizedSteps = quantizeToStep(ns.totalTime, stepsPerSecond);\n    quantizeNotesAndEvents(qns, stepsPerSecond);\n    return qns;\n}\nfunction isQuantizedSequence(ns) {\n    return ns.quantizationInfo &&\n        (ns.quantizationInfo.stepsPerQuarter > 0 ||\n            ns.quantizationInfo.stepsPerSecond > 0);\n}\nfunction assertIsQuantizedSequence(ns) {\n    if (!isQuantizedSequence(ns)) {\n        throw new QuantizationStatusException(`NoteSequence ${ns.id} is not quantized (missing quantizationInfo)`);\n    }\n}\nfunction isRelativeQuantizedSequence(ns) {\n    return ns.quantizationInfo && ns.quantizationInfo.stepsPerQuarter > 0;\n}\nfunction assertIsRelativeQuantizedSequence(ns) {\n    if (!isRelativeQuantizedSequence(ns)) {\n        throw new QuantizationStatusException(`NoteSequence ${ns.id} is not quantized or is quantized based on absolute timing`);\n    }\n}\nfunction isAbsoluteQuantizedSequence(ns) {\n    return ns.quantizationInfo && ns.quantizationInfo.stepsPerSecond > 0;\n}\nfunction assertIsAbsoluteQuantizedSequence(ns) {\n    if (!isAbsoluteQuantizedSequence(ns)) {\n        throw new QuantizationStatusException(`NoteSequence ${ns.id} is not quantized or is quantized based on relative timing`);\n    }\n}\nfunction unquantizeSequence(qns, qpm) {\n    assertIsRelativeQuantizedSequence(qns);\n    assertSingleTempo(qns);\n    const ns = clone(qns);\n    if (qpm) {\n        if (ns.tempos && ns.tempos.length > 0) {\n            ns.tempos[0].qpm = qpm;\n        }\n        else {\n            ns.tempos.push(_protobuf_index__WEBPACK_IMPORTED_MODULE_0__.NoteSequence.Tempo.create({ time: 0, qpm }));\n        }\n    }\n    else {\n        qpm = (qns.tempos && qns.tempos.length > 0) ?\n            ns.tempos[0].qpm :\n            _constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_QUARTERS_PER_MINUTE;\n    }\n    const stepToSeconds = (step) => step / ns.quantizationInfo.stepsPerQuarter * (60 / qpm);\n    ns.totalTime = stepToSeconds(ns.totalQuantizedSteps);\n    ns.notes.forEach(n => {\n        n.startTime = stepToSeconds(n.quantizedStartStep);\n        n.endTime = stepToSeconds(n.quantizedEndStep);\n        ns.totalTime = Math.max(ns.totalTime, n.endTime);\n        delete n.quantizedStartStep;\n        delete n.quantizedEndStep;\n    });\n    getQuantizedTimeEvents(ns).forEach(event => {\n        event.time = stepToSeconds(event.time);\n    });\n    delete ns.totalQuantizedSteps;\n    delete ns.quantizationInfo;\n    return ns;\n}\nfunction createQuantizedNoteSequence(stepsPerQuarter = _constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_STEPS_PER_QUARTER, qpm = _constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_QUARTERS_PER_MINUTE) {\n    return _protobuf_index__WEBPACK_IMPORTED_MODULE_0__.NoteSequence.create({ quantizationInfo: { stepsPerQuarter }, tempos: [{ qpm }] });\n}\nfunction mergeInstruments(ns) {\n    const result = clone(ns);\n    const events = result.notes.concat(result.pitchBends).concat(result.controlChanges);\n    const programs = Array.from(new Set(events.filter(e => !e.isDrum).map(e => e.program)));\n    events.forEach(e => {\n        if (e.isDrum) {\n            e.program = 0;\n            e.instrument = programs.length;\n        }\n        else {\n            e.instrument = programs.indexOf(e.program);\n        }\n    });\n    return result;\n}\nfunction replaceInstruments(originalSequence, replaceSequence) {\n    const instrumentsInOriginal = new Set(originalSequence.notes.map(n => n.instrument));\n    const instrumentsInReplace = new Set(replaceSequence.notes.map(n => n.instrument));\n    const newNotes = [];\n    originalSequence.notes.forEach(n => {\n        if (!instrumentsInReplace.has(n.instrument)) {\n            newNotes.push(_protobuf_index__WEBPACK_IMPORTED_MODULE_0__.NoteSequence.Note.create(n));\n        }\n    });\n    replaceSequence.notes.forEach(n => {\n        if (instrumentsInOriginal.has(n.instrument)) {\n            newNotes.push(_protobuf_index__WEBPACK_IMPORTED_MODULE_0__.NoteSequence.Note.create(n));\n        }\n    });\n    const output = clone(originalSequence);\n    output.notes = newNotes.sort((a, b) => {\n        const voiceCompare = a.instrument - b.instrument;\n        if (voiceCompare) {\n            return voiceCompare;\n        }\n        return a.quantizedStartStep - b.quantizedStartStep;\n    });\n    return output;\n}\nfunction mergeConsecutiveNotes(sequence) {\n    assertIsQuantizedSequence(sequence);\n    const output = clone(sequence);\n    output.notes = [];\n    const newNotes = sequence.notes.sort((a, b) => {\n        const voiceCompare = a.instrument - b.instrument;\n        if (voiceCompare) {\n            return voiceCompare;\n        }\n        return a.quantizedStartStep - b.quantizedStartStep;\n    });\n    const note = new _protobuf_index__WEBPACK_IMPORTED_MODULE_0__.NoteSequence.Note();\n    note.pitch = newNotes[0].pitch;\n    note.instrument = newNotes[0].instrument;\n    note.quantizedStartStep = newNotes[0].quantizedStartStep;\n    note.quantizedEndStep = newNotes[0].quantizedEndStep;\n    output.notes.push(note);\n    let o = 0;\n    for (let i = 1; i < newNotes.length; i++) {\n        const thisNote = newNotes[i];\n        const previousNote = output.notes[o];\n        if (previousNote.instrument === thisNote.instrument &&\n            previousNote.pitch === thisNote.pitch &&\n            thisNote.quantizedStartStep === previousNote.quantizedEndStep &&\n            thisNote.quantizedStartStep % 16 !== 0) {\n            output.notes[o].quantizedEndStep +=\n                thisNote.quantizedEndStep - thisNote.quantizedStartStep;\n        }\n        else {\n            const note = new _protobuf_index__WEBPACK_IMPORTED_MODULE_0__.NoteSequence.Note();\n            note.pitch = newNotes[i].pitch;\n            note.instrument = newNotes[i].instrument;\n            note.quantizedStartStep = newNotes[i].quantizedStartStep;\n            note.quantizedEndStep = newNotes[i].quantizedEndStep;\n            output.notes.push(note);\n            o++;\n        }\n    }\n    return output;\n}\nfunction applySustainControlChanges(noteSequence, sustainControlNumber = 64) {\n    let MessageType;\n    (function (MessageType) {\n        MessageType[MessageType[\"SUSTAIN_ON\"] = 0] = \"SUSTAIN_ON\";\n        MessageType[MessageType[\"SUSTAIN_OFF\"] = 1] = \"SUSTAIN_OFF\";\n        MessageType[MessageType[\"NOTE_ON\"] = 2] = \"NOTE_ON\";\n        MessageType[MessageType[\"NOTE_OFF\"] = 3] = \"NOTE_OFF\";\n    })(MessageType || (MessageType = {}));\n    const isQuantized = isQuantizedSequence(noteSequence);\n    if (isQuantized) {\n        throw new Error('Can only apply sustain to unquantized NoteSequence.');\n    }\n    const sequence = clone(noteSequence);\n    const events = [];\n    for (const note of sequence.notes) {\n        if (note.isDrum === false) {\n            if (note.startTime !== null) {\n                events.push({\n                    time: note.startTime,\n                    type: MessageType.NOTE_ON,\n                    event: note\n                });\n            }\n            if (note.endTime !== null) {\n                events.push({\n                    time: note.endTime,\n                    type: MessageType.NOTE_OFF,\n                    event: note\n                });\n            }\n        }\n    }\n    for (const cc of sequence.controlChanges) {\n        if (cc.controlNumber === sustainControlNumber) {\n            const value = cc.controlValue;\n            if ((value < 0) || (value > 127)) {\n            }\n            if (value >= 64) {\n                events.push({\n                    time: cc.time,\n                    type: MessageType.SUSTAIN_ON,\n                    event: cc\n                });\n            }\n            else if (value < 64) {\n                events.push({\n                    time: cc.time,\n                    type: MessageType.SUSTAIN_OFF,\n                    event: cc\n                });\n            }\n        }\n    }\n    events.sort((a, b) => a.time - b.time);\n    const activeNotes = {};\n    const susActive = {};\n    let time = 0;\n    for (const item of events) {\n        time = item.time;\n        const type = item.type;\n        const event = item.event;\n        if (type === MessageType.SUSTAIN_ON) {\n            susActive[event.instrument] = true;\n        }\n        else if (type === MessageType.SUSTAIN_OFF) {\n            susActive[event.instrument] = false;\n            const newActiveNotes = [];\n            if (!(event.instrument in activeNotes)) {\n                activeNotes[event.instrument] = [];\n            }\n            for (const note of activeNotes[event.instrument]) {\n                if (note.endTime < time) {\n                    note.endTime = time;\n                    if (time > sequence.totalTime) {\n                        sequence.totalTime = time;\n                    }\n                }\n                else {\n                    newActiveNotes.push(note);\n                }\n            }\n            activeNotes[event.instrument] = newActiveNotes;\n        }\n        else if (type === MessageType.NOTE_ON) {\n            if (susActive[event.instrument] === true) {\n                const newActiveNotes = [];\n                if (!(event.instrument in activeNotes)) {\n                    activeNotes[event.instrument] = [];\n                }\n                for (const note of activeNotes[event.instrument]) {\n                    if (note.pitch === event.pitch) {\n                        note.endTime = time;\n                        if (note.startTime === note.endTime) {\n                            sequence.notes.push(note);\n                        }\n                    }\n                    else {\n                        newActiveNotes.push(note);\n                    }\n                }\n                activeNotes[event.instrument] = newActiveNotes;\n            }\n            if (!(event.instrument in activeNotes)) {\n                activeNotes[event.instrument] = [];\n            }\n            activeNotes[event.instrument].push(event);\n        }\n        else if (type === MessageType.NOTE_OFF) {\n            if (susActive[event.instrument] === true) {\n            }\n            else {\n                const index = activeNotes[event.instrument].indexOf(event);\n                if (index > -1) {\n                    activeNotes[event.instrument].splice(index, 1);\n                }\n            }\n        }\n    }\n    for (const instrument of Object.values(activeNotes)) {\n        for (const note of instrument) {\n            note.endTime = time;\n            sequence.totalTime = time;\n        }\n    }\n    return sequence;\n}\nfunction concatenate(concatenateSequences, sequenceDurations) {\n    if (sequenceDurations &&\n        sequenceDurations.length !== concatenateSequences.length) {\n        throw new Error(`Number of sequences to concatenate and their individual\n durations does not match.`);\n    }\n    if (isQuantizedSequence(concatenateSequences[0])) {\n        for (let i = 0; i < concatenateSequences.length; ++i) {\n            assertIsQuantizedSequence(concatenateSequences[i]);\n            if (concatenateSequences[i].quantizationInfo.stepsPerQuarter !==\n                concatenateSequences[0].quantizationInfo.stepsPerQuarter) {\n                throw new Error('Not all sequences have the same quantizationInfo');\n            }\n        }\n        return concatenateHelper(concatenateSequences, 'totalQuantizedSteps', 'quantizedStartStep', 'quantizedEndStep', sequenceDurations);\n    }\n    else {\n        return concatenateHelper(concatenateSequences, 'totalTime', 'startTime', 'endTime', sequenceDurations);\n    }\n}\nfunction trim(ns, start, end, truncateEndNotes) {\n    return isQuantizedSequence(ns) ?\n        trimHelper(ns, start, end, 'totalQuantizedSteps', 'quantizedStartStep', 'quantizedEndStep', truncateEndNotes) :\n        trimHelper(ns, start, end, 'totalTime', 'startTime', 'endTime', truncateEndNotes);\n}\nfunction concatenateHelper(seqs, totalKey, startKey, endKey, sequenceDurations) {\n    let concatSeq;\n    let totalDuration = 0;\n    for (let i = 0; i < seqs.length; ++i) {\n        const seqDuration = sequenceDurations ? sequenceDurations[i] : seqs[i][totalKey];\n        if (seqDuration === 0) {\n            throw Error(`Sequence ${seqs[i].id} has no ${totalKey}, and no individual duration was provided.`);\n        }\n        if (i === 0) {\n            concatSeq = clone(seqs[0]);\n        }\n        else {\n            Array.prototype.push.apply(concatSeq.notes, seqs[i].notes.map(n => {\n                const newN = _protobuf_index__WEBPACK_IMPORTED_MODULE_0__.NoteSequence.Note.create(n);\n                newN[startKey] += totalDuration;\n                newN[endKey] += totalDuration;\n                return newN;\n            }));\n        }\n        totalDuration += seqDuration;\n    }\n    concatSeq[totalKey] = totalDuration;\n    return concatSeq;\n}\nfunction trimHelper(ns, start, end, totalKey, startKey, endKey, truncateEndNotes) {\n    const result = clone(ns);\n    result[totalKey] = end;\n    result.notes = result.notes.filter(n => n[startKey] >= start && n[startKey] <= end &&\n        (truncateEndNotes || n[endKey] <= end));\n    result[totalKey] -= start;\n    for (let i = 0; i < result.notes.length; i++) {\n        result.notes[i][startKey] -= start;\n        result.notes[i][endKey] -= start;\n        if (truncateEndNotes) {\n            result.notes[i][endKey] = Math.min(result.notes[i][endKey], result[totalKey]);\n        }\n    }\n    return result;\n}\nfunction split(seq, chunkSize) {\n    assertIsQuantizedSequence(seq);\n    const ns = clone(seq);\n    const notesBystartStep = ns.notes.sort((a, b) => a.quantizedStartStep - b.quantizedStartStep);\n    const chunks = [];\n    let startStep = 0;\n    let currentNotes = [];\n    for (let i = 0; i < notesBystartStep.length; i++) {\n        const note = notesBystartStep[i];\n        const originalStartStep = note.quantizedStartStep;\n        const originalEndStep = note.quantizedEndStep;\n        note.quantizedStartStep -= startStep;\n        note.quantizedEndStep -= startStep;\n        if (note.quantizedStartStep < 0) {\n            continue;\n        }\n        if (note.quantizedEndStep <= chunkSize) {\n            currentNotes.push(note);\n        }\n        else {\n            if (note.quantizedStartStep < chunkSize) {\n                const newNote = _protobuf_index__WEBPACK_IMPORTED_MODULE_0__.NoteSequence.Note.create(note);\n                newNote.quantizedEndStep = chunkSize;\n                newNote.startTime = newNote.endTime = undefined;\n                currentNotes.push(newNote);\n                note.quantizedStartStep = startStep + chunkSize;\n                note.quantizedEndStep = originalEndStep;\n            }\n            else {\n                note.quantizedStartStep = originalStartStep;\n                note.quantizedEndStep = originalEndStep;\n            }\n            if (note.quantizedEndStep > chunkSize ||\n                note.quantizedStartStep > chunkSize) {\n                i = i - 1;\n            }\n            if (currentNotes.length !== 0) {\n                const newSequence = clone(ns);\n                newSequence.notes = currentNotes;\n                newSequence.totalQuantizedSteps = chunkSize;\n                chunks.push(newSequence);\n            }\n            currentNotes = [];\n            startStep += chunkSize;\n        }\n    }\n    if (currentNotes.length !== 0) {\n        const newSequence = clone(ns);\n        newSequence.notes = currentNotes;\n        newSequence.totalQuantizedSteps = chunkSize;\n        chunks.push(newSequence);\n    }\n    return chunks;\n}\n//# sourceMappingURL=sequences.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/sequences.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/soundfont.js":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/soundfont.js ***!
  \*************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Instrument: () => (/* binding */ Instrument),\n/* harmony export */   SoundFont: () => (/* binding */ SoundFont)\n/* harmony export */ });\n/* harmony import */ var tone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tone */ \"(ssr)/./node_modules/.pnpm/tone@14.7.77/node_modules/tone/build/Tone.js\");\n/* harmony import */ var tone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tone__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _core_compat_global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/compat/global */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/compat/global.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/constants.js\");\n/* harmony import */ var _logging__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/logging.js\");\n\n\n\n\nclass Instrument {\n    constructor(baseURL) {\n        this.FADE_SECONDS = 0.1;\n        this.baseURL = baseURL;\n        this.buffers = new tone__WEBPACK_IMPORTED_MODULE_0__.ToneAudioBuffers();\n        this.sourceMap = new Map();\n        this.initialized = false;\n    }\n    async initialize() {\n        await (0,_core_compat_global__WEBPACK_IMPORTED_MODULE_1__.fetch)(`${this.baseURL}/instrument.json`)\n            .then((response) => response.json())\n            .then((spec) => {\n            this.name = spec.name;\n            this.minPitch = spec.minPitch;\n            this.maxPitch = spec.maxPitch;\n            this.durationSeconds = spec.durationSeconds;\n            this.releaseSeconds = spec.releaseSeconds;\n            this.percussive = spec.percussive;\n            this.velocities = spec.velocities;\n            this.initialized = true;\n        });\n    }\n    sampleInfoToName(sampleInfo) {\n        if (this.velocities) {\n            return `p${sampleInfo.pitch}_v${sampleInfo.velocity}`;\n        }\n        else {\n            return `p${sampleInfo.pitch}`;\n        }\n    }\n    sampleNameToURL(name) {\n        return `${this.baseURL}/${name}.mp3`;\n    }\n    nearestVelocity(velocity) {\n        if (!this.velocities) {\n            return velocity;\n        }\n        if (!velocity) {\n            velocity = _constants__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_VELOCITY;\n        }\n        let bestVelocity = undefined;\n        let bestDistance = _constants__WEBPACK_IMPORTED_MODULE_2__.MIDI_VELOCITIES;\n        this.velocities.forEach((v) => {\n            const d = Math.abs(v - velocity);\n            if (d < bestDistance) {\n                bestVelocity = v;\n                bestDistance = d;\n            }\n        });\n        return bestVelocity;\n    }\n    async loadSamples(samples) {\n        if (!this.initialized) {\n            await this.initialize();\n        }\n        const nearestSampleNames = samples\n            .filter((info) => {\n            if (info.pitch < this.minPitch || info.pitch > this.maxPitch) {\n                _logging__WEBPACK_IMPORTED_MODULE_3__.log(`Pitch ${info.pitch} is outside the valid range for ${this.name}, ignoring.`, 'SoundFont');\n                return false;\n            }\n            else {\n                return true;\n            }\n        })\n            .map((info) => this.sampleInfoToName({\n            pitch: info.pitch,\n            velocity: this.nearestVelocity(info.velocity)\n        }));\n        const uniqueSampleNames = Array.from(new Set(nearestSampleNames))\n            .filter((name) => !this.buffers.has(name));\n        const sampleNamesAndURLs = uniqueSampleNames.map((name) => ({ name, url: this.sampleNameToURL(name) }));\n        if (sampleNamesAndURLs.length > 0) {\n            sampleNamesAndURLs.forEach((nameAndURL) => this.buffers.add(nameAndURL.name, nameAndURL.url));\n            await tone__WEBPACK_IMPORTED_MODULE_0__.loaded();\n            _logging__WEBPACK_IMPORTED_MODULE_3__.log(`Loaded samples for ${this.name}.`, 'SoundFont');\n        }\n    }\n    playNote(pitch, velocity, startTime, duration, output) {\n        const buffer = this.getBuffer(pitch, velocity);\n        if (!buffer) {\n            return;\n        }\n        if (duration > this.durationSeconds) {\n            _logging__WEBPACK_IMPORTED_MODULE_3__.log(`Requested note duration longer than sample duration: ${duration} > ${this.durationSeconds}`, 'SoundFont');\n        }\n        const source = new tone__WEBPACK_IMPORTED_MODULE_0__.ToneBufferSource({\n            url: buffer,\n            fadeOut: this.FADE_SECONDS,\n        })\n            .connect(output);\n        source.start(startTime, 0, undefined, 1);\n        if (!this.percussive && duration < this.durationSeconds) {\n            const releaseSource = new tone__WEBPACK_IMPORTED_MODULE_0__.ToneBufferSource({\n                url: buffer,\n                fadeOut: this.FADE_SECONDS,\n            })\n                .connect(output);\n            source.stop(startTime + duration + this.FADE_SECONDS);\n            releaseSource.start(startTime + duration, this.durationSeconds, undefined, 1);\n        }\n    }\n    playNoteDown(pitch, velocity, output) {\n        const buffer = this.getBuffer(pitch, velocity);\n        if (!buffer) {\n            return;\n        }\n        const source = new tone__WEBPACK_IMPORTED_MODULE_0__.ToneBufferSource(buffer).connect(output);\n        source.start(0, 0, undefined, 1);\n        if (this.sourceMap.has(pitch)) {\n            this.sourceMap.get(pitch).stop(tone__WEBPACK_IMPORTED_MODULE_0__.now() + this.FADE_SECONDS, this.FADE_SECONDS);\n        }\n        this.sourceMap.set(pitch, source);\n    }\n    playNoteUp(pitch, velocity, output) {\n        if (!this.sourceMap.has(pitch)) {\n            return;\n        }\n        const buffer = this.getBuffer(pitch, velocity);\n        if (!buffer) {\n            return;\n        }\n        const releaseSource = new tone__WEBPACK_IMPORTED_MODULE_0__.ToneBufferSource({\n            url: buffer,\n            fadeOut: this.FADE_SECONDS,\n        })\n            .connect(output);\n        releaseSource.start(0, this.durationSeconds, undefined, 1);\n        this.sourceMap.get(pitch).stop(tone__WEBPACK_IMPORTED_MODULE_0__.now() + this.FADE_SECONDS, this.FADE_SECONDS);\n        this.sourceMap.delete(pitch);\n    }\n    getBuffer(pitch, velocity) {\n        if (!this.initialized) {\n            throw new Error('Instrument is not initialized.');\n        }\n        if (pitch < this.minPitch || pitch > this.maxPitch) {\n            _logging__WEBPACK_IMPORTED_MODULE_3__.log(`Pitch ${pitch} is outside the valid range for ${this.name} (${this.minPitch}-${this.maxPitch})`, 'SoundFont');\n            return;\n        }\n        const name = this.sampleInfoToName({ pitch, velocity: this.nearestVelocity(velocity) });\n        if (!this.buffers.has(name)) {\n            throw new Error(`Buffer not found for ${this.name}: ${name}`);\n        }\n        const buffer = this.buffers.get(name);\n        if (!buffer.loaded) {\n            throw new Error(`Buffer not loaded for ${this.name}: ${name}`);\n        }\n        return buffer;\n    }\n}\nclass SoundFont {\n    constructor(baseURL) {\n        this.baseURL = baseURL;\n        this.instruments = new Map();\n        this.initialized = false;\n    }\n    async initialize() {\n        await (0,_core_compat_global__WEBPACK_IMPORTED_MODULE_1__.fetch)(`${this.baseURL}/soundfont.json`)\n            .then((response) => response.json())\n            .then((spec) => {\n            this.name = spec.name;\n            for (const program in spec.instruments) {\n                const url = `${this.baseURL}/${spec.instruments[program]}`;\n                this.instruments.set(program === 'drums' ? 'drums' : +program, new Instrument(url));\n            }\n            this.initialized = true;\n        });\n    }\n    async loadSamples(samples) {\n        if (!this.initialized) {\n            await this.initialize();\n        }\n        const instrumentSamples = new Map();\n        samples.forEach((info) => {\n            info.isDrum = info.isDrum || false;\n            info.program = info.program || 0;\n            const instrument = info.isDrum ? 'drums' : info.program;\n            const sampleInfo = { pitch: info.pitch, velocity: info.velocity };\n            if (!instrumentSamples.has(instrument)) {\n                if (!this.instruments.has(instrument)) {\n                    _logging__WEBPACK_IMPORTED_MODULE_3__.log(`No instrument in ${this.name} for: program=${info.program}, isDrum=${info.isDrum}`, 'SoundFont');\n                }\n                else {\n                    instrumentSamples.set(instrument, [sampleInfo]);\n                }\n            }\n            else {\n                instrumentSamples.get(instrument).push(sampleInfo);\n            }\n        });\n        await Promise.all(Array.from(instrumentSamples.keys())\n            .map((info) => this.instruments.get(info).loadSamples(instrumentSamples.get(info))));\n    }\n    playNote(pitch, velocity, startTime, duration, program = 0, isDrum = false, output) {\n        const instrument = isDrum ? 'drums' : program;\n        if (!this.initialized) {\n            throw new Error('SoundFont is not initialized.');\n        }\n        if (!this.instruments.has(instrument)) {\n            _logging__WEBPACK_IMPORTED_MODULE_3__.log(`No instrument in ${this.name} for: program=${program}, isDrum=${isDrum}`, 'SoundFont');\n            return;\n        }\n        this.instruments.get(instrument)\n            .playNote(pitch, velocity, startTime, duration, output);\n    }\n    playNoteDown(pitch, velocity, program = 0, isDrum = false, output) {\n        const instrument = isDrum ? 'drums' : program;\n        if (!this.initialized) {\n            throw new Error('SoundFont is not initialized.');\n        }\n        if (!this.instruments.has(instrument)) {\n            _logging__WEBPACK_IMPORTED_MODULE_3__.log(`No instrument in ${this.name} for: program=${program}, isDrum=${isDrum}`, 'SoundFont');\n            return;\n        }\n        this.instruments.get(instrument).playNoteDown(pitch, velocity, output);\n    }\n    playNoteUp(pitch, velocity, program = 0, isDrum = false, output) {\n        const instrument = isDrum ? 'drums' : program;\n        if (!this.initialized) {\n            throw new Error('SoundFont is not initialized.');\n        }\n        if (!this.instruments.has(instrument)) {\n            _logging__WEBPACK_IMPORTED_MODULE_3__.log(`No instrument in ${this.name} for: program=${program}, isDrum=${isDrum}`, 'SoundFont');\n            return;\n        }\n        this.instruments.get(instrument).playNoteUp(pitch, velocity, output);\n    }\n}\n//# sourceMappingURL=soundfont.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/soundfont.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/visualizer.js":
/*!**************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/visualizer.js ***!
  \**************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseSVGVisualizer: () => (/* binding */ BaseSVGVisualizer),\n/* harmony export */   BaseVisualizer: () => (/* binding */ BaseVisualizer),\n/* harmony export */   PianoRollCanvasVisualizer: () => (/* binding */ PianoRollCanvasVisualizer),\n/* harmony export */   PianoRollSVGVisualizer: () => (/* binding */ PianoRollSVGVisualizer),\n/* harmony export */   ScrollType: () => (/* binding */ ScrollType),\n/* harmony export */   StaffSVGVisualizer: () => (/* binding */ StaffSVGVisualizer),\n/* harmony export */   Visualizer: () => (/* binding */ Visualizer),\n/* harmony export */   WaterfallSVGVisualizer: () => (/* binding */ WaterfallSVGVisualizer)\n/* harmony export */ });\n/* harmony import */ var staffrender__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! staffrender */ \"(ssr)/./node_modules/.pnpm/staffrender@0.2.1/node_modules/staffrender/node/index.js\");\n/* harmony import */ var staffrender__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(staffrender__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/constants.js\");\n/* harmony import */ var _logging__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/logging.js\");\n/* harmony import */ var _sequences__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sequences */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/sequences.js\");\n\n\n\n\nconst MIN_NOTE_LENGTH = 1;\nclass BaseVisualizer {\n    constructor(sequence, config = {}) {\n        const isQuantized = _sequences__WEBPACK_IMPORTED_MODULE_3__.isQuantizedSequence(sequence);\n        const qpm = (sequence.tempos && sequence.tempos.length > 0) ?\n            sequence.tempos[0].qpm : undefined;\n        this.noteSequence = isQuantized ?\n            _sequences__WEBPACK_IMPORTED_MODULE_3__.unquantizeSequence(sequence, qpm) : sequence;\n        const defaultPixelsPerTimeStep = 30;\n        this.config = {\n            noteHeight: config.noteHeight || 6,\n            noteSpacing: config.noteSpacing || 1,\n            pixelsPerTimeStep: config.pixelsPerTimeStep || defaultPixelsPerTimeStep,\n            noteRGB: config.noteRGB || '8, 41, 64',\n            activeNoteRGB: config.activeNoteRGB || '240, 84, 119',\n            minPitch: config.minPitch,\n            maxPitch: config.maxPitch,\n        };\n        const size = this.getSize();\n        this.width = size.width;\n        this.height = size.height;\n    }\n    updateMinMaxPitches(noExtraPadding = false) {\n        if (this.config.minPitch && this.config.maxPitch) {\n            return;\n        }\n        if (this.config.minPitch === undefined) {\n            this.config.minPitch = _constants__WEBPACK_IMPORTED_MODULE_1__.MAX_MIDI_PITCH;\n        }\n        if (this.config.maxPitch === undefined) {\n            this.config.maxPitch = _constants__WEBPACK_IMPORTED_MODULE_1__.MIN_MIDI_PITCH;\n        }\n        for (const note of this.noteSequence.notes) {\n            this.config.minPitch = Math.min(note.pitch, this.config.minPitch);\n            this.config.maxPitch = Math.max(note.pitch, this.config.maxPitch);\n        }\n        if (!noExtraPadding) {\n            this.config.minPitch -= 2;\n            this.config.maxPitch += 2;\n        }\n    }\n    getSize() {\n        this.updateMinMaxPitches();\n        const height = (this.config.maxPitch - this.config.minPitch) * this.config.noteHeight;\n        const endTime = this.noteSequence.totalTime;\n        if (!endTime) {\n            throw new Error('The sequence you are using with the visualizer does not have a ' +\n                'totalQuantizedSteps or totalTime ' +\n                'field set, so the visualizer can\\'t be horizontally ' +\n                'sized correctly.');\n        }\n        const width = (endTime * this.config.pixelsPerTimeStep);\n        return { width, height };\n    }\n    getNotePosition(note, noteIndex) {\n        const duration = this.getNoteEndTime(note) - this.getNoteStartTime(note);\n        const x = (this.getNoteStartTime(note) * this.config.pixelsPerTimeStep);\n        const w = Math.max(this.config.pixelsPerTimeStep * duration - this.config.noteSpacing, MIN_NOTE_LENGTH);\n        const y = this.height -\n            ((note.pitch - this.config.minPitch) * this.config.noteHeight);\n        return { x, y, w, h: this.config.noteHeight };\n    }\n    scrollIntoViewIfNeeded(scrollIntoView, activeNotePosition) {\n        if (scrollIntoView && this.parentElement) {\n            const containerWidth = this.parentElement.getBoundingClientRect().width;\n            if (activeNotePosition >\n                (this.parentElement.scrollLeft + containerWidth)) {\n                this.parentElement.scrollLeft = activeNotePosition - 20;\n            }\n        }\n    }\n    getNoteStartTime(note) {\n        return Math.round(note.startTime * 100000000) / 100000000;\n    }\n    getNoteEndTime(note) {\n        return Math.round(note.endTime * 100000000) / 100000000;\n    }\n    isPaintingActiveNote(note, playedNote) {\n        const isPlayedNote = this.getNoteStartTime(note) === this.getNoteStartTime(playedNote);\n        const heldDownDuringPlayedNote = this.getNoteStartTime(note) <= this.getNoteStartTime(playedNote) &&\n            this.getNoteEndTime(note) >= this.getNoteEndTime(playedNote);\n        return isPlayedNote || heldDownDuringPlayedNote;\n    }\n}\nclass PianoRollCanvasVisualizer extends BaseVisualizer {\n    constructor(sequence, canvas, config = {}) {\n        super(sequence, config);\n        this.ctx = canvas.getContext('2d');\n        this.parentElement = canvas.parentElement;\n        const dpr = window.devicePixelRatio || 1;\n        if (this.ctx) {\n            this.ctx.canvas.width = dpr * this.width;\n            this.ctx.canvas.height = dpr * this.height;\n            canvas.style.width = `${this.width}px`;\n            canvas.style.height = `${this.height}px`;\n            this.ctx.scale(dpr, dpr);\n        }\n        this.redraw();\n    }\n    redraw(activeNote, scrollIntoView) {\n        this.clear();\n        let activeNotePosition;\n        for (let i = 0; i < this.noteSequence.notes.length; i++) {\n            const note = this.noteSequence.notes[i];\n            const size = this.getNotePosition(note, i);\n            const opacityBaseline = 0.2;\n            const opacity = note.velocity ? note.velocity / 100 + opacityBaseline : 1;\n            const isActive = activeNote && this.isPaintingActiveNote(note, activeNote);\n            const fill = `rgba(${isActive ? this.config.activeNoteRGB : this.config.noteRGB},\n  ${opacity})`;\n            this.redrawNote(size.x, size.y, size.w, size.h, fill);\n            if (isActive && note === activeNote) {\n                activeNotePosition = size.x;\n            }\n        }\n        this.scrollIntoViewIfNeeded(scrollIntoView, activeNotePosition);\n        return activeNotePosition;\n    }\n    clear() {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    }\n    clearActiveNotes() {\n        this.redraw();\n    }\n    redrawNote(x, y, w, h, fill) {\n        this.ctx.fillStyle = fill;\n        this.ctx.fillRect(Math.round(x), Math.round(y), Math.round(w), Math.round(h));\n    }\n}\nclass Visualizer extends PianoRollCanvasVisualizer {\n    constructor(sequence, canvas, config = {}) {\n        super(sequence, canvas, config);\n        _logging__WEBPACK_IMPORTED_MODULE_2__.log('mm.Visualizer is deprecated, and will be removed in a future \\\n         version. Please use mm.PianoRollCanvasVisualizer instead', 'mm.Visualizer', 5);\n    }\n}\nclass BaseSVGVisualizer extends BaseVisualizer {\n    constructor(sequence, config = {}) {\n        super(sequence, config);\n        this.drawn = false;\n    }\n    redraw(activeNote, scrollIntoView) {\n        if (!this.drawn) {\n            this.draw();\n        }\n        if (!activeNote) {\n            return null;\n        }\n        this.unfillActiveRect(this.svg);\n        let activeNotePosition;\n        for (let i = 0; i < this.noteSequence.notes.length; i++) {\n            const note = this.noteSequence.notes[i];\n            const isActive = activeNote && this.isPaintingActiveNote(note, activeNote);\n            if (!isActive) {\n                continue;\n            }\n            const el = this.svg.querySelector(`rect[data-index=\"${i}\"]`);\n            this.fillActiveRect(el, note);\n            if (note === activeNote) {\n                activeNotePosition = parseFloat(el.getAttribute('x'));\n            }\n        }\n        this.scrollIntoViewIfNeeded(scrollIntoView, activeNotePosition);\n        return activeNotePosition;\n    }\n    fillActiveRect(el, note) {\n        el.setAttribute('fill', this.getNoteFillColor(note, true));\n        el.classList.add('active');\n    }\n    unfillActiveRect(svg) {\n        const els = svg.querySelectorAll('rect.active');\n        for (let i = 0; i < els.length; ++i) {\n            const el = els[i];\n            const fill = this.getNoteFillColor(this.noteSequence.notes[parseInt(el.getAttribute('data-index'), 10)], false);\n            el.setAttribute('fill', fill);\n            el.classList.remove('active');\n        }\n    }\n    draw() {\n        for (let i = 0; i < this.noteSequence.notes.length; i++) {\n            const note = this.noteSequence.notes[i];\n            const size = this.getNotePosition(note, i);\n            const fill = this.getNoteFillColor(note, false);\n            const dataAttributes = [\n                ['index', i],\n                ['instrument', note.instrument],\n                ['program', note.program],\n                ['isDrum', note.isDrum === true],\n                ['pitch', note.pitch],\n            ];\n            const cssProperties = [\n                ['--midi-velocity',\n                    String(note.velocity !== undefined ? note.velocity : 127)]\n            ];\n            this.drawNote(size.x, size.y, size.w, size.h, fill, dataAttributes, cssProperties);\n        }\n        this.drawn = true;\n    }\n    getNoteFillColor(note, isActive) {\n        const opacityBaseline = 0.2;\n        const opacity = note.velocity ? note.velocity / 100 + opacityBaseline : 1;\n        const fill = `rgba(${isActive ? this.config.activeNoteRGB : this.config.noteRGB},\n  ${opacity})`;\n        return fill;\n    }\n    drawNote(x, y, w, h, fill, dataAttributes, cssProperties) {\n        if (!this.svg) {\n            return;\n        }\n        const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n        rect.classList.add('note');\n        rect.setAttribute('fill', fill);\n        rect.setAttribute('x', `${Math.round(x)}`);\n        rect.setAttribute('y', `${Math.round(y)}`);\n        rect.setAttribute('width', `${Math.round(w)}`);\n        rect.setAttribute('height', `${Math.round(h)}`);\n        dataAttributes.forEach(([key, value]) => {\n            if (value !== undefined) {\n                rect.dataset[key] = `${value}`;\n            }\n        });\n        cssProperties.forEach(([key, value]) => {\n            rect.style.setProperty(key, value);\n        });\n        this.svg.appendChild(rect);\n    }\n    clear() {\n        this.svg.innerHTML = '';\n        this.drawn = false;\n    }\n    clearActiveNotes() {\n        this.unfillActiveRect(this.svg);\n    }\n}\nclass PianoRollSVGVisualizer extends BaseSVGVisualizer {\n    constructor(sequence, svg, config = {}) {\n        super(sequence, config);\n        if (!(svg instanceof SVGSVGElement)) {\n            throw new Error('This visualizer requires an <svg> element to display the visualization');\n        }\n        this.svg = svg;\n        this.parentElement = svg.parentElement;\n        const size = this.getSize();\n        this.width = size.width;\n        this.height = size.height;\n        this.svg.style.width = `${this.width}px`;\n        this.svg.style.height = `${this.height}px`;\n        this.clear();\n        this.draw();\n    }\n}\nclass WaterfallSVGVisualizer extends BaseSVGVisualizer {\n    constructor(sequence, parentElement, config = {}) {\n        super(sequence, config);\n        this.NOTES_PER_OCTAVE = 12;\n        this.WHITE_NOTES_PER_OCTAVE = 7;\n        this.LOW_C = 24;\n        this.firstDrawnOctave = 0;\n        this.lastDrawnOctave = 6;\n        if (!(parentElement instanceof HTMLDivElement)) {\n            throw new Error('This visualizer requires a <div> element to display the visualization');\n        }\n        this.config.whiteNoteWidth = config.whiteNoteWidth || 20;\n        this.config.blackNoteWidth =\n            config.blackNoteWidth || this.config.whiteNoteWidth * 2 / 3;\n        this.config.whiteNoteHeight = config.whiteNoteHeight || 70;\n        this.config.blackNoteHeight = config.blackNoteHeight || (2 * 70 / 3);\n        this.config.showOnlyOctavesUsed = config.showOnlyOctavesUsed;\n        this.setupDOM(parentElement);\n        const size = this.getSize();\n        this.width = size.width;\n        this.height = size.height;\n        this.svg.style.width = `${this.width}px`;\n        this.svg.style.height = `${this.height}px`;\n        this.svgPiano.style.width = `${this.width}px`;\n        this.svgPiano.style.height = `${this.config.whiteNoteHeight}px`;\n        this.parentElement.style.width =\n            `${this.width + this.config.whiteNoteWidth}px`;\n        this.parentElement.scrollTop = this.parentElement.scrollHeight;\n        this.clear();\n        this.drawPiano();\n        this.draw();\n    }\n    setupDOM(container) {\n        this.parentElement = document.createElement('div');\n        this.parentElement.classList.add('waterfall-notes-container');\n        const height = Math.max(container.getBoundingClientRect().height, 200);\n        this.parentElement.style.paddingTop =\n            `${height - this.config.whiteNoteHeight}px`;\n        this.parentElement.style.height =\n            `${height - this.config.whiteNoteHeight}px`;\n        this.parentElement.style.boxSizing = 'border-box';\n        this.parentElement.style.overflowX = 'hidden';\n        this.parentElement.style.overflowY = 'auto';\n        this.svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        this.svgPiano =\n            document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        this.svg.classList.add('waterfall-notes');\n        this.svgPiano.classList.add('waterfall-piano');\n        this.parentElement.appendChild(this.svg);\n        container.innerHTML = '';\n        container.appendChild(this.parentElement);\n        container.appendChild(this.svgPiano);\n    }\n    redraw(activeNote, scrollIntoView) {\n        if (!this.drawn) {\n            this.draw();\n        }\n        if (!activeNote) {\n            return null;\n        }\n        this.clearActiveNotes();\n        this.parentElement.style.paddingTop = this.parentElement.style.height;\n        for (let i = 0; i < this.noteSequence.notes.length; i++) {\n            const note = this.noteSequence.notes[i];\n            const isActive = activeNote && this.isPaintingActiveNote(note, activeNote);\n            if (!isActive) {\n                continue;\n            }\n            const el = this.svg.querySelector(`rect[data-index=\"${i}\"]`);\n            this.fillActiveRect(el, note);\n            const key = this.svgPiano.querySelector(`rect[data-pitch=\"${note.pitch}\"]`);\n            this.fillActiveRect(key, note);\n            if (note === activeNote) {\n                const y = parseFloat(el.getAttribute('y'));\n                const height = parseFloat(el.getAttribute('height'));\n                if (y < (this.parentElement.scrollTop - height)) {\n                    this.parentElement.scrollTop = y + height;\n                }\n                return y;\n            }\n        }\n        return null;\n    }\n    getSize() {\n        this.updateMinMaxPitches(true);\n        let whiteNotesDrawn = 52;\n        if (this.config.showOnlyOctavesUsed) {\n            let foundFirst = false, foundLast = false;\n            for (let i = 1; i < 7; i++) {\n                const c = this.LOW_C + this.NOTES_PER_OCTAVE * i;\n                if (!foundFirst && c > this.config.minPitch) {\n                    this.firstDrawnOctave = i - 1;\n                    foundFirst = true;\n                }\n                if (!foundLast && c > this.config.maxPitch) {\n                    this.lastDrawnOctave = i - 1;\n                    foundLast = true;\n                }\n            }\n            whiteNotesDrawn = (this.lastDrawnOctave - this.firstDrawnOctave + 1) *\n                this.WHITE_NOTES_PER_OCTAVE;\n        }\n        const width = whiteNotesDrawn * this.config.whiteNoteWidth;\n        const endTime = this.noteSequence.totalTime;\n        if (!endTime) {\n            throw new Error('The sequence you are using with the visualizer does not have a ' +\n                'totalQuantizedSteps or totalTime ' +\n                'field set, so the visualizer can\\'t be horizontally ' +\n                'sized correctly.');\n        }\n        const height = Math.max(endTime * this.config.pixelsPerTimeStep, MIN_NOTE_LENGTH);\n        return { width, height };\n    }\n    getNotePosition(note, noteIndex) {\n        const rect = this.svgPiano.querySelector(`rect[data-pitch=\"${note.pitch}\"]`);\n        if (!rect) {\n            return null;\n        }\n        const len = this.getNoteEndTime(note) - this.getNoteStartTime(note);\n        const x = Number(rect.getAttribute('x'));\n        const w = Number(rect.getAttribute('width'));\n        const h = Math.max(this.config.pixelsPerTimeStep * len - this.config.noteSpacing, MIN_NOTE_LENGTH);\n        const y = this.height -\n            (this.getNoteStartTime(note) * this.config.pixelsPerTimeStep) - h;\n        return { x, y, w, h };\n    }\n    drawPiano() {\n        this.svgPiano.innerHTML = '';\n        const blackNoteOffset = this.config.whiteNoteWidth - this.config.blackNoteWidth / 2;\n        const blackNoteIndexes = [1, 3, 6, 8, 10];\n        let x = 0;\n        let currentPitch = 0;\n        if (this.config.showOnlyOctavesUsed) {\n            currentPitch =\n                (this.firstDrawnOctave * this.NOTES_PER_OCTAVE) + this.LOW_C;\n        }\n        else {\n            currentPitch = this.LOW_C - 3;\n            this.drawWhiteKey(currentPitch, x);\n            this.drawWhiteKey(currentPitch + 2, this.config.whiteNoteWidth);\n            currentPitch += 3;\n            x = 2 * this.config.whiteNoteWidth;\n        }\n        for (let o = this.firstDrawnOctave; o <= this.lastDrawnOctave; o++) {\n            for (let i = 0; i < this.NOTES_PER_OCTAVE; i++) {\n                if (blackNoteIndexes.indexOf(i) === -1) {\n                    this.drawWhiteKey(currentPitch, x);\n                    x += this.config.whiteNoteWidth;\n                }\n                currentPitch++;\n            }\n        }\n        if (this.config.showOnlyOctavesUsed) {\n            currentPitch =\n                (this.firstDrawnOctave * this.NOTES_PER_OCTAVE) + this.LOW_C;\n            x = -this.config.whiteNoteWidth;\n        }\n        else {\n            this.drawWhiteKey(currentPitch, x);\n            currentPitch = this.LOW_C - 3;\n            this.drawBlackKey(currentPitch + 1, blackNoteOffset);\n            currentPitch += 3;\n            x = this.config.whiteNoteWidth;\n        }\n        for (let o = this.firstDrawnOctave; o <= this.lastDrawnOctave; o++) {\n            for (let i = 0; i < this.NOTES_PER_OCTAVE; i++) {\n                if (blackNoteIndexes.indexOf(i) !== -1) {\n                    this.drawBlackKey(currentPitch, x + blackNoteOffset);\n                }\n                else {\n                    x += this.config.whiteNoteWidth;\n                }\n                currentPitch++;\n            }\n        }\n    }\n    drawWhiteKey(index, x) {\n        const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n        rect.dataset.pitch = String(index);\n        rect.setAttribute('x', String(x));\n        rect.setAttribute('y', '0');\n        rect.setAttribute('width', String(this.config.whiteNoteWidth));\n        rect.setAttribute('height', String(this.config.whiteNoteHeight));\n        rect.setAttribute('fill', 'white');\n        rect.setAttribute('original-fill', 'white');\n        rect.setAttribute('stroke', 'black');\n        rect.setAttribute('stroke-width', '3px');\n        rect.classList.add('white');\n        this.svgPiano.appendChild(rect);\n        return rect;\n    }\n    drawBlackKey(index, x) {\n        const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n        rect.dataset.pitch = String(index);\n        rect.setAttribute('x', String(x));\n        rect.setAttribute('y', '0');\n        rect.setAttribute('width', String(this.config.blackNoteWidth));\n        rect.setAttribute('height', String(this.config.blackNoteHeight));\n        rect.setAttribute('fill', 'black');\n        rect.setAttribute('original-fill', 'black');\n        rect.setAttribute('stroke', 'black');\n        rect.setAttribute('stroke-width', '3px');\n        rect.classList.add('black');\n        this.svgPiano.appendChild(rect);\n        return rect;\n    }\n    clearActiveNotes() {\n        super.unfillActiveRect(this.svg);\n        const els = this.svgPiano.querySelectorAll('rect.active');\n        for (let i = 0; i < els.length; ++i) {\n            const el = els[i];\n            el.setAttribute('fill', el.getAttribute('original-fill'));\n            el.classList.remove('active');\n        }\n    }\n}\nvar ScrollType;\n(function (ScrollType) {\n    ScrollType[ScrollType[\"PAGE\"] = 0] = \"PAGE\";\n    ScrollType[ScrollType[\"NOTE\"] = 1] = \"NOTE\";\n    ScrollType[ScrollType[\"BAR\"] = 2] = \"BAR\";\n})(ScrollType || (ScrollType = {}));\nclass StaffSVGVisualizer extends BaseVisualizer {\n    constructor(sequence, div, config = {}) {\n        super(sequence, config);\n        if (config.pixelsPerTimeStep === undefined ||\n            config.pixelsPerTimeStep <= 0) {\n            this.config.pixelsPerTimeStep = 0;\n        }\n        this.instruments = config.instruments || [];\n        this.render = new staffrender__WEBPACK_IMPORTED_MODULE_0__.StaffSVGRender(this.getScoreInfo(sequence), {\n            noteHeight: this.config.noteHeight,\n            noteSpacing: this.config.noteSpacing,\n            pixelsPerTimeStep: this.config.pixelsPerTimeStep,\n            noteRGB: this.config.noteRGB,\n            activeNoteRGB: this.config.activeNoteRGB,\n            defaultKey: config.defaultKey || 0,\n            scrollType: config.scrollType || ScrollType.PAGE,\n        }, div);\n        this.drawnNotes = sequence.notes.length;\n        this.clear();\n        this.redraw();\n    }\n    clear() {\n        this.render.clear();\n    }\n    redraw(activeNote, scrollIntoView) {\n        if (this.drawnNotes !== this.noteSequence.notes.length) {\n            this.render.scoreInfo = this.getScoreInfo(this.noteSequence);\n        }\n        const activeNoteInfo = activeNote ? this.getNoteInfo(activeNote) : undefined;\n        return this.render.redraw(activeNoteInfo, scrollIntoView);\n    }\n    isNoteInInstruments(note) {\n        if (note.instrument === undefined || this.instruments.length === 0) {\n            return true;\n        }\n        else {\n            return this.instruments.indexOf(note.instrument) >= 0;\n        }\n    }\n    timeToQuarters(time) {\n        const q = time * this.noteSequence.tempos[0].qpm / 60;\n        return Math.round(q * 16) / 16;\n    }\n    getNoteInfo(note) {\n        const startQ = this.timeToQuarters(note.startTime);\n        const endQ = this.timeToQuarters(note.endTime);\n        return {\n            start: startQ,\n            length: endQ - startQ,\n            pitch: note.pitch,\n            intensity: note.velocity\n        };\n    }\n    getScoreInfo(sequence) {\n        const notesInfo = [];\n        sequence.notes.forEach((note) => {\n            if (this.isNoteInInstruments(note)) {\n                notesInfo.push(this.getNoteInfo(note));\n            }\n        });\n        return {\n            notes: notesInfo,\n            tempos: sequence.tempos ?\n                sequence.tempos.map((t) => {\n                    return { start: this.timeToQuarters(t.time), qpm: t.qpm };\n                }) :\n                [],\n            keySignatures: sequence.keySignatures ?\n                sequence.keySignatures.map((ks) => {\n                    return { start: this.timeToQuarters(ks.time), key: ks.key };\n                }) :\n                [],\n            timeSignatures: sequence.timeSignatures ?\n                sequence.timeSignatures.map((ts) => {\n                    return {\n                        start: this.timeToQuarters(ts.time),\n                        numerator: ts.numerator,\n                        denominator: ts.denominator\n                    };\n                }) :\n                []\n        };\n    }\n    clearActiveNotes() {\n        this.redraw();\n    }\n}\n//# sourceMappingURL=visualizer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/core/visualizer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/protobuf/index.js":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/protobuf/index.js ***!
  \*************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NoteSequence: () => (/* binding */ NoteSequence)\n/* harmony export */ });\n/* harmony import */ var _proto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./proto */ \"(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/protobuf/proto.js\");\n/* harmony import */ var _proto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_proto__WEBPACK_IMPORTED_MODULE_0__);\n\nvar NoteSequence = _proto__WEBPACK_IMPORTED_MODULE_0__.tensorflow.magenta.NoteSequence;\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG1hZ2VudGErbXVzaWNAMS4yMy4xX0B0ZW5zb3JmbG93K3RmanMtY29yZUAyLjguNl9zZWVkcmFuZG9tQDIuNC40L25vZGVfbW9kdWxlcy9AbWFnZW50YS9tdXNpYy9lc20vcHJvdG9idWYvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFDO0FBQ3JDLG1CQUFtQiw4Q0FBVTtBQUNMO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9tb25nYWguZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtYWdlbnRhK211c2ljQDEuMjMuMV9AdGVuc29yZmxvdyt0ZmpzLWNvcmVAMi44LjZfc2VlZHJhbmRvbUAyLjQuNC9ub2RlX21vZHVsZXMvQG1hZ2VudGEvbXVzaWMvZXNtL3Byb3RvYnVmL2luZGV4LmpzP2EyOTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdGVuc29yZmxvdyB9IGZyb20gJy4vcHJvdG8nO1xudmFyIE5vdGVTZXF1ZW5jZSA9IHRlbnNvcmZsb3cubWFnZW50YS5Ob3RlU2VxdWVuY2U7XG5leHBvcnQgeyBOb3RlU2VxdWVuY2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/protobuf/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/protobuf/proto.js":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/protobuf/proto.js ***!
  \*************************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*eslint-disable block-scoped-var, no-redeclare, no-control-regex, no-prototype-builtins*/\n\n\nvar $protobuf = __webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/.pnpm/protobufjs@6.11.4/node_modules/protobufjs/minimal.js\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.tensorflow = (function() {\n\n    /**\n     * Namespace tensorflow.\n     * @exports tensorflow\n     * @namespace\n     */\n    var tensorflow = {};\n\n    tensorflow.magenta = (function() {\n\n        /**\n         * Namespace magenta.\n         * @memberof tensorflow\n         * @namespace\n         */\n        var magenta = {};\n\n        magenta.NoteSequence = (function() {\n\n            /**\n             * Properties of a NoteSequence.\n             * @memberof tensorflow.magenta\n             * @interface INoteSequence\n             * @property {string|null} [id] NoteSequence id\n             * @property {string|null} [filename] NoteSequence filename\n             * @property {number|null} [referenceNumber] NoteSequence referenceNumber\n             * @property {string|null} [collectionName] NoteSequence collectionName\n             * @property {number|null} [ticksPerQuarter] NoteSequence ticksPerQuarter\n             * @property {Array.<tensorflow.magenta.NoteSequence.ITimeSignature>|null} [timeSignatures] NoteSequence timeSignatures\n             * @property {Array.<tensorflow.magenta.NoteSequence.IKeySignature>|null} [keySignatures] NoteSequence keySignatures\n             * @property {Array.<tensorflow.magenta.NoteSequence.ITempo>|null} [tempos] NoteSequence tempos\n             * @property {Array.<tensorflow.magenta.NoteSequence.INote>|null} [notes] NoteSequence notes\n             * @property {number|null} [totalTime] NoteSequence totalTime\n             * @property {number|null} [totalQuantizedSteps] NoteSequence totalQuantizedSteps\n             * @property {Array.<tensorflow.magenta.NoteSequence.IPitchBend>|null} [pitchBends] NoteSequence pitchBends\n             * @property {Array.<tensorflow.magenta.NoteSequence.IControlChange>|null} [controlChanges] NoteSequence controlChanges\n             * @property {Array.<tensorflow.magenta.NoteSequence.IPartInfo>|null} [partInfos] NoteSequence partInfos\n             * @property {tensorflow.magenta.NoteSequence.ISourceInfo|null} [sourceInfo] NoteSequence sourceInfo\n             * @property {Array.<tensorflow.magenta.NoteSequence.ITextAnnotation>|null} [textAnnotations] NoteSequence textAnnotations\n             * @property {Array.<tensorflow.magenta.NoteSequence.ISectionAnnotation>|null} [sectionAnnotations] NoteSequence sectionAnnotations\n             * @property {Array.<tensorflow.magenta.NoteSequence.ISectionGroup>|null} [sectionGroups] NoteSequence sectionGroups\n             * @property {tensorflow.magenta.NoteSequence.IQuantizationInfo|null} [quantizationInfo] NoteSequence quantizationInfo\n             * @property {tensorflow.magenta.NoteSequence.ISubsequenceInfo|null} [subsequenceInfo] NoteSequence subsequenceInfo\n             * @property {tensorflow.magenta.ISequenceMetadata|null} [sequenceMetadata] NoteSequence sequenceMetadata\n             */\n\n            /**\n             * Constructs a new NoteSequence.\n             * @memberof tensorflow.magenta\n             * @classdesc Represents a NoteSequence.\n             * @implements INoteSequence\n             * @constructor\n             * @param {tensorflow.magenta.INoteSequence=} [properties] Properties to set\n             */\n            function NoteSequence(properties) {\n                this.timeSignatures = [];\n                this.keySignatures = [];\n                this.tempos = [];\n                this.notes = [];\n                this.pitchBends = [];\n                this.controlChanges = [];\n                this.partInfos = [];\n                this.textAnnotations = [];\n                this.sectionAnnotations = [];\n                this.sectionGroups = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * NoteSequence id.\n             * @member {string} id\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.id = \"\";\n\n            /**\n             * NoteSequence filename.\n             * @member {string} filename\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.filename = \"\";\n\n            /**\n             * NoteSequence referenceNumber.\n             * @member {number} referenceNumber\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.referenceNumber = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * NoteSequence collectionName.\n             * @member {string} collectionName\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.collectionName = \"\";\n\n            /**\n             * NoteSequence ticksPerQuarter.\n             * @member {number} ticksPerQuarter\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.ticksPerQuarter = 0;\n\n            /**\n             * NoteSequence timeSignatures.\n             * @member {Array.<tensorflow.magenta.NoteSequence.ITimeSignature>} timeSignatures\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.timeSignatures = $util.emptyArray;\n\n            /**\n             * NoteSequence keySignatures.\n             * @member {Array.<tensorflow.magenta.NoteSequence.IKeySignature>} keySignatures\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.keySignatures = $util.emptyArray;\n\n            /**\n             * NoteSequence tempos.\n             * @member {Array.<tensorflow.magenta.NoteSequence.ITempo>} tempos\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.tempos = $util.emptyArray;\n\n            /**\n             * NoteSequence notes.\n             * @member {Array.<tensorflow.magenta.NoteSequence.INote>} notes\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.notes = $util.emptyArray;\n\n            /**\n             * NoteSequence totalTime.\n             * @member {number} totalTime\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.totalTime = 0;\n\n            /**\n             * NoteSequence totalQuantizedSteps.\n             * @member {number} totalQuantizedSteps\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.totalQuantizedSteps = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * NoteSequence pitchBends.\n             * @member {Array.<tensorflow.magenta.NoteSequence.IPitchBend>} pitchBends\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.pitchBends = $util.emptyArray;\n\n            /**\n             * NoteSequence controlChanges.\n             * @member {Array.<tensorflow.magenta.NoteSequence.IControlChange>} controlChanges\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.controlChanges = $util.emptyArray;\n\n            /**\n             * NoteSequence partInfos.\n             * @member {Array.<tensorflow.magenta.NoteSequence.IPartInfo>} partInfos\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.partInfos = $util.emptyArray;\n\n            /**\n             * NoteSequence sourceInfo.\n             * @member {tensorflow.magenta.NoteSequence.ISourceInfo|null|undefined} sourceInfo\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.sourceInfo = null;\n\n            /**\n             * NoteSequence textAnnotations.\n             * @member {Array.<tensorflow.magenta.NoteSequence.ITextAnnotation>} textAnnotations\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.textAnnotations = $util.emptyArray;\n\n            /**\n             * NoteSequence sectionAnnotations.\n             * @member {Array.<tensorflow.magenta.NoteSequence.ISectionAnnotation>} sectionAnnotations\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.sectionAnnotations = $util.emptyArray;\n\n            /**\n             * NoteSequence sectionGroups.\n             * @member {Array.<tensorflow.magenta.NoteSequence.ISectionGroup>} sectionGroups\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.sectionGroups = $util.emptyArray;\n\n            /**\n             * NoteSequence quantizationInfo.\n             * @member {tensorflow.magenta.NoteSequence.IQuantizationInfo|null|undefined} quantizationInfo\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.quantizationInfo = null;\n\n            /**\n             * NoteSequence subsequenceInfo.\n             * @member {tensorflow.magenta.NoteSequence.ISubsequenceInfo|null|undefined} subsequenceInfo\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.subsequenceInfo = null;\n\n            /**\n             * NoteSequence sequenceMetadata.\n             * @member {tensorflow.magenta.ISequenceMetadata|null|undefined} sequenceMetadata\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.sequenceMetadata = null;\n\n            /**\n             * Creates a new NoteSequence instance using the specified properties.\n             * @function create\n             * @memberof tensorflow.magenta.NoteSequence\n             * @static\n             * @param {tensorflow.magenta.INoteSequence=} [properties] Properties to set\n             * @returns {tensorflow.magenta.NoteSequence} NoteSequence instance\n             */\n            NoteSequence.create = function create(properties) {\n                return new NoteSequence(properties);\n            };\n\n            /**\n             * Encodes the specified NoteSequence message. Does not implicitly {@link tensorflow.magenta.NoteSequence.verify|verify} messages.\n             * @function encode\n             * @memberof tensorflow.magenta.NoteSequence\n             * @static\n             * @param {tensorflow.magenta.INoteSequence} message NoteSequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            NoteSequence.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n                if (message.filename != null && message.hasOwnProperty(\"filename\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.filename);\n                if (message.collectionName != null && message.hasOwnProperty(\"collectionName\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.collectionName);\n                if (message.ticksPerQuarter != null && message.hasOwnProperty(\"ticksPerQuarter\"))\n                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.ticksPerQuarter);\n                if (message.timeSignatures != null && message.timeSignatures.length)\n                    for (var i = 0; i < message.timeSignatures.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.TimeSignature.encode(message.timeSignatures[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                if (message.keySignatures != null && message.keySignatures.length)\n                    for (var i = 0; i < message.keySignatures.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.KeySignature.encode(message.keySignatures[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                if (message.tempos != null && message.tempos.length)\n                    for (var i = 0; i < message.tempos.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.Tempo.encode(message.tempos[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                if (message.notes != null && message.notes.length)\n                    for (var i = 0; i < message.notes.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.Note.encode(message.notes[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n                if (message.totalTime != null && message.hasOwnProperty(\"totalTime\"))\n                    writer.uint32(/* id 9, wireType 1 =*/73).double(message.totalTime);\n                if (message.pitchBends != null && message.pitchBends.length)\n                    for (var i = 0; i < message.pitchBends.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.PitchBend.encode(message.pitchBends[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n                if (message.controlChanges != null && message.controlChanges.length)\n                    for (var i = 0; i < message.controlChanges.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.ControlChange.encode(message.controlChanges[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n                if (message.partInfos != null && message.partInfos.length)\n                    for (var i = 0; i < message.partInfos.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.PartInfo.encode(message.partInfos[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n                if (message.sourceInfo != null && message.hasOwnProperty(\"sourceInfo\"))\n                    $root.tensorflow.magenta.NoteSequence.SourceInfo.encode(message.sourceInfo, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n                if (message.textAnnotations != null && message.textAnnotations.length)\n                    for (var i = 0; i < message.textAnnotations.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.TextAnnotation.encode(message.textAnnotations[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n                if (message.quantizationInfo != null && message.hasOwnProperty(\"quantizationInfo\"))\n                    $root.tensorflow.magenta.NoteSequence.QuantizationInfo.encode(message.quantizationInfo, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n                if (message.totalQuantizedSteps != null && message.hasOwnProperty(\"totalQuantizedSteps\"))\n                    writer.uint32(/* id 16, wireType 0 =*/128).int64(message.totalQuantizedSteps);\n                if (message.subsequenceInfo != null && message.hasOwnProperty(\"subsequenceInfo\"))\n                    $root.tensorflow.magenta.NoteSequence.SubsequenceInfo.encode(message.subsequenceInfo, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();\n                if (message.referenceNumber != null && message.hasOwnProperty(\"referenceNumber\"))\n                    writer.uint32(/* id 18, wireType 0 =*/144).int64(message.referenceNumber);\n                if (message.sequenceMetadata != null && message.hasOwnProperty(\"sequenceMetadata\"))\n                    $root.tensorflow.magenta.SequenceMetadata.encode(message.sequenceMetadata, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();\n                if (message.sectionAnnotations != null && message.sectionAnnotations.length)\n                    for (var i = 0; i < message.sectionAnnotations.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.SectionAnnotation.encode(message.sectionAnnotations[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\n                if (message.sectionGroups != null && message.sectionGroups.length)\n                    for (var i = 0; i < message.sectionGroups.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.SectionGroup.encode(message.sectionGroups[i], writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified NoteSequence message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof tensorflow.magenta.NoteSequence\n             * @static\n             * @param {tensorflow.magenta.INoteSequence} message NoteSequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            NoteSequence.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a NoteSequence message from the specified reader or buffer.\n             * @function decode\n             * @memberof tensorflow.magenta.NoteSequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {tensorflow.magenta.NoteSequence} NoteSequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            NoteSequence.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.id = reader.string();\n                        break;\n                    case 2:\n                        message.filename = reader.string();\n                        break;\n                    case 18:\n                        message.referenceNumber = $util.Long?reader.int64().toNumber():reader.int64();\n                        break;\n                    case 3:\n                        message.collectionName = reader.string();\n                        break;\n                    case 4:\n                        message.ticksPerQuarter = reader.int32();\n                        break;\n                    case 5:\n                        if (!(message.timeSignatures && message.timeSignatures.length))\n                            message.timeSignatures = [];\n                        message.timeSignatures.push($root.tensorflow.magenta.NoteSequence.TimeSignature.decode(reader, reader.uint32()));\n                        break;\n                    case 6:\n                        if (!(message.keySignatures && message.keySignatures.length))\n                            message.keySignatures = [];\n                        message.keySignatures.push($root.tensorflow.magenta.NoteSequence.KeySignature.decode(reader, reader.uint32()));\n                        break;\n                    case 7:\n                        if (!(message.tempos && message.tempos.length))\n                            message.tempos = [];\n                        message.tempos.push($root.tensorflow.magenta.NoteSequence.Tempo.decode(reader, reader.uint32()));\n                        break;\n                    case 8:\n                        if (!(message.notes && message.notes.length))\n                            message.notes = [];\n                        message.notes.push($root.tensorflow.magenta.NoteSequence.Note.decode(reader, reader.uint32()));\n                        break;\n                    case 9:\n                        message.totalTime = reader.double();\n                        break;\n                    case 16:\n                        message.totalQuantizedSteps = $util.Long?reader.int64().toNumber():reader.int64();\n                        break;\n                    case 10:\n                        if (!(message.pitchBends && message.pitchBends.length))\n                            message.pitchBends = [];\n                        message.pitchBends.push($root.tensorflow.magenta.NoteSequence.PitchBend.decode(reader, reader.uint32()));\n                        break;\n                    case 11:\n                        if (!(message.controlChanges && message.controlChanges.length))\n                            message.controlChanges = [];\n                        message.controlChanges.push($root.tensorflow.magenta.NoteSequence.ControlChange.decode(reader, reader.uint32()));\n                        break;\n                    case 12:\n                        if (!(message.partInfos && message.partInfos.length))\n                            message.partInfos = [];\n                        message.partInfos.push($root.tensorflow.magenta.NoteSequence.PartInfo.decode(reader, reader.uint32()));\n                        break;\n                    case 13:\n                        message.sourceInfo = $root.tensorflow.magenta.NoteSequence.SourceInfo.decode(reader, reader.uint32());\n                        break;\n                    case 14:\n                        if (!(message.textAnnotations && message.textAnnotations.length))\n                            message.textAnnotations = [];\n                        message.textAnnotations.push($root.tensorflow.magenta.NoteSequence.TextAnnotation.decode(reader, reader.uint32()));\n                        break;\n                    case 20:\n                        if (!(message.sectionAnnotations && message.sectionAnnotations.length))\n                            message.sectionAnnotations = [];\n                        message.sectionAnnotations.push($root.tensorflow.magenta.NoteSequence.SectionAnnotation.decode(reader, reader.uint32()));\n                        break;\n                    case 21:\n                        if (!(message.sectionGroups && message.sectionGroups.length))\n                            message.sectionGroups = [];\n                        message.sectionGroups.push($root.tensorflow.magenta.NoteSequence.SectionGroup.decode(reader, reader.uint32()));\n                        break;\n                    case 15:\n                        message.quantizationInfo = $root.tensorflow.magenta.NoteSequence.QuantizationInfo.decode(reader, reader.uint32());\n                        break;\n                    case 17:\n                        message.subsequenceInfo = $root.tensorflow.magenta.NoteSequence.SubsequenceInfo.decode(reader, reader.uint32());\n                        break;\n                    case 19:\n                        message.sequenceMetadata = $root.tensorflow.magenta.SequenceMetadata.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a NoteSequence message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof tensorflow.magenta.NoteSequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {tensorflow.magenta.NoteSequence} NoteSequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            NoteSequence.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a NoteSequence message.\n             * @function verify\n             * @memberof tensorflow.magenta.NoteSequence\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            NoteSequence.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    if (!$util.isString(message.id))\n                        return \"id: string expected\";\n                if (message.filename != null && message.hasOwnProperty(\"filename\"))\n                    if (!$util.isString(message.filename))\n                        return \"filename: string expected\";\n                if (message.referenceNumber != null && message.hasOwnProperty(\"referenceNumber\"))\n                    if (!$util.isInteger(message.referenceNumber) && !(message.referenceNumber && $util.isInteger(message.referenceNumber.low) && $util.isInteger(message.referenceNumber.high)))\n                        return \"referenceNumber: integer|Long expected\";\n                if (message.collectionName != null && message.hasOwnProperty(\"collectionName\"))\n                    if (!$util.isString(message.collectionName))\n                        return \"collectionName: string expected\";\n                if (message.ticksPerQuarter != null && message.hasOwnProperty(\"ticksPerQuarter\"))\n                    if (!$util.isInteger(message.ticksPerQuarter))\n                        return \"ticksPerQuarter: integer expected\";\n                if (message.timeSignatures != null && message.hasOwnProperty(\"timeSignatures\")) {\n                    if (!Array.isArray(message.timeSignatures))\n                        return \"timeSignatures: array expected\";\n                    for (var i = 0; i < message.timeSignatures.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.TimeSignature.verify(message.timeSignatures[i]);\n                        if (error)\n                            return \"timeSignatures.\" + error;\n                    }\n                }\n                if (message.keySignatures != null && message.hasOwnProperty(\"keySignatures\")) {\n                    if (!Array.isArray(message.keySignatures))\n                        return \"keySignatures: array expected\";\n                    for (var i = 0; i < message.keySignatures.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.KeySignature.verify(message.keySignatures[i]);\n                        if (error)\n                            return \"keySignatures.\" + error;\n                    }\n                }\n                if (message.tempos != null && message.hasOwnProperty(\"tempos\")) {\n                    if (!Array.isArray(message.tempos))\n                        return \"tempos: array expected\";\n                    for (var i = 0; i < message.tempos.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.Tempo.verify(message.tempos[i]);\n                        if (error)\n                            return \"tempos.\" + error;\n                    }\n                }\n                if (message.notes != null && message.hasOwnProperty(\"notes\")) {\n                    if (!Array.isArray(message.notes))\n                        return \"notes: array expected\";\n                    for (var i = 0; i < message.notes.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.Note.verify(message.notes[i]);\n                        if (error)\n                            return \"notes.\" + error;\n                    }\n                }\n                if (message.totalTime != null && message.hasOwnProperty(\"totalTime\"))\n                    if (typeof message.totalTime !== \"number\")\n                        return \"totalTime: number expected\";\n                if (message.totalQuantizedSteps != null && message.hasOwnProperty(\"totalQuantizedSteps\"))\n                    if (!$util.isInteger(message.totalQuantizedSteps) && !(message.totalQuantizedSteps && $util.isInteger(message.totalQuantizedSteps.low) && $util.isInteger(message.totalQuantizedSteps.high)))\n                        return \"totalQuantizedSteps: integer|Long expected\";\n                if (message.pitchBends != null && message.hasOwnProperty(\"pitchBends\")) {\n                    if (!Array.isArray(message.pitchBends))\n                        return \"pitchBends: array expected\";\n                    for (var i = 0; i < message.pitchBends.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.PitchBend.verify(message.pitchBends[i]);\n                        if (error)\n                            return \"pitchBends.\" + error;\n                    }\n                }\n                if (message.controlChanges != null && message.hasOwnProperty(\"controlChanges\")) {\n                    if (!Array.isArray(message.controlChanges))\n                        return \"controlChanges: array expected\";\n                    for (var i = 0; i < message.controlChanges.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.ControlChange.verify(message.controlChanges[i]);\n                        if (error)\n                            return \"controlChanges.\" + error;\n                    }\n                }\n                if (message.partInfos != null && message.hasOwnProperty(\"partInfos\")) {\n                    if (!Array.isArray(message.partInfos))\n                        return \"partInfos: array expected\";\n                    for (var i = 0; i < message.partInfos.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.PartInfo.verify(message.partInfos[i]);\n                        if (error)\n                            return \"partInfos.\" + error;\n                    }\n                }\n                if (message.sourceInfo != null && message.hasOwnProperty(\"sourceInfo\")) {\n                    var error = $root.tensorflow.magenta.NoteSequence.SourceInfo.verify(message.sourceInfo);\n                    if (error)\n                        return \"sourceInfo.\" + error;\n                }\n                if (message.textAnnotations != null && message.hasOwnProperty(\"textAnnotations\")) {\n                    if (!Array.isArray(message.textAnnotations))\n                        return \"textAnnotations: array expected\";\n                    for (var i = 0; i < message.textAnnotations.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.TextAnnotation.verify(message.textAnnotations[i]);\n                        if (error)\n                            return \"textAnnotations.\" + error;\n                    }\n                }\n                if (message.sectionAnnotations != null && message.hasOwnProperty(\"sectionAnnotations\")) {\n                    if (!Array.isArray(message.sectionAnnotations))\n                        return \"sectionAnnotations: array expected\";\n                    for (var i = 0; i < message.sectionAnnotations.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.SectionAnnotation.verify(message.sectionAnnotations[i]);\n                        if (error)\n                            return \"sectionAnnotations.\" + error;\n                    }\n                }\n                if (message.sectionGroups != null && message.hasOwnProperty(\"sectionGroups\")) {\n                    if (!Array.isArray(message.sectionGroups))\n                        return \"sectionGroups: array expected\";\n                    for (var i = 0; i < message.sectionGroups.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.SectionGroup.verify(message.sectionGroups[i]);\n                        if (error)\n                            return \"sectionGroups.\" + error;\n                    }\n                }\n                if (message.quantizationInfo != null && message.hasOwnProperty(\"quantizationInfo\")) {\n                    var error = $root.tensorflow.magenta.NoteSequence.QuantizationInfo.verify(message.quantizationInfo);\n                    if (error)\n                        return \"quantizationInfo.\" + error;\n                }\n                if (message.subsequenceInfo != null && message.hasOwnProperty(\"subsequenceInfo\")) {\n                    var error = $root.tensorflow.magenta.NoteSequence.SubsequenceInfo.verify(message.subsequenceInfo);\n                    if (error)\n                        return \"subsequenceInfo.\" + error;\n                }\n                if (message.sequenceMetadata != null && message.hasOwnProperty(\"sequenceMetadata\")) {\n                    var error = $root.tensorflow.magenta.SequenceMetadata.verify(message.sequenceMetadata);\n                    if (error)\n                        return \"sequenceMetadata.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a NoteSequence message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof tensorflow.magenta.NoteSequence\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {tensorflow.magenta.NoteSequence} NoteSequence\n             */\n            NoteSequence.fromObject = function fromObject(object) {\n                if (object instanceof $root.tensorflow.magenta.NoteSequence)\n                    return object;\n                var message = new $root.tensorflow.magenta.NoteSequence();\n                if (object.id != null)\n                    message.id = String(object.id);\n                if (object.filename != null)\n                    message.filename = String(object.filename);\n                if (object.referenceNumber != null)\n                    if ($util.Long)\n                        (message.referenceNumber = $util.Long.fromValue(object.referenceNumber)).unsigned = false;\n                    else if (typeof object.referenceNumber === \"string\")\n                        message.referenceNumber = parseInt(object.referenceNumber, 10);\n                    else if (typeof object.referenceNumber === \"number\")\n                        message.referenceNumber = object.referenceNumber;\n                    else if (typeof object.referenceNumber === \"object\")\n                        message.referenceNumber = new $util.LongBits(object.referenceNumber.low >>> 0, object.referenceNumber.high >>> 0).toNumber();\n                if (object.collectionName != null)\n                    message.collectionName = String(object.collectionName);\n                if (object.ticksPerQuarter != null)\n                    message.ticksPerQuarter = object.ticksPerQuarter | 0;\n                if (object.timeSignatures) {\n                    if (!Array.isArray(object.timeSignatures))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.timeSignatures: array expected\");\n                    message.timeSignatures = [];\n                    for (var i = 0; i < object.timeSignatures.length; ++i) {\n                        if (typeof object.timeSignatures[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.timeSignatures: object expected\");\n                        message.timeSignatures[i] = $root.tensorflow.magenta.NoteSequence.TimeSignature.fromObject(object.timeSignatures[i]);\n                    }\n                }\n                if (object.keySignatures) {\n                    if (!Array.isArray(object.keySignatures))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.keySignatures: array expected\");\n                    message.keySignatures = [];\n                    for (var i = 0; i < object.keySignatures.length; ++i) {\n                        if (typeof object.keySignatures[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.keySignatures: object expected\");\n                        message.keySignatures[i] = $root.tensorflow.magenta.NoteSequence.KeySignature.fromObject(object.keySignatures[i]);\n                    }\n                }\n                if (object.tempos) {\n                    if (!Array.isArray(object.tempos))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.tempos: array expected\");\n                    message.tempos = [];\n                    for (var i = 0; i < object.tempos.length; ++i) {\n                        if (typeof object.tempos[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.tempos: object expected\");\n                        message.tempos[i] = $root.tensorflow.magenta.NoteSequence.Tempo.fromObject(object.tempos[i]);\n                    }\n                }\n                if (object.notes) {\n                    if (!Array.isArray(object.notes))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.notes: array expected\");\n                    message.notes = [];\n                    for (var i = 0; i < object.notes.length; ++i) {\n                        if (typeof object.notes[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.notes: object expected\");\n                        message.notes[i] = $root.tensorflow.magenta.NoteSequence.Note.fromObject(object.notes[i]);\n                    }\n                }\n                if (object.totalTime != null)\n                    message.totalTime = Number(object.totalTime);\n                if (object.totalQuantizedSteps != null)\n                    if ($util.Long)\n                        (message.totalQuantizedSteps = $util.Long.fromValue(object.totalQuantizedSteps)).unsigned = false;\n                    else if (typeof object.totalQuantizedSteps === \"string\")\n                        message.totalQuantizedSteps = parseInt(object.totalQuantizedSteps, 10);\n                    else if (typeof object.totalQuantizedSteps === \"number\")\n                        message.totalQuantizedSteps = object.totalQuantizedSteps;\n                    else if (typeof object.totalQuantizedSteps === \"object\")\n                        message.totalQuantizedSteps = new $util.LongBits(object.totalQuantizedSteps.low >>> 0, object.totalQuantizedSteps.high >>> 0).toNumber();\n                if (object.pitchBends) {\n                    if (!Array.isArray(object.pitchBends))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.pitchBends: array expected\");\n                    message.pitchBends = [];\n                    for (var i = 0; i < object.pitchBends.length; ++i) {\n                        if (typeof object.pitchBends[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.pitchBends: object expected\");\n                        message.pitchBends[i] = $root.tensorflow.magenta.NoteSequence.PitchBend.fromObject(object.pitchBends[i]);\n                    }\n                }\n                if (object.controlChanges) {\n                    if (!Array.isArray(object.controlChanges))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.controlChanges: array expected\");\n                    message.controlChanges = [];\n                    for (var i = 0; i < object.controlChanges.length; ++i) {\n                        if (typeof object.controlChanges[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.controlChanges: object expected\");\n                        message.controlChanges[i] = $root.tensorflow.magenta.NoteSequence.ControlChange.fromObject(object.controlChanges[i]);\n                    }\n                }\n                if (object.partInfos) {\n                    if (!Array.isArray(object.partInfos))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.partInfos: array expected\");\n                    message.partInfos = [];\n                    for (var i = 0; i < object.partInfos.length; ++i) {\n                        if (typeof object.partInfos[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.partInfos: object expected\");\n                        message.partInfos[i] = $root.tensorflow.magenta.NoteSequence.PartInfo.fromObject(object.partInfos[i]);\n                    }\n                }\n                if (object.sourceInfo != null) {\n                    if (typeof object.sourceInfo !== \"object\")\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.sourceInfo: object expected\");\n                    message.sourceInfo = $root.tensorflow.magenta.NoteSequence.SourceInfo.fromObject(object.sourceInfo);\n                }\n                if (object.textAnnotations) {\n                    if (!Array.isArray(object.textAnnotations))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.textAnnotations: array expected\");\n                    message.textAnnotations = [];\n                    for (var i = 0; i < object.textAnnotations.length; ++i) {\n                        if (typeof object.textAnnotations[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.textAnnotations: object expected\");\n                        message.textAnnotations[i] = $root.tensorflow.magenta.NoteSequence.TextAnnotation.fromObject(object.textAnnotations[i]);\n                    }\n                }\n                if (object.sectionAnnotations) {\n                    if (!Array.isArray(object.sectionAnnotations))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.sectionAnnotations: array expected\");\n                    message.sectionAnnotations = [];\n                    for (var i = 0; i < object.sectionAnnotations.length; ++i) {\n                        if (typeof object.sectionAnnotations[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.sectionAnnotations: object expected\");\n                        message.sectionAnnotations[i] = $root.tensorflow.magenta.NoteSequence.SectionAnnotation.fromObject(object.sectionAnnotations[i]);\n                    }\n                }\n                if (object.sectionGroups) {\n                    if (!Array.isArray(object.sectionGroups))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.sectionGroups: array expected\");\n                    message.sectionGroups = [];\n                    for (var i = 0; i < object.sectionGroups.length; ++i) {\n                        if (typeof object.sectionGroups[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.sectionGroups: object expected\");\n                        message.sectionGroups[i] = $root.tensorflow.magenta.NoteSequence.SectionGroup.fromObject(object.sectionGroups[i]);\n                    }\n                }\n                if (object.quantizationInfo != null) {\n                    if (typeof object.quantizationInfo !== \"object\")\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.quantizationInfo: object expected\");\n                    message.quantizationInfo = $root.tensorflow.magenta.NoteSequence.QuantizationInfo.fromObject(object.quantizationInfo);\n                }\n                if (object.subsequenceInfo != null) {\n                    if (typeof object.subsequenceInfo !== \"object\")\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.subsequenceInfo: object expected\");\n                    message.subsequenceInfo = $root.tensorflow.magenta.NoteSequence.SubsequenceInfo.fromObject(object.subsequenceInfo);\n                }\n                if (object.sequenceMetadata != null) {\n                    if (typeof object.sequenceMetadata !== \"object\")\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.sequenceMetadata: object expected\");\n                    message.sequenceMetadata = $root.tensorflow.magenta.SequenceMetadata.fromObject(object.sequenceMetadata);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a NoteSequence message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof tensorflow.magenta.NoteSequence\n             * @static\n             * @param {tensorflow.magenta.NoteSequence} message NoteSequence\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            NoteSequence.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults) {\n                    object.timeSignatures = [];\n                    object.keySignatures = [];\n                    object.tempos = [];\n                    object.notes = [];\n                    object.pitchBends = [];\n                    object.controlChanges = [];\n                    object.partInfos = [];\n                    object.textAnnotations = [];\n                    object.sectionAnnotations = [];\n                    object.sectionGroups = [];\n                }\n                if (options.defaults) {\n                    object.id = \"\";\n                    object.filename = \"\";\n                    object.collectionName = \"\";\n                    object.ticksPerQuarter = 0;\n                    object.totalTime = 0;\n                    object.sourceInfo = null;\n                    object.quantizationInfo = null;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.totalQuantizedSteps = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.totalQuantizedSteps = options.longs === String ? \"0\" : 0;\n                    object.subsequenceInfo = null;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.referenceNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.referenceNumber = options.longs === String ? \"0\" : 0;\n                    object.sequenceMetadata = null;\n                }\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    object.id = message.id;\n                if (message.filename != null && message.hasOwnProperty(\"filename\"))\n                    object.filename = message.filename;\n                if (message.collectionName != null && message.hasOwnProperty(\"collectionName\"))\n                    object.collectionName = message.collectionName;\n                if (message.ticksPerQuarter != null && message.hasOwnProperty(\"ticksPerQuarter\"))\n                    object.ticksPerQuarter = message.ticksPerQuarter;\n                if (message.timeSignatures && message.timeSignatures.length) {\n                    object.timeSignatures = [];\n                    for (var j = 0; j < message.timeSignatures.length; ++j)\n                        object.timeSignatures[j] = $root.tensorflow.magenta.NoteSequence.TimeSignature.toObject(message.timeSignatures[j], options);\n                }\n                if (message.keySignatures && message.keySignatures.length) {\n                    object.keySignatures = [];\n                    for (var j = 0; j < message.keySignatures.length; ++j)\n                        object.keySignatures[j] = $root.tensorflow.magenta.NoteSequence.KeySignature.toObject(message.keySignatures[j], options);\n                }\n                if (message.tempos && message.tempos.length) {\n                    object.tempos = [];\n                    for (var j = 0; j < message.tempos.length; ++j)\n                        object.tempos[j] = $root.tensorflow.magenta.NoteSequence.Tempo.toObject(message.tempos[j], options);\n                }\n                if (message.notes && message.notes.length) {\n                    object.notes = [];\n                    for (var j = 0; j < message.notes.length; ++j)\n                        object.notes[j] = $root.tensorflow.magenta.NoteSequence.Note.toObject(message.notes[j], options);\n                }\n                if (message.totalTime != null && message.hasOwnProperty(\"totalTime\"))\n                    object.totalTime = options.json && !isFinite(message.totalTime) ? String(message.totalTime) : message.totalTime;\n                if (message.pitchBends && message.pitchBends.length) {\n                    object.pitchBends = [];\n                    for (var j = 0; j < message.pitchBends.length; ++j)\n                        object.pitchBends[j] = $root.tensorflow.magenta.NoteSequence.PitchBend.toObject(message.pitchBends[j], options);\n                }\n                if (message.controlChanges && message.controlChanges.length) {\n                    object.controlChanges = [];\n                    for (var j = 0; j < message.controlChanges.length; ++j)\n                        object.controlChanges[j] = $root.tensorflow.magenta.NoteSequence.ControlChange.toObject(message.controlChanges[j], options);\n                }\n                if (message.partInfos && message.partInfos.length) {\n                    object.partInfos = [];\n                    for (var j = 0; j < message.partInfos.length; ++j)\n                        object.partInfos[j] = $root.tensorflow.magenta.NoteSequence.PartInfo.toObject(message.partInfos[j], options);\n                }\n                if (message.sourceInfo != null && message.hasOwnProperty(\"sourceInfo\"))\n                    object.sourceInfo = $root.tensorflow.magenta.NoteSequence.SourceInfo.toObject(message.sourceInfo, options);\n                if (message.textAnnotations && message.textAnnotations.length) {\n                    object.textAnnotations = [];\n                    for (var j = 0; j < message.textAnnotations.length; ++j)\n                        object.textAnnotations[j] = $root.tensorflow.magenta.NoteSequence.TextAnnotation.toObject(message.textAnnotations[j], options);\n                }\n                if (message.quantizationInfo != null && message.hasOwnProperty(\"quantizationInfo\"))\n                    object.quantizationInfo = $root.tensorflow.magenta.NoteSequence.QuantizationInfo.toObject(message.quantizationInfo, options);\n                if (message.totalQuantizedSteps != null && message.hasOwnProperty(\"totalQuantizedSteps\"))\n                    if (typeof message.totalQuantizedSteps === \"number\")\n                        object.totalQuantizedSteps = options.longs === String ? String(message.totalQuantizedSteps) : message.totalQuantizedSteps;\n                    else\n                        object.totalQuantizedSteps = options.longs === String ? $util.Long.prototype.toString.call(message.totalQuantizedSteps) : options.longs === Number ? new $util.LongBits(message.totalQuantizedSteps.low >>> 0, message.totalQuantizedSteps.high >>> 0).toNumber() : message.totalQuantizedSteps;\n                if (message.subsequenceInfo != null && message.hasOwnProperty(\"subsequenceInfo\"))\n                    object.subsequenceInfo = $root.tensorflow.magenta.NoteSequence.SubsequenceInfo.toObject(message.subsequenceInfo, options);\n                if (message.referenceNumber != null && message.hasOwnProperty(\"referenceNumber\"))\n                    if (typeof message.referenceNumber === \"number\")\n                        object.referenceNumber = options.longs === String ? String(message.referenceNumber) : message.referenceNumber;\n                    else\n                        object.referenceNumber = options.longs === String ? $util.Long.prototype.toString.call(message.referenceNumber) : options.longs === Number ? new $util.LongBits(message.referenceNumber.low >>> 0, message.referenceNumber.high >>> 0).toNumber() : message.referenceNumber;\n                if (message.sequenceMetadata != null && message.hasOwnProperty(\"sequenceMetadata\"))\n                    object.sequenceMetadata = $root.tensorflow.magenta.SequenceMetadata.toObject(message.sequenceMetadata, options);\n                if (message.sectionAnnotations && message.sectionAnnotations.length) {\n                    object.sectionAnnotations = [];\n                    for (var j = 0; j < message.sectionAnnotations.length; ++j)\n                        object.sectionAnnotations[j] = $root.tensorflow.magenta.NoteSequence.SectionAnnotation.toObject(message.sectionAnnotations[j], options);\n                }\n                if (message.sectionGroups && message.sectionGroups.length) {\n                    object.sectionGroups = [];\n                    for (var j = 0; j < message.sectionGroups.length; ++j)\n                        object.sectionGroups[j] = $root.tensorflow.magenta.NoteSequence.SectionGroup.toObject(message.sectionGroups[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this NoteSequence to JSON.\n             * @function toJSON\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            NoteSequence.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            NoteSequence.Note = (function() {\n\n                /**\n                 * Properties of a Note.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface INote\n                 * @property {number|null} [pitch] Note pitch\n                 * @property {tensorflow.magenta.NoteSequence.PitchName|null} [pitchName] Note pitchName\n                 * @property {number|null} [velocity] Note velocity\n                 * @property {number|null} [startTime] Note startTime\n                 * @property {number|null} [quantizedStartStep] Note quantizedStartStep\n                 * @property {number|null} [endTime] Note endTime\n                 * @property {number|null} [quantizedEndStep] Note quantizedEndStep\n                 * @property {number|null} [numerator] Note numerator\n                 * @property {number|null} [denominator] Note denominator\n                 * @property {number|null} [instrument] Note instrument\n                 * @property {number|null} [program] Note program\n                 * @property {boolean|null} [isDrum] Note isDrum\n                 * @property {number|null} [part] Note part\n                 * @property {number|null} [voice] Note voice\n                 */\n\n                /**\n                 * Constructs a new Note.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a Note.\n                 * @implements INote\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.INote=} [properties] Properties to set\n                 */\n                function Note(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * Note pitch.\n                 * @member {number} pitch\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.pitch = 0;\n\n                /**\n                 * Note pitchName.\n                 * @member {tensorflow.magenta.NoteSequence.PitchName} pitchName\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.pitchName = 0;\n\n                /**\n                 * Note velocity.\n                 * @member {number} velocity\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.velocity = 0;\n\n                /**\n                 * Note startTime.\n                 * @member {number} startTime\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.startTime = 0;\n\n                /**\n                 * Note quantizedStartStep.\n                 * @member {number} quantizedStartStep\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.quantizedStartStep = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * Note endTime.\n                 * @member {number} endTime\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.endTime = 0;\n\n                /**\n                 * Note quantizedEndStep.\n                 * @member {number} quantizedEndStep\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.quantizedEndStep = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * Note numerator.\n                 * @member {number} numerator\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.numerator = 0;\n\n                /**\n                 * Note denominator.\n                 * @member {number} denominator\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.denominator = 0;\n\n                /**\n                 * Note instrument.\n                 * @member {number} instrument\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.instrument = 0;\n\n                /**\n                 * Note program.\n                 * @member {number} program\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.program = 0;\n\n                /**\n                 * Note isDrum.\n                 * @member {boolean} isDrum\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.isDrum = false;\n\n                /**\n                 * Note part.\n                 * @member {number} part\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.part = 0;\n\n                /**\n                 * Note voice.\n                 * @member {number} voice\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.voice = 0;\n\n                /**\n                 * Creates a new Note instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.INote=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.Note} Note instance\n                 */\n                Note.create = function create(properties) {\n                    return new Note(properties);\n                };\n\n                /**\n                 * Encodes the specified Note message. Does not implicitly {@link tensorflow.magenta.NoteSequence.Note.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.INote} message Note message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Note.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.pitch != null && message.hasOwnProperty(\"pitch\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.pitch);\n                    if (message.velocity != null && message.hasOwnProperty(\"velocity\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.velocity);\n                    if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                        writer.uint32(/* id 3, wireType 1 =*/25).double(message.startTime);\n                    if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n                        writer.uint32(/* id 4, wireType 1 =*/33).double(message.endTime);\n                    if (message.numerator != null && message.hasOwnProperty(\"numerator\"))\n                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.numerator);\n                    if (message.denominator != null && message.hasOwnProperty(\"denominator\"))\n                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.denominator);\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.instrument);\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.program);\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        writer.uint32(/* id 9, wireType 0 =*/72).bool(message.isDrum);\n                    if (message.part != null && message.hasOwnProperty(\"part\"))\n                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.part);\n                    if (message.pitchName != null && message.hasOwnProperty(\"pitchName\"))\n                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.pitchName);\n                    if (message.voice != null && message.hasOwnProperty(\"voice\"))\n                        writer.uint32(/* id 12, wireType 0 =*/96).int32(message.voice);\n                    if (message.quantizedStartStep != null && message.hasOwnProperty(\"quantizedStartStep\"))\n                        writer.uint32(/* id 13, wireType 0 =*/104).int64(message.quantizedStartStep);\n                    if (message.quantizedEndStep != null && message.hasOwnProperty(\"quantizedEndStep\"))\n                        writer.uint32(/* id 14, wireType 0 =*/112).int64(message.quantizedEndStep);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified Note message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.Note.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.INote} message Note message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Note.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a Note message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.Note} Note\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Note.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.Note();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.pitch = reader.int32();\n                            break;\n                        case 11:\n                            message.pitchName = reader.int32();\n                            break;\n                        case 2:\n                            message.velocity = reader.int32();\n                            break;\n                        case 3:\n                            message.startTime = reader.double();\n                            break;\n                        case 13:\n                            message.quantizedStartStep = $util.Long?reader.int64().toNumber():reader.int64();\n                            break;\n                        case 4:\n                            message.endTime = reader.double();\n                            break;\n                        case 14:\n                            message.quantizedEndStep = $util.Long?reader.int64().toNumber():reader.int64();\n                            break;\n                        case 5:\n                            message.numerator = reader.int32();\n                            break;\n                        case 6:\n                            message.denominator = reader.int32();\n                            break;\n                        case 7:\n                            message.instrument = reader.int32();\n                            break;\n                        case 8:\n                            message.program = reader.int32();\n                            break;\n                        case 9:\n                            message.isDrum = reader.bool();\n                            break;\n                        case 10:\n                            message.part = reader.int32();\n                            break;\n                        case 12:\n                            message.voice = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a Note message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.Note} Note\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Note.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a Note message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                Note.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.pitch != null && message.hasOwnProperty(\"pitch\"))\n                        if (!$util.isInteger(message.pitch))\n                            return \"pitch: integer expected\";\n                    if (message.pitchName != null && message.hasOwnProperty(\"pitchName\"))\n                        switch (message.pitchName) {\n                        default:\n                            return \"pitchName: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 11:\n                        case 12:\n                        case 13:\n                        case 14:\n                        case 15:\n                        case 16:\n                        case 17:\n                        case 18:\n                        case 19:\n                        case 20:\n                        case 21:\n                        case 22:\n                        case 23:\n                        case 24:\n                        case 25:\n                        case 26:\n                        case 27:\n                        case 28:\n                        case 29:\n                        case 30:\n                        case 31:\n                        case 32:\n                        case 33:\n                        case 34:\n                        case 35:\n                            break;\n                        }\n                    if (message.velocity != null && message.hasOwnProperty(\"velocity\"))\n                        if (!$util.isInteger(message.velocity))\n                            return \"velocity: integer expected\";\n                    if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                        if (typeof message.startTime !== \"number\")\n                            return \"startTime: number expected\";\n                    if (message.quantizedStartStep != null && message.hasOwnProperty(\"quantizedStartStep\"))\n                        if (!$util.isInteger(message.quantizedStartStep) && !(message.quantizedStartStep && $util.isInteger(message.quantizedStartStep.low) && $util.isInteger(message.quantizedStartStep.high)))\n                            return \"quantizedStartStep: integer|Long expected\";\n                    if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n                        if (typeof message.endTime !== \"number\")\n                            return \"endTime: number expected\";\n                    if (message.quantizedEndStep != null && message.hasOwnProperty(\"quantizedEndStep\"))\n                        if (!$util.isInteger(message.quantizedEndStep) && !(message.quantizedEndStep && $util.isInteger(message.quantizedEndStep.low) && $util.isInteger(message.quantizedEndStep.high)))\n                            return \"quantizedEndStep: integer|Long expected\";\n                    if (message.numerator != null && message.hasOwnProperty(\"numerator\"))\n                        if (!$util.isInteger(message.numerator))\n                            return \"numerator: integer expected\";\n                    if (message.denominator != null && message.hasOwnProperty(\"denominator\"))\n                        if (!$util.isInteger(message.denominator))\n                            return \"denominator: integer expected\";\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        if (!$util.isInteger(message.instrument))\n                            return \"instrument: integer expected\";\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        if (!$util.isInteger(message.program))\n                            return \"program: integer expected\";\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        if (typeof message.isDrum !== \"boolean\")\n                            return \"isDrum: boolean expected\";\n                    if (message.part != null && message.hasOwnProperty(\"part\"))\n                        if (!$util.isInteger(message.part))\n                            return \"part: integer expected\";\n                    if (message.voice != null && message.hasOwnProperty(\"voice\"))\n                        if (!$util.isInteger(message.voice))\n                            return \"voice: integer expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a Note message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.Note} Note\n                 */\n                Note.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.Note)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.Note();\n                    if (object.pitch != null)\n                        message.pitch = object.pitch | 0;\n                    switch (object.pitchName) {\n                    case \"UNKNOWN_PITCH_NAME\":\n                    case 0:\n                        message.pitchName = 0;\n                        break;\n                    case \"F_FLAT_FLAT\":\n                    case 1:\n                        message.pitchName = 1;\n                        break;\n                    case \"C_FLAT_FLAT\":\n                    case 2:\n                        message.pitchName = 2;\n                        break;\n                    case \"G_FLAT_FLAT\":\n                    case 3:\n                        message.pitchName = 3;\n                        break;\n                    case \"D_FLAT_FLAT\":\n                    case 4:\n                        message.pitchName = 4;\n                        break;\n                    case \"A_FLAT_FLAT\":\n                    case 5:\n                        message.pitchName = 5;\n                        break;\n                    case \"E_FLAT_FLAT\":\n                    case 6:\n                        message.pitchName = 6;\n                        break;\n                    case \"B_FLAT_FLAT\":\n                    case 7:\n                        message.pitchName = 7;\n                        break;\n                    case \"F_FLAT\":\n                    case 8:\n                        message.pitchName = 8;\n                        break;\n                    case \"C_FLAT\":\n                    case 9:\n                        message.pitchName = 9;\n                        break;\n                    case \"G_FLAT\":\n                    case 10:\n                        message.pitchName = 10;\n                        break;\n                    case \"D_FLAT\":\n                    case 11:\n                        message.pitchName = 11;\n                        break;\n                    case \"A_FLAT\":\n                    case 12:\n                        message.pitchName = 12;\n                        break;\n                    case \"E_FLAT\":\n                    case 13:\n                        message.pitchName = 13;\n                        break;\n                    case \"B_FLAT\":\n                    case 14:\n                        message.pitchName = 14;\n                        break;\n                    case \"F\":\n                    case 15:\n                        message.pitchName = 15;\n                        break;\n                    case \"C\":\n                    case 16:\n                        message.pitchName = 16;\n                        break;\n                    case \"G\":\n                    case 17:\n                        message.pitchName = 17;\n                        break;\n                    case \"D\":\n                    case 18:\n                        message.pitchName = 18;\n                        break;\n                    case \"A\":\n                    case 19:\n                        message.pitchName = 19;\n                        break;\n                    case \"E\":\n                    case 20:\n                        message.pitchName = 20;\n                        break;\n                    case \"B\":\n                    case 21:\n                        message.pitchName = 21;\n                        break;\n                    case \"F_SHARP\":\n                    case 22:\n                        message.pitchName = 22;\n                        break;\n                    case \"C_SHARP\":\n                    case 23:\n                        message.pitchName = 23;\n                        break;\n                    case \"G_SHARP\":\n                    case 24:\n                        message.pitchName = 24;\n                        break;\n                    case \"D_SHARP\":\n                    case 25:\n                        message.pitchName = 25;\n                        break;\n                    case \"A_SHARP\":\n                    case 26:\n                        message.pitchName = 26;\n                        break;\n                    case \"E_SHARP\":\n                    case 27:\n                        message.pitchName = 27;\n                        break;\n                    case \"B_SHARP\":\n                    case 28:\n                        message.pitchName = 28;\n                        break;\n                    case \"F_SHARP_SHARP\":\n                    case 29:\n                        message.pitchName = 29;\n                        break;\n                    case \"C_SHARP_SHARP\":\n                    case 30:\n                        message.pitchName = 30;\n                        break;\n                    case \"G_SHARP_SHARP\":\n                    case 31:\n                        message.pitchName = 31;\n                        break;\n                    case \"D_SHARP_SHARP\":\n                    case 32:\n                        message.pitchName = 32;\n                        break;\n                    case \"A_SHARP_SHARP\":\n                    case 33:\n                        message.pitchName = 33;\n                        break;\n                    case \"E_SHARP_SHARP\":\n                    case 34:\n                        message.pitchName = 34;\n                        break;\n                    case \"B_SHARP_SHARP\":\n                    case 35:\n                        message.pitchName = 35;\n                        break;\n                    }\n                    if (object.velocity != null)\n                        message.velocity = object.velocity | 0;\n                    if (object.startTime != null)\n                        message.startTime = Number(object.startTime);\n                    if (object.quantizedStartStep != null)\n                        if ($util.Long)\n                            (message.quantizedStartStep = $util.Long.fromValue(object.quantizedStartStep)).unsigned = false;\n                        else if (typeof object.quantizedStartStep === \"string\")\n                            message.quantizedStartStep = parseInt(object.quantizedStartStep, 10);\n                        else if (typeof object.quantizedStartStep === \"number\")\n                            message.quantizedStartStep = object.quantizedStartStep;\n                        else if (typeof object.quantizedStartStep === \"object\")\n                            message.quantizedStartStep = new $util.LongBits(object.quantizedStartStep.low >>> 0, object.quantizedStartStep.high >>> 0).toNumber();\n                    if (object.endTime != null)\n                        message.endTime = Number(object.endTime);\n                    if (object.quantizedEndStep != null)\n                        if ($util.Long)\n                            (message.quantizedEndStep = $util.Long.fromValue(object.quantizedEndStep)).unsigned = false;\n                        else if (typeof object.quantizedEndStep === \"string\")\n                            message.quantizedEndStep = parseInt(object.quantizedEndStep, 10);\n                        else if (typeof object.quantizedEndStep === \"number\")\n                            message.quantizedEndStep = object.quantizedEndStep;\n                        else if (typeof object.quantizedEndStep === \"object\")\n                            message.quantizedEndStep = new $util.LongBits(object.quantizedEndStep.low >>> 0, object.quantizedEndStep.high >>> 0).toNumber();\n                    if (object.numerator != null)\n                        message.numerator = object.numerator | 0;\n                    if (object.denominator != null)\n                        message.denominator = object.denominator | 0;\n                    if (object.instrument != null)\n                        message.instrument = object.instrument | 0;\n                    if (object.program != null)\n                        message.program = object.program | 0;\n                    if (object.isDrum != null)\n                        message.isDrum = Boolean(object.isDrum);\n                    if (object.part != null)\n                        message.part = object.part | 0;\n                    if (object.voice != null)\n                        message.voice = object.voice | 0;\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a Note message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.Note} message Note\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                Note.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.pitch = 0;\n                        object.velocity = 0;\n                        object.startTime = 0;\n                        object.endTime = 0;\n                        object.numerator = 0;\n                        object.denominator = 0;\n                        object.instrument = 0;\n                        object.program = 0;\n                        object.isDrum = false;\n                        object.part = 0;\n                        object.pitchName = options.enums === String ? \"UNKNOWN_PITCH_NAME\" : 0;\n                        object.voice = 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.quantizedStartStep = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.quantizedStartStep = options.longs === String ? \"0\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.quantizedEndStep = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.quantizedEndStep = options.longs === String ? \"0\" : 0;\n                    }\n                    if (message.pitch != null && message.hasOwnProperty(\"pitch\"))\n                        object.pitch = message.pitch;\n                    if (message.velocity != null && message.hasOwnProperty(\"velocity\"))\n                        object.velocity = message.velocity;\n                    if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                        object.startTime = options.json && !isFinite(message.startTime) ? String(message.startTime) : message.startTime;\n                    if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n                        object.endTime = options.json && !isFinite(message.endTime) ? String(message.endTime) : message.endTime;\n                    if (message.numerator != null && message.hasOwnProperty(\"numerator\"))\n                        object.numerator = message.numerator;\n                    if (message.denominator != null && message.hasOwnProperty(\"denominator\"))\n                        object.denominator = message.denominator;\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        object.instrument = message.instrument;\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        object.program = message.program;\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        object.isDrum = message.isDrum;\n                    if (message.part != null && message.hasOwnProperty(\"part\"))\n                        object.part = message.part;\n                    if (message.pitchName != null && message.hasOwnProperty(\"pitchName\"))\n                        object.pitchName = options.enums === String ? $root.tensorflow.magenta.NoteSequence.PitchName[message.pitchName] : message.pitchName;\n                    if (message.voice != null && message.hasOwnProperty(\"voice\"))\n                        object.voice = message.voice;\n                    if (message.quantizedStartStep != null && message.hasOwnProperty(\"quantizedStartStep\"))\n                        if (typeof message.quantizedStartStep === \"number\")\n                            object.quantizedStartStep = options.longs === String ? String(message.quantizedStartStep) : message.quantizedStartStep;\n                        else\n                            object.quantizedStartStep = options.longs === String ? $util.Long.prototype.toString.call(message.quantizedStartStep) : options.longs === Number ? new $util.LongBits(message.quantizedStartStep.low >>> 0, message.quantizedStartStep.high >>> 0).toNumber() : message.quantizedStartStep;\n                    if (message.quantizedEndStep != null && message.hasOwnProperty(\"quantizedEndStep\"))\n                        if (typeof message.quantizedEndStep === \"number\")\n                            object.quantizedEndStep = options.longs === String ? String(message.quantizedEndStep) : message.quantizedEndStep;\n                        else\n                            object.quantizedEndStep = options.longs === String ? $util.Long.prototype.toString.call(message.quantizedEndStep) : options.longs === Number ? new $util.LongBits(message.quantizedEndStep.low >>> 0, message.quantizedEndStep.high >>> 0).toNumber() : message.quantizedEndStep;\n                    return object;\n                };\n\n                /**\n                 * Converts this Note to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                Note.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return Note;\n            })();\n\n            /**\n             * PitchName enum.\n             * @name tensorflow.magenta.NoteSequence.PitchName\n             * @enum {string}\n             * @property {number} UNKNOWN_PITCH_NAME=0 UNKNOWN_PITCH_NAME value\n             * @property {number} F_FLAT_FLAT=1 F_FLAT_FLAT value\n             * @property {number} C_FLAT_FLAT=2 C_FLAT_FLAT value\n             * @property {number} G_FLAT_FLAT=3 G_FLAT_FLAT value\n             * @property {number} D_FLAT_FLAT=4 D_FLAT_FLAT value\n             * @property {number} A_FLAT_FLAT=5 A_FLAT_FLAT value\n             * @property {number} E_FLAT_FLAT=6 E_FLAT_FLAT value\n             * @property {number} B_FLAT_FLAT=7 B_FLAT_FLAT value\n             * @property {number} F_FLAT=8 F_FLAT value\n             * @property {number} C_FLAT=9 C_FLAT value\n             * @property {number} G_FLAT=10 G_FLAT value\n             * @property {number} D_FLAT=11 D_FLAT value\n             * @property {number} A_FLAT=12 A_FLAT value\n             * @property {number} E_FLAT=13 E_FLAT value\n             * @property {number} B_FLAT=14 B_FLAT value\n             * @property {number} F=15 F value\n             * @property {number} C=16 C value\n             * @property {number} G=17 G value\n             * @property {number} D=18 D value\n             * @property {number} A=19 A value\n             * @property {number} E=20 E value\n             * @property {number} B=21 B value\n             * @property {number} F_SHARP=22 F_SHARP value\n             * @property {number} C_SHARP=23 C_SHARP value\n             * @property {number} G_SHARP=24 G_SHARP value\n             * @property {number} D_SHARP=25 D_SHARP value\n             * @property {number} A_SHARP=26 A_SHARP value\n             * @property {number} E_SHARP=27 E_SHARP value\n             * @property {number} B_SHARP=28 B_SHARP value\n             * @property {number} F_SHARP_SHARP=29 F_SHARP_SHARP value\n             * @property {number} C_SHARP_SHARP=30 C_SHARP_SHARP value\n             * @property {number} G_SHARP_SHARP=31 G_SHARP_SHARP value\n             * @property {number} D_SHARP_SHARP=32 D_SHARP_SHARP value\n             * @property {number} A_SHARP_SHARP=33 A_SHARP_SHARP value\n             * @property {number} E_SHARP_SHARP=34 E_SHARP_SHARP value\n             * @property {number} B_SHARP_SHARP=35 B_SHARP_SHARP value\n             */\n            NoteSequence.PitchName = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"UNKNOWN_PITCH_NAME\"] = 0;\n                values[valuesById[1] = \"F_FLAT_FLAT\"] = 1;\n                values[valuesById[2] = \"C_FLAT_FLAT\"] = 2;\n                values[valuesById[3] = \"G_FLAT_FLAT\"] = 3;\n                values[valuesById[4] = \"D_FLAT_FLAT\"] = 4;\n                values[valuesById[5] = \"A_FLAT_FLAT\"] = 5;\n                values[valuesById[6] = \"E_FLAT_FLAT\"] = 6;\n                values[valuesById[7] = \"B_FLAT_FLAT\"] = 7;\n                values[valuesById[8] = \"F_FLAT\"] = 8;\n                values[valuesById[9] = \"C_FLAT\"] = 9;\n                values[valuesById[10] = \"G_FLAT\"] = 10;\n                values[valuesById[11] = \"D_FLAT\"] = 11;\n                values[valuesById[12] = \"A_FLAT\"] = 12;\n                values[valuesById[13] = \"E_FLAT\"] = 13;\n                values[valuesById[14] = \"B_FLAT\"] = 14;\n                values[valuesById[15] = \"F\"] = 15;\n                values[valuesById[16] = \"C\"] = 16;\n                values[valuesById[17] = \"G\"] = 17;\n                values[valuesById[18] = \"D\"] = 18;\n                values[valuesById[19] = \"A\"] = 19;\n                values[valuesById[20] = \"E\"] = 20;\n                values[valuesById[21] = \"B\"] = 21;\n                values[valuesById[22] = \"F_SHARP\"] = 22;\n                values[valuesById[23] = \"C_SHARP\"] = 23;\n                values[valuesById[24] = \"G_SHARP\"] = 24;\n                values[valuesById[25] = \"D_SHARP\"] = 25;\n                values[valuesById[26] = \"A_SHARP\"] = 26;\n                values[valuesById[27] = \"E_SHARP\"] = 27;\n                values[valuesById[28] = \"B_SHARP\"] = 28;\n                values[valuesById[29] = \"F_SHARP_SHARP\"] = 29;\n                values[valuesById[30] = \"C_SHARP_SHARP\"] = 30;\n                values[valuesById[31] = \"G_SHARP_SHARP\"] = 31;\n                values[valuesById[32] = \"D_SHARP_SHARP\"] = 32;\n                values[valuesById[33] = \"A_SHARP_SHARP\"] = 33;\n                values[valuesById[34] = \"E_SHARP_SHARP\"] = 34;\n                values[valuesById[35] = \"B_SHARP_SHARP\"] = 35;\n                return values;\n            })();\n\n            NoteSequence.TimeSignature = (function() {\n\n                /**\n                 * Properties of a TimeSignature.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface ITimeSignature\n                 * @property {number|null} [time] TimeSignature time\n                 * @property {number|null} [numerator] TimeSignature numerator\n                 * @property {number|null} [denominator] TimeSignature denominator\n                 */\n\n                /**\n                 * Constructs a new TimeSignature.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a TimeSignature.\n                 * @implements ITimeSignature\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.ITimeSignature=} [properties] Properties to set\n                 */\n                function TimeSignature(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * TimeSignature time.\n                 * @member {number} time\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @instance\n                 */\n                TimeSignature.prototype.time = 0;\n\n                /**\n                 * TimeSignature numerator.\n                 * @member {number} numerator\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @instance\n                 */\n                TimeSignature.prototype.numerator = 0;\n\n                /**\n                 * TimeSignature denominator.\n                 * @member {number} denominator\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @instance\n                 */\n                TimeSignature.prototype.denominator = 0;\n\n                /**\n                 * Creates a new TimeSignature instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITimeSignature=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.TimeSignature} TimeSignature instance\n                 */\n                TimeSignature.create = function create(properties) {\n                    return new TimeSignature(properties);\n                };\n\n                /**\n                 * Encodes the specified TimeSignature message. Does not implicitly {@link tensorflow.magenta.NoteSequence.TimeSignature.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITimeSignature} message TimeSignature message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TimeSignature.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.time);\n                    if (message.numerator != null && message.hasOwnProperty(\"numerator\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.numerator);\n                    if (message.denominator != null && message.hasOwnProperty(\"denominator\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.denominator);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified TimeSignature message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.TimeSignature.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITimeSignature} message TimeSignature message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TimeSignature.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a TimeSignature message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.TimeSignature} TimeSignature\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TimeSignature.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.TimeSignature();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.time = reader.double();\n                            break;\n                        case 2:\n                            message.numerator = reader.int32();\n                            break;\n                        case 3:\n                            message.denominator = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a TimeSignature message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.TimeSignature} TimeSignature\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TimeSignature.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a TimeSignature message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                TimeSignature.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        if (typeof message.time !== \"number\")\n                            return \"time: number expected\";\n                    if (message.numerator != null && message.hasOwnProperty(\"numerator\"))\n                        if (!$util.isInteger(message.numerator))\n                            return \"numerator: integer expected\";\n                    if (message.denominator != null && message.hasOwnProperty(\"denominator\"))\n                        if (!$util.isInteger(message.denominator))\n                            return \"denominator: integer expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a TimeSignature message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.TimeSignature} TimeSignature\n                 */\n                TimeSignature.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.TimeSignature)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.TimeSignature();\n                    if (object.time != null)\n                        message.time = Number(object.time);\n                    if (object.numerator != null)\n                        message.numerator = object.numerator | 0;\n                    if (object.denominator != null)\n                        message.denominator = object.denominator | 0;\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a TimeSignature message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.TimeSignature} message TimeSignature\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                TimeSignature.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.time = 0;\n                        object.numerator = 0;\n                        object.denominator = 0;\n                    }\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        object.time = options.json && !isFinite(message.time) ? String(message.time) : message.time;\n                    if (message.numerator != null && message.hasOwnProperty(\"numerator\"))\n                        object.numerator = message.numerator;\n                    if (message.denominator != null && message.hasOwnProperty(\"denominator\"))\n                        object.denominator = message.denominator;\n                    return object;\n                };\n\n                /**\n                 * Converts this TimeSignature to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                TimeSignature.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return TimeSignature;\n            })();\n\n            NoteSequence.KeySignature = (function() {\n\n                /**\n                 * Properties of a KeySignature.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface IKeySignature\n                 * @property {number|null} [time] KeySignature time\n                 * @property {tensorflow.magenta.NoteSequence.KeySignature.Key|null} [key] KeySignature key\n                 * @property {tensorflow.magenta.NoteSequence.KeySignature.Mode|null} [mode] KeySignature mode\n                 */\n\n                /**\n                 * Constructs a new KeySignature.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a KeySignature.\n                 * @implements IKeySignature\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.IKeySignature=} [properties] Properties to set\n                 */\n                function KeySignature(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * KeySignature time.\n                 * @member {number} time\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @instance\n                 */\n                KeySignature.prototype.time = 0;\n\n                /**\n                 * KeySignature key.\n                 * @member {tensorflow.magenta.NoteSequence.KeySignature.Key} key\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @instance\n                 */\n                KeySignature.prototype.key = 0;\n\n                /**\n                 * KeySignature mode.\n                 * @member {tensorflow.magenta.NoteSequence.KeySignature.Mode} mode\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @instance\n                 */\n                KeySignature.prototype.mode = 0;\n\n                /**\n                 * Creates a new KeySignature instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IKeySignature=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.KeySignature} KeySignature instance\n                 */\n                KeySignature.create = function create(properties) {\n                    return new KeySignature(properties);\n                };\n\n                /**\n                 * Encodes the specified KeySignature message. Does not implicitly {@link tensorflow.magenta.NoteSequence.KeySignature.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IKeySignature} message KeySignature message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                KeySignature.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.time);\n                    if (message.key != null && message.hasOwnProperty(\"key\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.key);\n                    if (message.mode != null && message.hasOwnProperty(\"mode\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.mode);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified KeySignature message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.KeySignature.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IKeySignature} message KeySignature message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                KeySignature.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a KeySignature message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.KeySignature} KeySignature\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                KeySignature.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.KeySignature();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.time = reader.double();\n                            break;\n                        case 2:\n                            message.key = reader.int32();\n                            break;\n                        case 3:\n                            message.mode = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a KeySignature message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.KeySignature} KeySignature\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                KeySignature.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a KeySignature message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                KeySignature.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        if (typeof message.time !== \"number\")\n                            return \"time: number expected\";\n                    if (message.key != null && message.hasOwnProperty(\"key\"))\n                        switch (message.key) {\n                        default:\n                            return \"key: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 10:\n                        case 11:\n                            break;\n                        }\n                    if (message.mode != null && message.hasOwnProperty(\"mode\"))\n                        switch (message.mode) {\n                        default:\n                            return \"mode: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                            break;\n                        }\n                    return null;\n                };\n\n                /**\n                 * Creates a KeySignature message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.KeySignature} KeySignature\n                 */\n                KeySignature.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.KeySignature)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.KeySignature();\n                    if (object.time != null)\n                        message.time = Number(object.time);\n                    switch (object.key) {\n                    case \"C\":\n                    case 0:\n                        message.key = 0;\n                        break;\n                    case \"C_SHARP\":\n                    case 1:\n                        message.key = 1;\n                        break;\n                    case \"D_FLAT\":\n                    case 1:\n                        message.key = 1;\n                        break;\n                    case \"D\":\n                    case 2:\n                        message.key = 2;\n                        break;\n                    case \"D_SHARP\":\n                    case 3:\n                        message.key = 3;\n                        break;\n                    case \"E_FLAT\":\n                    case 3:\n                        message.key = 3;\n                        break;\n                    case \"E\":\n                    case 4:\n                        message.key = 4;\n                        break;\n                    case \"F\":\n                    case 5:\n                        message.key = 5;\n                        break;\n                    case \"F_SHARP\":\n                    case 6:\n                        message.key = 6;\n                        break;\n                    case \"G_FLAT\":\n                    case 6:\n                        message.key = 6;\n                        break;\n                    case \"G\":\n                    case 7:\n                        message.key = 7;\n                        break;\n                    case \"G_SHARP\":\n                    case 8:\n                        message.key = 8;\n                        break;\n                    case \"A_FLAT\":\n                    case 8:\n                        message.key = 8;\n                        break;\n                    case \"A\":\n                    case 9:\n                        message.key = 9;\n                        break;\n                    case \"A_SHARP\":\n                    case 10:\n                        message.key = 10;\n                        break;\n                    case \"B_FLAT\":\n                    case 10:\n                        message.key = 10;\n                        break;\n                    case \"B\":\n                    case 11:\n                        message.key = 11;\n                        break;\n                    }\n                    switch (object.mode) {\n                    case \"MAJOR\":\n                    case 0:\n                        message.mode = 0;\n                        break;\n                    case \"MINOR\":\n                    case 1:\n                        message.mode = 1;\n                        break;\n                    case \"NOT_SPECIFIED\":\n                    case 2:\n                        message.mode = 2;\n                        break;\n                    case \"MIXOLYDIAN\":\n                    case 3:\n                        message.mode = 3;\n                        break;\n                    case \"DORIAN\":\n                    case 4:\n                        message.mode = 4;\n                        break;\n                    case \"PHRYGIAN\":\n                    case 5:\n                        message.mode = 5;\n                        break;\n                    case \"LYDIAN\":\n                    case 6:\n                        message.mode = 6;\n                        break;\n                    case \"LOCRIAN\":\n                    case 7:\n                        message.mode = 7;\n                        break;\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a KeySignature message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.KeySignature} message KeySignature\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                KeySignature.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.time = 0;\n                        object.key = options.enums === String ? \"C\" : 0;\n                        object.mode = options.enums === String ? \"MAJOR\" : 0;\n                    }\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        object.time = options.json && !isFinite(message.time) ? String(message.time) : message.time;\n                    if (message.key != null && message.hasOwnProperty(\"key\"))\n                        object.key = options.enums === String ? $root.tensorflow.magenta.NoteSequence.KeySignature.Key[message.key] : message.key;\n                    if (message.mode != null && message.hasOwnProperty(\"mode\"))\n                        object.mode = options.enums === String ? $root.tensorflow.magenta.NoteSequence.KeySignature.Mode[message.mode] : message.mode;\n                    return object;\n                };\n\n                /**\n                 * Converts this KeySignature to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                KeySignature.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                /**\n                 * Key enum.\n                 * @name tensorflow.magenta.NoteSequence.KeySignature.Key\n                 * @enum {string}\n                 * @property {number} C=0 C value\n                 * @property {number} C_SHARP=1 C_SHARP value\n                 * @property {number} D_FLAT=1 D_FLAT value\n                 * @property {number} D=2 D value\n                 * @property {number} D_SHARP=3 D_SHARP value\n                 * @property {number} E_FLAT=3 E_FLAT value\n                 * @property {number} E=4 E value\n                 * @property {number} F=5 F value\n                 * @property {number} F_SHARP=6 F_SHARP value\n                 * @property {number} G_FLAT=6 G_FLAT value\n                 * @property {number} G=7 G value\n                 * @property {number} G_SHARP=8 G_SHARP value\n                 * @property {number} A_FLAT=8 A_FLAT value\n                 * @property {number} A=9 A value\n                 * @property {number} A_SHARP=10 A_SHARP value\n                 * @property {number} B_FLAT=10 B_FLAT value\n                 * @property {number} B=11 B value\n                 */\n                KeySignature.Key = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"C\"] = 0;\n                    values[valuesById[1] = \"C_SHARP\"] = 1;\n                    values[\"D_FLAT\"] = 1;\n                    values[valuesById[2] = \"D\"] = 2;\n                    values[valuesById[3] = \"D_SHARP\"] = 3;\n                    values[\"E_FLAT\"] = 3;\n                    values[valuesById[4] = \"E\"] = 4;\n                    values[valuesById[5] = \"F\"] = 5;\n                    values[valuesById[6] = \"F_SHARP\"] = 6;\n                    values[\"G_FLAT\"] = 6;\n                    values[valuesById[7] = \"G\"] = 7;\n                    values[valuesById[8] = \"G_SHARP\"] = 8;\n                    values[\"A_FLAT\"] = 8;\n                    values[valuesById[9] = \"A\"] = 9;\n                    values[valuesById[10] = \"A_SHARP\"] = 10;\n                    values[\"B_FLAT\"] = 10;\n                    values[valuesById[11] = \"B\"] = 11;\n                    return values;\n                })();\n\n                /**\n                 * Mode enum.\n                 * @name tensorflow.magenta.NoteSequence.KeySignature.Mode\n                 * @enum {string}\n                 * @property {number} MAJOR=0 MAJOR value\n                 * @property {number} MINOR=1 MINOR value\n                 * @property {number} NOT_SPECIFIED=2 NOT_SPECIFIED value\n                 * @property {number} MIXOLYDIAN=3 MIXOLYDIAN value\n                 * @property {number} DORIAN=4 DORIAN value\n                 * @property {number} PHRYGIAN=5 PHRYGIAN value\n                 * @property {number} LYDIAN=6 LYDIAN value\n                 * @property {number} LOCRIAN=7 LOCRIAN value\n                 */\n                KeySignature.Mode = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"MAJOR\"] = 0;\n                    values[valuesById[1] = \"MINOR\"] = 1;\n                    values[valuesById[2] = \"NOT_SPECIFIED\"] = 2;\n                    values[valuesById[3] = \"MIXOLYDIAN\"] = 3;\n                    values[valuesById[4] = \"DORIAN\"] = 4;\n                    values[valuesById[5] = \"PHRYGIAN\"] = 5;\n                    values[valuesById[6] = \"LYDIAN\"] = 6;\n                    values[valuesById[7] = \"LOCRIAN\"] = 7;\n                    return values;\n                })();\n\n                return KeySignature;\n            })();\n\n            NoteSequence.Tempo = (function() {\n\n                /**\n                 * Properties of a Tempo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface ITempo\n                 * @property {number|null} [time] Tempo time\n                 * @property {number|null} [qpm] Tempo qpm\n                 */\n\n                /**\n                 * Constructs a new Tempo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a Tempo.\n                 * @implements ITempo\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.ITempo=} [properties] Properties to set\n                 */\n                function Tempo(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * Tempo time.\n                 * @member {number} time\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @instance\n                 */\n                Tempo.prototype.time = 0;\n\n                /**\n                 * Tempo qpm.\n                 * @member {number} qpm\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @instance\n                 */\n                Tempo.prototype.qpm = 0;\n\n                /**\n                 * Creates a new Tempo instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITempo=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.Tempo} Tempo instance\n                 */\n                Tempo.create = function create(properties) {\n                    return new Tempo(properties);\n                };\n\n                /**\n                 * Encodes the specified Tempo message. Does not implicitly {@link tensorflow.magenta.NoteSequence.Tempo.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITempo} message Tempo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Tempo.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.time);\n                    if (message.qpm != null && message.hasOwnProperty(\"qpm\"))\n                        writer.uint32(/* id 2, wireType 1 =*/17).double(message.qpm);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified Tempo message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.Tempo.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITempo} message Tempo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Tempo.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a Tempo message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.Tempo} Tempo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Tempo.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.Tempo();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.time = reader.double();\n                            break;\n                        case 2:\n                            message.qpm = reader.double();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a Tempo message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.Tempo} Tempo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Tempo.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a Tempo message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                Tempo.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        if (typeof message.time !== \"number\")\n                            return \"time: number expected\";\n                    if (message.qpm != null && message.hasOwnProperty(\"qpm\"))\n                        if (typeof message.qpm !== \"number\")\n                            return \"qpm: number expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a Tempo message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.Tempo} Tempo\n                 */\n                Tempo.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.Tempo)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.Tempo();\n                    if (object.time != null)\n                        message.time = Number(object.time);\n                    if (object.qpm != null)\n                        message.qpm = Number(object.qpm);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a Tempo message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.Tempo} message Tempo\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                Tempo.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.time = 0;\n                        object.qpm = 0;\n                    }\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        object.time = options.json && !isFinite(message.time) ? String(message.time) : message.time;\n                    if (message.qpm != null && message.hasOwnProperty(\"qpm\"))\n                        object.qpm = options.json && !isFinite(message.qpm) ? String(message.qpm) : message.qpm;\n                    return object;\n                };\n\n                /**\n                 * Converts this Tempo to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                Tempo.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return Tempo;\n            })();\n\n            NoteSequence.PitchBend = (function() {\n\n                /**\n                 * Properties of a PitchBend.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface IPitchBend\n                 * @property {number|null} [time] PitchBend time\n                 * @property {number|null} [bend] PitchBend bend\n                 * @property {number|null} [instrument] PitchBend instrument\n                 * @property {number|null} [program] PitchBend program\n                 * @property {boolean|null} [isDrum] PitchBend isDrum\n                 */\n\n                /**\n                 * Constructs a new PitchBend.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a PitchBend.\n                 * @implements IPitchBend\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.IPitchBend=} [properties] Properties to set\n                 */\n                function PitchBend(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * PitchBend time.\n                 * @member {number} time\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @instance\n                 */\n                PitchBend.prototype.time = 0;\n\n                /**\n                 * PitchBend bend.\n                 * @member {number} bend\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @instance\n                 */\n                PitchBend.prototype.bend = 0;\n\n                /**\n                 * PitchBend instrument.\n                 * @member {number} instrument\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @instance\n                 */\n                PitchBend.prototype.instrument = 0;\n\n                /**\n                 * PitchBend program.\n                 * @member {number} program\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @instance\n                 */\n                PitchBend.prototype.program = 0;\n\n                /**\n                 * PitchBend isDrum.\n                 * @member {boolean} isDrum\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @instance\n                 */\n                PitchBend.prototype.isDrum = false;\n\n                /**\n                 * Creates a new PitchBend instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IPitchBend=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.PitchBend} PitchBend instance\n                 */\n                PitchBend.create = function create(properties) {\n                    return new PitchBend(properties);\n                };\n\n                /**\n                 * Encodes the specified PitchBend message. Does not implicitly {@link tensorflow.magenta.NoteSequence.PitchBend.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IPitchBend} message PitchBend message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PitchBend.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.time);\n                    if (message.bend != null && message.hasOwnProperty(\"bend\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.bend);\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.instrument);\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.program);\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.isDrum);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified PitchBend message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.PitchBend.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IPitchBend} message PitchBend message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PitchBend.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a PitchBend message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.PitchBend} PitchBend\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PitchBend.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.PitchBend();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.time = reader.double();\n                            break;\n                        case 2:\n                            message.bend = reader.int32();\n                            break;\n                        case 3:\n                            message.instrument = reader.int32();\n                            break;\n                        case 4:\n                            message.program = reader.int32();\n                            break;\n                        case 5:\n                            message.isDrum = reader.bool();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a PitchBend message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.PitchBend} PitchBend\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PitchBend.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a PitchBend message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                PitchBend.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        if (typeof message.time !== \"number\")\n                            return \"time: number expected\";\n                    if (message.bend != null && message.hasOwnProperty(\"bend\"))\n                        if (!$util.isInteger(message.bend))\n                            return \"bend: integer expected\";\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        if (!$util.isInteger(message.instrument))\n                            return \"instrument: integer expected\";\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        if (!$util.isInteger(message.program))\n                            return \"program: integer expected\";\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        if (typeof message.isDrum !== \"boolean\")\n                            return \"isDrum: boolean expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a PitchBend message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.PitchBend} PitchBend\n                 */\n                PitchBend.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.PitchBend)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.PitchBend();\n                    if (object.time != null)\n                        message.time = Number(object.time);\n                    if (object.bend != null)\n                        message.bend = object.bend | 0;\n                    if (object.instrument != null)\n                        message.instrument = object.instrument | 0;\n                    if (object.program != null)\n                        message.program = object.program | 0;\n                    if (object.isDrum != null)\n                        message.isDrum = Boolean(object.isDrum);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a PitchBend message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.PitchBend} message PitchBend\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                PitchBend.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.time = 0;\n                        object.bend = 0;\n                        object.instrument = 0;\n                        object.program = 0;\n                        object.isDrum = false;\n                    }\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        object.time = options.json && !isFinite(message.time) ? String(message.time) : message.time;\n                    if (message.bend != null && message.hasOwnProperty(\"bend\"))\n                        object.bend = message.bend;\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        object.instrument = message.instrument;\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        object.program = message.program;\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        object.isDrum = message.isDrum;\n                    return object;\n                };\n\n                /**\n                 * Converts this PitchBend to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                PitchBend.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return PitchBend;\n            })();\n\n            NoteSequence.ControlChange = (function() {\n\n                /**\n                 * Properties of a ControlChange.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface IControlChange\n                 * @property {number|null} [time] ControlChange time\n                 * @property {number|null} [quantizedStep] ControlChange quantizedStep\n                 * @property {number|null} [controlNumber] ControlChange controlNumber\n                 * @property {number|null} [controlValue] ControlChange controlValue\n                 * @property {number|null} [instrument] ControlChange instrument\n                 * @property {number|null} [program] ControlChange program\n                 * @property {boolean|null} [isDrum] ControlChange isDrum\n                 */\n\n                /**\n                 * Constructs a new ControlChange.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a ControlChange.\n                 * @implements IControlChange\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.IControlChange=} [properties] Properties to set\n                 */\n                function ControlChange(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * ControlChange time.\n                 * @member {number} time\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @instance\n                 */\n                ControlChange.prototype.time = 0;\n\n                /**\n                 * ControlChange quantizedStep.\n                 * @member {number} quantizedStep\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @instance\n                 */\n                ControlChange.prototype.quantizedStep = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * ControlChange controlNumber.\n                 * @member {number} controlNumber\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @instance\n                 */\n                ControlChange.prototype.controlNumber = 0;\n\n                /**\n                 * ControlChange controlValue.\n                 * @member {number} controlValue\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @instance\n                 */\n                ControlChange.prototype.controlValue = 0;\n\n                /**\n                 * ControlChange instrument.\n                 * @member {number} instrument\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @instance\n                 */\n                ControlChange.prototype.instrument = 0;\n\n                /**\n                 * ControlChange program.\n                 * @member {number} program\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @instance\n                 */\n                ControlChange.prototype.program = 0;\n\n                /**\n                 * ControlChange isDrum.\n                 * @member {boolean} isDrum\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @instance\n                 */\n                ControlChange.prototype.isDrum = false;\n\n                /**\n                 * Creates a new ControlChange instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IControlChange=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.ControlChange} ControlChange instance\n                 */\n                ControlChange.create = function create(properties) {\n                    return new ControlChange(properties);\n                };\n\n                /**\n                 * Encodes the specified ControlChange message. Does not implicitly {@link tensorflow.magenta.NoteSequence.ControlChange.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IControlChange} message ControlChange message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ControlChange.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.time);\n                    if (message.controlNumber != null && message.hasOwnProperty(\"controlNumber\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.controlNumber);\n                    if (message.controlValue != null && message.hasOwnProperty(\"controlValue\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.controlValue);\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.instrument);\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.program);\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.isDrum);\n                    if (message.quantizedStep != null && message.hasOwnProperty(\"quantizedStep\"))\n                        writer.uint32(/* id 7, wireType 0 =*/56).int64(message.quantizedStep);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified ControlChange message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.ControlChange.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IControlChange} message ControlChange message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ControlChange.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a ControlChange message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.ControlChange} ControlChange\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ControlChange.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.ControlChange();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.time = reader.double();\n                            break;\n                        case 7:\n                            message.quantizedStep = $util.Long?reader.int64().toNumber():reader.int64();\n                            break;\n                        case 2:\n                            message.controlNumber = reader.int32();\n                            break;\n                        case 3:\n                            message.controlValue = reader.int32();\n                            break;\n                        case 4:\n                            message.instrument = reader.int32();\n                            break;\n                        case 5:\n                            message.program = reader.int32();\n                            break;\n                        case 6:\n                            message.isDrum = reader.bool();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a ControlChange message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.ControlChange} ControlChange\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ControlChange.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a ControlChange message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                ControlChange.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        if (typeof message.time !== \"number\")\n                            return \"time: number expected\";\n                    if (message.quantizedStep != null && message.hasOwnProperty(\"quantizedStep\"))\n                        if (!$util.isInteger(message.quantizedStep) && !(message.quantizedStep && $util.isInteger(message.quantizedStep.low) && $util.isInteger(message.quantizedStep.high)))\n                            return \"quantizedStep: integer|Long expected\";\n                    if (message.controlNumber != null && message.hasOwnProperty(\"controlNumber\"))\n                        if (!$util.isInteger(message.controlNumber))\n                            return \"controlNumber: integer expected\";\n                    if (message.controlValue != null && message.hasOwnProperty(\"controlValue\"))\n                        if (!$util.isInteger(message.controlValue))\n                            return \"controlValue: integer expected\";\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        if (!$util.isInteger(message.instrument))\n                            return \"instrument: integer expected\";\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        if (!$util.isInteger(message.program))\n                            return \"program: integer expected\";\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        if (typeof message.isDrum !== \"boolean\")\n                            return \"isDrum: boolean expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a ControlChange message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.ControlChange} ControlChange\n                 */\n                ControlChange.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.ControlChange)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.ControlChange();\n                    if (object.time != null)\n                        message.time = Number(object.time);\n                    if (object.quantizedStep != null)\n                        if ($util.Long)\n                            (message.quantizedStep = $util.Long.fromValue(object.quantizedStep)).unsigned = false;\n                        else if (typeof object.quantizedStep === \"string\")\n                            message.quantizedStep = parseInt(object.quantizedStep, 10);\n                        else if (typeof object.quantizedStep === \"number\")\n                            message.quantizedStep = object.quantizedStep;\n                        else if (typeof object.quantizedStep === \"object\")\n                            message.quantizedStep = new $util.LongBits(object.quantizedStep.low >>> 0, object.quantizedStep.high >>> 0).toNumber();\n                    if (object.controlNumber != null)\n                        message.controlNumber = object.controlNumber | 0;\n                    if (object.controlValue != null)\n                        message.controlValue = object.controlValue | 0;\n                    if (object.instrument != null)\n                        message.instrument = object.instrument | 0;\n                    if (object.program != null)\n                        message.program = object.program | 0;\n                    if (object.isDrum != null)\n                        message.isDrum = Boolean(object.isDrum);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a ControlChange message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ControlChange} message ControlChange\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                ControlChange.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.time = 0;\n                        object.controlNumber = 0;\n                        object.controlValue = 0;\n                        object.instrument = 0;\n                        object.program = 0;\n                        object.isDrum = false;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.quantizedStep = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.quantizedStep = options.longs === String ? \"0\" : 0;\n                    }\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        object.time = options.json && !isFinite(message.time) ? String(message.time) : message.time;\n                    if (message.controlNumber != null && message.hasOwnProperty(\"controlNumber\"))\n                        object.controlNumber = message.controlNumber;\n                    if (message.controlValue != null && message.hasOwnProperty(\"controlValue\"))\n                        object.controlValue = message.controlValue;\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        object.instrument = message.instrument;\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        object.program = message.program;\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        object.isDrum = message.isDrum;\n                    if (message.quantizedStep != null && message.hasOwnProperty(\"quantizedStep\"))\n                        if (typeof message.quantizedStep === \"number\")\n                            object.quantizedStep = options.longs === String ? String(message.quantizedStep) : message.quantizedStep;\n                        else\n                            object.quantizedStep = options.longs === String ? $util.Long.prototype.toString.call(message.quantizedStep) : options.longs === Number ? new $util.LongBits(message.quantizedStep.low >>> 0, message.quantizedStep.high >>> 0).toNumber() : message.quantizedStep;\n                    return object;\n                };\n\n                /**\n                 * Converts this ControlChange to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                ControlChange.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return ControlChange;\n            })();\n\n            NoteSequence.PartInfo = (function() {\n\n                /**\n                 * Properties of a PartInfo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface IPartInfo\n                 * @property {number|null} [part] PartInfo part\n                 * @property {string|null} [name] PartInfo name\n                 */\n\n                /**\n                 * Constructs a new PartInfo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a PartInfo.\n                 * @implements IPartInfo\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.IPartInfo=} [properties] Properties to set\n                 */\n                function PartInfo(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * PartInfo part.\n                 * @member {number} part\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @instance\n                 */\n                PartInfo.prototype.part = 0;\n\n                /**\n                 * PartInfo name.\n                 * @member {string} name\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @instance\n                 */\n                PartInfo.prototype.name = \"\";\n\n                /**\n                 * Creates a new PartInfo instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IPartInfo=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.PartInfo} PartInfo instance\n                 */\n                PartInfo.create = function create(properties) {\n                    return new PartInfo(properties);\n                };\n\n                /**\n                 * Encodes the specified PartInfo message. Does not implicitly {@link tensorflow.magenta.NoteSequence.PartInfo.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IPartInfo} message PartInfo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PartInfo.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.part != null && message.hasOwnProperty(\"part\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.part);\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified PartInfo message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.PartInfo.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IPartInfo} message PartInfo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PartInfo.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a PartInfo message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.PartInfo} PartInfo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PartInfo.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.PartInfo();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.part = reader.int32();\n                            break;\n                        case 2:\n                            message.name = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a PartInfo message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.PartInfo} PartInfo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PartInfo.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a PartInfo message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                PartInfo.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.part != null && message.hasOwnProperty(\"part\"))\n                        if (!$util.isInteger(message.part))\n                            return \"part: integer expected\";\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        if (!$util.isString(message.name))\n                            return \"name: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a PartInfo message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.PartInfo} PartInfo\n                 */\n                PartInfo.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.PartInfo)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.PartInfo();\n                    if (object.part != null)\n                        message.part = object.part | 0;\n                    if (object.name != null)\n                        message.name = String(object.name);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a PartInfo message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.PartInfo} message PartInfo\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                PartInfo.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.part = 0;\n                        object.name = \"\";\n                    }\n                    if (message.part != null && message.hasOwnProperty(\"part\"))\n                        object.part = message.part;\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        object.name = message.name;\n                    return object;\n                };\n\n                /**\n                 * Converts this PartInfo to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                PartInfo.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return PartInfo;\n            })();\n\n            NoteSequence.SourceInfo = (function() {\n\n                /**\n                 * Properties of a SourceInfo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface ISourceInfo\n                 * @property {tensorflow.magenta.NoteSequence.SourceInfo.SourceType|null} [sourceType] SourceInfo sourceType\n                 * @property {tensorflow.magenta.NoteSequence.SourceInfo.EncodingType|null} [encodingType] SourceInfo encodingType\n                 * @property {tensorflow.magenta.NoteSequence.SourceInfo.Parser|null} [parser] SourceInfo parser\n                 */\n\n                /**\n                 * Constructs a new SourceInfo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a SourceInfo.\n                 * @implements ISourceInfo\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.ISourceInfo=} [properties] Properties to set\n                 */\n                function SourceInfo(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * SourceInfo sourceType.\n                 * @member {tensorflow.magenta.NoteSequence.SourceInfo.SourceType} sourceType\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @instance\n                 */\n                SourceInfo.prototype.sourceType = 0;\n\n                /**\n                 * SourceInfo encodingType.\n                 * @member {tensorflow.magenta.NoteSequence.SourceInfo.EncodingType} encodingType\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @instance\n                 */\n                SourceInfo.prototype.encodingType = 0;\n\n                /**\n                 * SourceInfo parser.\n                 * @member {tensorflow.magenta.NoteSequence.SourceInfo.Parser} parser\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @instance\n                 */\n                SourceInfo.prototype.parser = 0;\n\n                /**\n                 * Creates a new SourceInfo instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISourceInfo=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.SourceInfo} SourceInfo instance\n                 */\n                SourceInfo.create = function create(properties) {\n                    return new SourceInfo(properties);\n                };\n\n                /**\n                 * Encodes the specified SourceInfo message. Does not implicitly {@link tensorflow.magenta.NoteSequence.SourceInfo.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISourceInfo} message SourceInfo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SourceInfo.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.sourceType != null && message.hasOwnProperty(\"sourceType\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.sourceType);\n                    if (message.encodingType != null && message.hasOwnProperty(\"encodingType\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.encodingType);\n                    if (message.parser != null && message.hasOwnProperty(\"parser\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.parser);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified SourceInfo message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.SourceInfo.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISourceInfo} message SourceInfo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SourceInfo.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a SourceInfo message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.SourceInfo} SourceInfo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SourceInfo.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.SourceInfo();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.sourceType = reader.int32();\n                            break;\n                        case 2:\n                            message.encodingType = reader.int32();\n                            break;\n                        case 3:\n                            message.parser = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a SourceInfo message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.SourceInfo} SourceInfo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SourceInfo.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a SourceInfo message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                SourceInfo.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.sourceType != null && message.hasOwnProperty(\"sourceType\"))\n                        switch (message.sourceType) {\n                        default:\n                            return \"sourceType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    if (message.encodingType != null && message.hasOwnProperty(\"encodingType\"))\n                        switch (message.encodingType) {\n                        default:\n                            return \"encodingType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                            break;\n                        }\n                    if (message.parser != null && message.hasOwnProperty(\"parser\"))\n                        switch (message.parser) {\n                        default:\n                            return \"parser: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                            break;\n                        }\n                    return null;\n                };\n\n                /**\n                 * Creates a SourceInfo message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.SourceInfo} SourceInfo\n                 */\n                SourceInfo.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.SourceInfo)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.SourceInfo();\n                    switch (object.sourceType) {\n                    case \"UNKNOWN_SOURCE_TYPE\":\n                    case 0:\n                        message.sourceType = 0;\n                        break;\n                    case \"SCORE_BASED\":\n                    case 1:\n                        message.sourceType = 1;\n                        break;\n                    case \"PERFORMANCE_BASED\":\n                    case 2:\n                        message.sourceType = 2;\n                        break;\n                    }\n                    switch (object.encodingType) {\n                    case \"UNKNOWN_ENCODING_TYPE\":\n                    case 0:\n                        message.encodingType = 0;\n                        break;\n                    case \"MUSIC_XML\":\n                    case 1:\n                        message.encodingType = 1;\n                        break;\n                    case \"ABC\":\n                    case 2:\n                        message.encodingType = 2;\n                        break;\n                    case \"MIDI\":\n                    case 3:\n                        message.encodingType = 3;\n                        break;\n                    case \"MUSICNET\":\n                    case 4:\n                        message.encodingType = 4;\n                        break;\n                    }\n                    switch (object.parser) {\n                    case \"UNKNOWN_PARSER\":\n                    case 0:\n                        message.parser = 0;\n                        break;\n                    case \"MUSIC21\":\n                    case 1:\n                        message.parser = 1;\n                        break;\n                    case \"PRETTY_MIDI\":\n                    case 2:\n                        message.parser = 2;\n                        break;\n                    case \"MAGENTA_MUSIC_XML\":\n                    case 3:\n                        message.parser = 3;\n                        break;\n                    case \"MAGENTA_MUSICNET\":\n                    case 4:\n                        message.parser = 4;\n                        break;\n                    case \"MAGENTA_ABC\":\n                    case 5:\n                        message.parser = 5;\n                        break;\n                    case \"TONEJS_MIDI_CONVERT\":\n                    case 6:\n                        message.parser = 6;\n                        break;\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a SourceInfo message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.SourceInfo} message SourceInfo\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                SourceInfo.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.sourceType = options.enums === String ? \"UNKNOWN_SOURCE_TYPE\" : 0;\n                        object.encodingType = options.enums === String ? \"UNKNOWN_ENCODING_TYPE\" : 0;\n                        object.parser = options.enums === String ? \"UNKNOWN_PARSER\" : 0;\n                    }\n                    if (message.sourceType != null && message.hasOwnProperty(\"sourceType\"))\n                        object.sourceType = options.enums === String ? $root.tensorflow.magenta.NoteSequence.SourceInfo.SourceType[message.sourceType] : message.sourceType;\n                    if (message.encodingType != null && message.hasOwnProperty(\"encodingType\"))\n                        object.encodingType = options.enums === String ? $root.tensorflow.magenta.NoteSequence.SourceInfo.EncodingType[message.encodingType] : message.encodingType;\n                    if (message.parser != null && message.hasOwnProperty(\"parser\"))\n                        object.parser = options.enums === String ? $root.tensorflow.magenta.NoteSequence.SourceInfo.Parser[message.parser] : message.parser;\n                    return object;\n                };\n\n                /**\n                 * Converts this SourceInfo to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                SourceInfo.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                /**\n                 * SourceType enum.\n                 * @name tensorflow.magenta.NoteSequence.SourceInfo.SourceType\n                 * @enum {string}\n                 * @property {number} UNKNOWN_SOURCE_TYPE=0 UNKNOWN_SOURCE_TYPE value\n                 * @property {number} SCORE_BASED=1 SCORE_BASED value\n                 * @property {number} PERFORMANCE_BASED=2 PERFORMANCE_BASED value\n                 */\n                SourceInfo.SourceType = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"UNKNOWN_SOURCE_TYPE\"] = 0;\n                    values[valuesById[1] = \"SCORE_BASED\"] = 1;\n                    values[valuesById[2] = \"PERFORMANCE_BASED\"] = 2;\n                    return values;\n                })();\n\n                /**\n                 * EncodingType enum.\n                 * @name tensorflow.magenta.NoteSequence.SourceInfo.EncodingType\n                 * @enum {string}\n                 * @property {number} UNKNOWN_ENCODING_TYPE=0 UNKNOWN_ENCODING_TYPE value\n                 * @property {number} MUSIC_XML=1 MUSIC_XML value\n                 * @property {number} ABC=2 ABC value\n                 * @property {number} MIDI=3 MIDI value\n                 * @property {number} MUSICNET=4 MUSICNET value\n                 */\n                SourceInfo.EncodingType = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"UNKNOWN_ENCODING_TYPE\"] = 0;\n                    values[valuesById[1] = \"MUSIC_XML\"] = 1;\n                    values[valuesById[2] = \"ABC\"] = 2;\n                    values[valuesById[3] = \"MIDI\"] = 3;\n                    values[valuesById[4] = \"MUSICNET\"] = 4;\n                    return values;\n                })();\n\n                /**\n                 * Parser enum.\n                 * @name tensorflow.magenta.NoteSequence.SourceInfo.Parser\n                 * @enum {string}\n                 * @property {number} UNKNOWN_PARSER=0 UNKNOWN_PARSER value\n                 * @property {number} MUSIC21=1 MUSIC21 value\n                 * @property {number} PRETTY_MIDI=2 PRETTY_MIDI value\n                 * @property {number} MAGENTA_MUSIC_XML=3 MAGENTA_MUSIC_XML value\n                 * @property {number} MAGENTA_MUSICNET=4 MAGENTA_MUSICNET value\n                 * @property {number} MAGENTA_ABC=5 MAGENTA_ABC value\n                 * @property {number} TONEJS_MIDI_CONVERT=6 TONEJS_MIDI_CONVERT value\n                 */\n                SourceInfo.Parser = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"UNKNOWN_PARSER\"] = 0;\n                    values[valuesById[1] = \"MUSIC21\"] = 1;\n                    values[valuesById[2] = \"PRETTY_MIDI\"] = 2;\n                    values[valuesById[3] = \"MAGENTA_MUSIC_XML\"] = 3;\n                    values[valuesById[4] = \"MAGENTA_MUSICNET\"] = 4;\n                    values[valuesById[5] = \"MAGENTA_ABC\"] = 5;\n                    values[valuesById[6] = \"TONEJS_MIDI_CONVERT\"] = 6;\n                    return values;\n                })();\n\n                return SourceInfo;\n            })();\n\n            NoteSequence.TextAnnotation = (function() {\n\n                /**\n                 * Properties of a TextAnnotation.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface ITextAnnotation\n                 * @property {number|null} [time] TextAnnotation time\n                 * @property {number|null} [quantizedStep] TextAnnotation quantizedStep\n                 * @property {string|null} [text] TextAnnotation text\n                 * @property {tensorflow.magenta.NoteSequence.TextAnnotation.TextAnnotationType|null} [annotationType] TextAnnotation annotationType\n                 */\n\n                /**\n                 * Constructs a new TextAnnotation.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a TextAnnotation.\n                 * @implements ITextAnnotation\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.ITextAnnotation=} [properties] Properties to set\n                 */\n                function TextAnnotation(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * TextAnnotation time.\n                 * @member {number} time\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @instance\n                 */\n                TextAnnotation.prototype.time = 0;\n\n                /**\n                 * TextAnnotation quantizedStep.\n                 * @member {number} quantizedStep\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @instance\n                 */\n                TextAnnotation.prototype.quantizedStep = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * TextAnnotation text.\n                 * @member {string} text\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @instance\n                 */\n                TextAnnotation.prototype.text = \"\";\n\n                /**\n                 * TextAnnotation annotationType.\n                 * @member {tensorflow.magenta.NoteSequence.TextAnnotation.TextAnnotationType} annotationType\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @instance\n                 */\n                TextAnnotation.prototype.annotationType = 0;\n\n                /**\n                 * Creates a new TextAnnotation instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITextAnnotation=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.TextAnnotation} TextAnnotation instance\n                 */\n                TextAnnotation.create = function create(properties) {\n                    return new TextAnnotation(properties);\n                };\n\n                /**\n                 * Encodes the specified TextAnnotation message. Does not implicitly {@link tensorflow.magenta.NoteSequence.TextAnnotation.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITextAnnotation} message TextAnnotation message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TextAnnotation.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.time);\n                    if (message.text != null && message.hasOwnProperty(\"text\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);\n                    if (message.annotationType != null && message.hasOwnProperty(\"annotationType\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.annotationType);\n                    if (message.quantizedStep != null && message.hasOwnProperty(\"quantizedStep\"))\n                        writer.uint32(/* id 4, wireType 0 =*/32).int64(message.quantizedStep);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified TextAnnotation message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.TextAnnotation.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITextAnnotation} message TextAnnotation message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TextAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a TextAnnotation message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.TextAnnotation} TextAnnotation\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TextAnnotation.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.TextAnnotation();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.time = reader.double();\n                            break;\n                        case 4:\n                            message.quantizedStep = $util.Long?reader.int64().toNumber():reader.int64();\n                            break;\n                        case 2:\n                            message.text = reader.string();\n                            break;\n                        case 3:\n                            message.annotationType = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a TextAnnotation message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.TextAnnotation} TextAnnotation\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TextAnnotation.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a TextAnnotation message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                TextAnnotation.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        if (typeof message.time !== \"number\")\n                            return \"time: number expected\";\n                    if (message.quantizedStep != null && message.hasOwnProperty(\"quantizedStep\"))\n                        if (!$util.isInteger(message.quantizedStep) && !(message.quantizedStep && $util.isInteger(message.quantizedStep.low) && $util.isInteger(message.quantizedStep.high)))\n                            return \"quantizedStep: integer|Long expected\";\n                    if (message.text != null && message.hasOwnProperty(\"text\"))\n                        if (!$util.isString(message.text))\n                            return \"text: string expected\";\n                    if (message.annotationType != null && message.hasOwnProperty(\"annotationType\"))\n                        switch (message.annotationType) {\n                        default:\n                            return \"annotationType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    return null;\n                };\n\n                /**\n                 * Creates a TextAnnotation message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.TextAnnotation} TextAnnotation\n                 */\n                TextAnnotation.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.TextAnnotation)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.TextAnnotation();\n                    if (object.time != null)\n                        message.time = Number(object.time);\n                    if (object.quantizedStep != null)\n                        if ($util.Long)\n                            (message.quantizedStep = $util.Long.fromValue(object.quantizedStep)).unsigned = false;\n                        else if (typeof object.quantizedStep === \"string\")\n                            message.quantizedStep = parseInt(object.quantizedStep, 10);\n                        else if (typeof object.quantizedStep === \"number\")\n                            message.quantizedStep = object.quantizedStep;\n                        else if (typeof object.quantizedStep === \"object\")\n                            message.quantizedStep = new $util.LongBits(object.quantizedStep.low >>> 0, object.quantizedStep.high >>> 0).toNumber();\n                    if (object.text != null)\n                        message.text = String(object.text);\n                    switch (object.annotationType) {\n                    case \"UNKNOWN\":\n                    case 0:\n                        message.annotationType = 0;\n                        break;\n                    case \"CHORD_SYMBOL\":\n                    case 1:\n                        message.annotationType = 1;\n                        break;\n                    case \"BEAT\":\n                    case 2:\n                        message.annotationType = 2;\n                        break;\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a TextAnnotation message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.TextAnnotation} message TextAnnotation\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                TextAnnotation.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.time = 0;\n                        object.text = \"\";\n                        object.annotationType = options.enums === String ? \"UNKNOWN\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.quantizedStep = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.quantizedStep = options.longs === String ? \"0\" : 0;\n                    }\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        object.time = options.json && !isFinite(message.time) ? String(message.time) : message.time;\n                    if (message.text != null && message.hasOwnProperty(\"text\"))\n                        object.text = message.text;\n                    if (message.annotationType != null && message.hasOwnProperty(\"annotationType\"))\n                        object.annotationType = options.enums === String ? $root.tensorflow.magenta.NoteSequence.TextAnnotation.TextAnnotationType[message.annotationType] : message.annotationType;\n                    if (message.quantizedStep != null && message.hasOwnProperty(\"quantizedStep\"))\n                        if (typeof message.quantizedStep === \"number\")\n                            object.quantizedStep = options.longs === String ? String(message.quantizedStep) : message.quantizedStep;\n                        else\n                            object.quantizedStep = options.longs === String ? $util.Long.prototype.toString.call(message.quantizedStep) : options.longs === Number ? new $util.LongBits(message.quantizedStep.low >>> 0, message.quantizedStep.high >>> 0).toNumber() : message.quantizedStep;\n                    return object;\n                };\n\n                /**\n                 * Converts this TextAnnotation to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                TextAnnotation.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                /**\n                 * TextAnnotationType enum.\n                 * @name tensorflow.magenta.NoteSequence.TextAnnotation.TextAnnotationType\n                 * @enum {string}\n                 * @property {number} UNKNOWN=0 UNKNOWN value\n                 * @property {number} CHORD_SYMBOL=1 CHORD_SYMBOL value\n                 * @property {number} BEAT=2 BEAT value\n                 */\n                TextAnnotation.TextAnnotationType = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"UNKNOWN\"] = 0;\n                    values[valuesById[1] = \"CHORD_SYMBOL\"] = 1;\n                    values[valuesById[2] = \"BEAT\"] = 2;\n                    return values;\n                })();\n\n                return TextAnnotation;\n            })();\n\n            NoteSequence.QuantizationInfo = (function() {\n\n                /**\n                 * Properties of a QuantizationInfo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface IQuantizationInfo\n                 * @property {number|null} [stepsPerQuarter] QuantizationInfo stepsPerQuarter\n                 * @property {number|null} [stepsPerSecond] QuantizationInfo stepsPerSecond\n                 */\n\n                /**\n                 * Constructs a new QuantizationInfo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a QuantizationInfo.\n                 * @implements IQuantizationInfo\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.IQuantizationInfo=} [properties] Properties to set\n                 */\n                function QuantizationInfo(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * QuantizationInfo stepsPerQuarter.\n                 * @member {number} stepsPerQuarter\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @instance\n                 */\n                QuantizationInfo.prototype.stepsPerQuarter = 0;\n\n                /**\n                 * QuantizationInfo stepsPerSecond.\n                 * @member {number} stepsPerSecond\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @instance\n                 */\n                QuantizationInfo.prototype.stepsPerSecond = 0;\n\n                // OneOf field names bound to virtual getters and setters\n                var $oneOfFields;\n\n                /**\n                 * QuantizationInfo resolution.\n                 * @member {\"stepsPerQuarter\"|\"stepsPerSecond\"|undefined} resolution\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @instance\n                 */\n                Object.defineProperty(QuantizationInfo.prototype, \"resolution\", {\n                    get: $util.oneOfGetter($oneOfFields = [\"stepsPerQuarter\", \"stepsPerSecond\"]),\n                    set: $util.oneOfSetter($oneOfFields)\n                });\n\n                /**\n                 * Creates a new QuantizationInfo instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IQuantizationInfo=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.QuantizationInfo} QuantizationInfo instance\n                 */\n                QuantizationInfo.create = function create(properties) {\n                    return new QuantizationInfo(properties);\n                };\n\n                /**\n                 * Encodes the specified QuantizationInfo message. Does not implicitly {@link tensorflow.magenta.NoteSequence.QuantizationInfo.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IQuantizationInfo} message QuantizationInfo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                QuantizationInfo.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.stepsPerQuarter != null && message.hasOwnProperty(\"stepsPerQuarter\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.stepsPerQuarter);\n                    if (message.stepsPerSecond != null && message.hasOwnProperty(\"stepsPerSecond\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.stepsPerSecond);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified QuantizationInfo message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.QuantizationInfo.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IQuantizationInfo} message QuantizationInfo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                QuantizationInfo.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a QuantizationInfo message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.QuantizationInfo} QuantizationInfo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                QuantizationInfo.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.QuantizationInfo();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.stepsPerQuarter = reader.int32();\n                            break;\n                        case 2:\n                            message.stepsPerSecond = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a QuantizationInfo message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.QuantizationInfo} QuantizationInfo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                QuantizationInfo.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a QuantizationInfo message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                QuantizationInfo.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    var properties = {};\n                    if (message.stepsPerQuarter != null && message.hasOwnProperty(\"stepsPerQuarter\")) {\n                        properties.resolution = 1;\n                        if (!$util.isInteger(message.stepsPerQuarter))\n                            return \"stepsPerQuarter: integer expected\";\n                    }\n                    if (message.stepsPerSecond != null && message.hasOwnProperty(\"stepsPerSecond\")) {\n                        if (properties.resolution === 1)\n                            return \"resolution: multiple values\";\n                        properties.resolution = 1;\n                        if (!$util.isInteger(message.stepsPerSecond))\n                            return \"stepsPerSecond: integer expected\";\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a QuantizationInfo message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.QuantizationInfo} QuantizationInfo\n                 */\n                QuantizationInfo.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.QuantizationInfo)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.QuantizationInfo();\n                    if (object.stepsPerQuarter != null)\n                        message.stepsPerQuarter = object.stepsPerQuarter | 0;\n                    if (object.stepsPerSecond != null)\n                        message.stepsPerSecond = object.stepsPerSecond | 0;\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a QuantizationInfo message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.QuantizationInfo} message QuantizationInfo\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                QuantizationInfo.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (message.stepsPerQuarter != null && message.hasOwnProperty(\"stepsPerQuarter\")) {\n                        object.stepsPerQuarter = message.stepsPerQuarter;\n                        if (options.oneofs)\n                            object.resolution = \"stepsPerQuarter\";\n                    }\n                    if (message.stepsPerSecond != null && message.hasOwnProperty(\"stepsPerSecond\")) {\n                        object.stepsPerSecond = message.stepsPerSecond;\n                        if (options.oneofs)\n                            object.resolution = \"stepsPerSecond\";\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this QuantizationInfo to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                QuantizationInfo.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return QuantizationInfo;\n            })();\n\n            NoteSequence.SubsequenceInfo = (function() {\n\n                /**\n                 * Properties of a SubsequenceInfo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface ISubsequenceInfo\n                 * @property {number|null} [startTimeOffset] SubsequenceInfo startTimeOffset\n                 * @property {number|null} [endTimeOffset] SubsequenceInfo endTimeOffset\n                 */\n\n                /**\n                 * Constructs a new SubsequenceInfo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a SubsequenceInfo.\n                 * @implements ISubsequenceInfo\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.ISubsequenceInfo=} [properties] Properties to set\n                 */\n                function SubsequenceInfo(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * SubsequenceInfo startTimeOffset.\n                 * @member {number} startTimeOffset\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @instance\n                 */\n                SubsequenceInfo.prototype.startTimeOffset = 0;\n\n                /**\n                 * SubsequenceInfo endTimeOffset.\n                 * @member {number} endTimeOffset\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @instance\n                 */\n                SubsequenceInfo.prototype.endTimeOffset = 0;\n\n                /**\n                 * Creates a new SubsequenceInfo instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISubsequenceInfo=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.SubsequenceInfo} SubsequenceInfo instance\n                 */\n                SubsequenceInfo.create = function create(properties) {\n                    return new SubsequenceInfo(properties);\n                };\n\n                /**\n                 * Encodes the specified SubsequenceInfo message. Does not implicitly {@link tensorflow.magenta.NoteSequence.SubsequenceInfo.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISubsequenceInfo} message SubsequenceInfo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SubsequenceInfo.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.startTimeOffset != null && message.hasOwnProperty(\"startTimeOffset\"))\n                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.startTimeOffset);\n                    if (message.endTimeOffset != null && message.hasOwnProperty(\"endTimeOffset\"))\n                        writer.uint32(/* id 2, wireType 1 =*/17).double(message.endTimeOffset);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified SubsequenceInfo message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.SubsequenceInfo.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISubsequenceInfo} message SubsequenceInfo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SubsequenceInfo.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a SubsequenceInfo message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.SubsequenceInfo} SubsequenceInfo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SubsequenceInfo.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.SubsequenceInfo();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.startTimeOffset = reader.double();\n                            break;\n                        case 2:\n                            message.endTimeOffset = reader.double();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a SubsequenceInfo message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.SubsequenceInfo} SubsequenceInfo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SubsequenceInfo.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a SubsequenceInfo message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                SubsequenceInfo.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.startTimeOffset != null && message.hasOwnProperty(\"startTimeOffset\"))\n                        if (typeof message.startTimeOffset !== \"number\")\n                            return \"startTimeOffset: number expected\";\n                    if (message.endTimeOffset != null && message.hasOwnProperty(\"endTimeOffset\"))\n                        if (typeof message.endTimeOffset !== \"number\")\n                            return \"endTimeOffset: number expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a SubsequenceInfo message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.SubsequenceInfo} SubsequenceInfo\n                 */\n                SubsequenceInfo.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.SubsequenceInfo)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.SubsequenceInfo();\n                    if (object.startTimeOffset != null)\n                        message.startTimeOffset = Number(object.startTimeOffset);\n                    if (object.endTimeOffset != null)\n                        message.endTimeOffset = Number(object.endTimeOffset);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a SubsequenceInfo message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.SubsequenceInfo} message SubsequenceInfo\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                SubsequenceInfo.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.startTimeOffset = 0;\n                        object.endTimeOffset = 0;\n                    }\n                    if (message.startTimeOffset != null && message.hasOwnProperty(\"startTimeOffset\"))\n                        object.startTimeOffset = options.json && !isFinite(message.startTimeOffset) ? String(message.startTimeOffset) : message.startTimeOffset;\n                    if (message.endTimeOffset != null && message.hasOwnProperty(\"endTimeOffset\"))\n                        object.endTimeOffset = options.json && !isFinite(message.endTimeOffset) ? String(message.endTimeOffset) : message.endTimeOffset;\n                    return object;\n                };\n\n                /**\n                 * Converts this SubsequenceInfo to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                SubsequenceInfo.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return SubsequenceInfo;\n            })();\n\n            NoteSequence.SectionAnnotation = (function() {\n\n                /**\n                 * Properties of a SectionAnnotation.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface ISectionAnnotation\n                 * @property {number|null} [time] SectionAnnotation time\n                 * @property {number|null} [sectionId] SectionAnnotation sectionId\n                 */\n\n                /**\n                 * Constructs a new SectionAnnotation.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a SectionAnnotation.\n                 * @implements ISectionAnnotation\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.ISectionAnnotation=} [properties] Properties to set\n                 */\n                function SectionAnnotation(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * SectionAnnotation time.\n                 * @member {number} time\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @instance\n                 */\n                SectionAnnotation.prototype.time = 0;\n\n                /**\n                 * SectionAnnotation sectionId.\n                 * @member {number} sectionId\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @instance\n                 */\n                SectionAnnotation.prototype.sectionId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * Creates a new SectionAnnotation instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISectionAnnotation=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.SectionAnnotation} SectionAnnotation instance\n                 */\n                SectionAnnotation.create = function create(properties) {\n                    return new SectionAnnotation(properties);\n                };\n\n                /**\n                 * Encodes the specified SectionAnnotation message. Does not implicitly {@link tensorflow.magenta.NoteSequence.SectionAnnotation.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISectionAnnotation} message SectionAnnotation message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SectionAnnotation.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.time);\n                    if (message.sectionId != null && message.hasOwnProperty(\"sectionId\"))\n                        writer.uint32(/* id 4, wireType 0 =*/32).int64(message.sectionId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified SectionAnnotation message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.SectionAnnotation.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISectionAnnotation} message SectionAnnotation message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SectionAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a SectionAnnotation message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.SectionAnnotation} SectionAnnotation\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SectionAnnotation.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.SectionAnnotation();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.time = reader.double();\n                            break;\n                        case 4:\n                            message.sectionId = $util.Long?reader.int64().toNumber():reader.int64();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a SectionAnnotation message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.SectionAnnotation} SectionAnnotation\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SectionAnnotation.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a SectionAnnotation message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                SectionAnnotation.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        if (typeof message.time !== \"number\")\n                            return \"time: number expected\";\n                    if (message.sectionId != null && message.hasOwnProperty(\"sectionId\"))\n                        if (!$util.isInteger(message.sectionId) && !(message.sectionId && $util.isInteger(message.sectionId.low) && $util.isInteger(message.sectionId.high)))\n                            return \"sectionId: integer|Long expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a SectionAnnotation message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.SectionAnnotation} SectionAnnotation\n                 */\n                SectionAnnotation.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.SectionAnnotation)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.SectionAnnotation();\n                    if (object.time != null)\n                        message.time = Number(object.time);\n                    if (object.sectionId != null)\n                        if ($util.Long)\n                            (message.sectionId = $util.Long.fromValue(object.sectionId)).unsigned = false;\n                        else if (typeof object.sectionId === \"string\")\n                            message.sectionId = parseInt(object.sectionId, 10);\n                        else if (typeof object.sectionId === \"number\")\n                            message.sectionId = object.sectionId;\n                        else if (typeof object.sectionId === \"object\")\n                            message.sectionId = new $util.LongBits(object.sectionId.low >>> 0, object.sectionId.high >>> 0).toNumber();\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a SectionAnnotation message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.SectionAnnotation} message SectionAnnotation\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                SectionAnnotation.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.time = 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.sectionId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.sectionId = options.longs === String ? \"0\" : 0;\n                    }\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        object.time = options.json && !isFinite(message.time) ? String(message.time) : message.time;\n                    if (message.sectionId != null && message.hasOwnProperty(\"sectionId\"))\n                        if (typeof message.sectionId === \"number\")\n                            object.sectionId = options.longs === String ? String(message.sectionId) : message.sectionId;\n                        else\n                            object.sectionId = options.longs === String ? $util.Long.prototype.toString.call(message.sectionId) : options.longs === Number ? new $util.LongBits(message.sectionId.low >>> 0, message.sectionId.high >>> 0).toNumber() : message.sectionId;\n                    return object;\n                };\n\n                /**\n                 * Converts this SectionAnnotation to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                SectionAnnotation.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return SectionAnnotation;\n            })();\n\n            NoteSequence.Section = (function() {\n\n                /**\n                 * Properties of a Section.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface ISection\n                 * @property {number|null} [sectionId] Section sectionId\n                 * @property {tensorflow.magenta.NoteSequence.ISectionGroup|null} [sectionGroup] Section sectionGroup\n                 */\n\n                /**\n                 * Constructs a new Section.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a Section.\n                 * @implements ISection\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.ISection=} [properties] Properties to set\n                 */\n                function Section(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * Section sectionId.\n                 * @member {number} sectionId\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @instance\n                 */\n                Section.prototype.sectionId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * Section sectionGroup.\n                 * @member {tensorflow.magenta.NoteSequence.ISectionGroup|null|undefined} sectionGroup\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @instance\n                 */\n                Section.prototype.sectionGroup = null;\n\n                // OneOf field names bound to virtual getters and setters\n                var $oneOfFields;\n\n                /**\n                 * Section sectionType.\n                 * @member {\"sectionId\"|\"sectionGroup\"|undefined} sectionType\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @instance\n                 */\n                Object.defineProperty(Section.prototype, \"sectionType\", {\n                    get: $util.oneOfGetter($oneOfFields = [\"sectionId\", \"sectionGroup\"]),\n                    set: $util.oneOfSetter($oneOfFields)\n                });\n\n                /**\n                 * Creates a new Section instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISection=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.Section} Section instance\n                 */\n                Section.create = function create(properties) {\n                    return new Section(properties);\n                };\n\n                /**\n                 * Encodes the specified Section message. Does not implicitly {@link tensorflow.magenta.NoteSequence.Section.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISection} message Section message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Section.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.sectionId != null && message.hasOwnProperty(\"sectionId\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.sectionId);\n                    if (message.sectionGroup != null && message.hasOwnProperty(\"sectionGroup\"))\n                        $root.tensorflow.magenta.NoteSequence.SectionGroup.encode(message.sectionGroup, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified Section message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.Section.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISection} message Section message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Section.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a Section message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.Section} Section\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Section.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.Section();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.sectionId = $util.Long?reader.int64().toNumber():reader.int64();\n                            break;\n                        case 2:\n                            message.sectionGroup = $root.tensorflow.magenta.NoteSequence.SectionGroup.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a Section message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.Section} Section\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Section.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a Section message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                Section.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    var properties = {};\n                    if (message.sectionId != null && message.hasOwnProperty(\"sectionId\")) {\n                        properties.sectionType = 1;\n                        if (!$util.isInteger(message.sectionId) && !(message.sectionId && $util.isInteger(message.sectionId.low) && $util.isInteger(message.sectionId.high)))\n                            return \"sectionId: integer|Long expected\";\n                    }\n                    if (message.sectionGroup != null && message.hasOwnProperty(\"sectionGroup\")) {\n                        if (properties.sectionType === 1)\n                            return \"sectionType: multiple values\";\n                        properties.sectionType = 1;\n                        {\n                            var error = $root.tensorflow.magenta.NoteSequence.SectionGroup.verify(message.sectionGroup);\n                            if (error)\n                                return \"sectionGroup.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a Section message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.Section} Section\n                 */\n                Section.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.Section)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.Section();\n                    if (object.sectionId != null)\n                        if ($util.Long)\n                            (message.sectionId = $util.Long.fromValue(object.sectionId)).unsigned = false;\n                        else if (typeof object.sectionId === \"string\")\n                            message.sectionId = parseInt(object.sectionId, 10);\n                        else if (typeof object.sectionId === \"number\")\n                            message.sectionId = object.sectionId;\n                        else if (typeof object.sectionId === \"object\")\n                            message.sectionId = new $util.LongBits(object.sectionId.low >>> 0, object.sectionId.high >>> 0).toNumber();\n                    if (object.sectionGroup != null) {\n                        if (typeof object.sectionGroup !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.Section.sectionGroup: object expected\");\n                        message.sectionGroup = $root.tensorflow.magenta.NoteSequence.SectionGroup.fromObject(object.sectionGroup);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a Section message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.Section} message Section\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                Section.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (message.sectionId != null && message.hasOwnProperty(\"sectionId\")) {\n                        if (typeof message.sectionId === \"number\")\n                            object.sectionId = options.longs === String ? String(message.sectionId) : message.sectionId;\n                        else\n                            object.sectionId = options.longs === String ? $util.Long.prototype.toString.call(message.sectionId) : options.longs === Number ? new $util.LongBits(message.sectionId.low >>> 0, message.sectionId.high >>> 0).toNumber() : message.sectionId;\n                        if (options.oneofs)\n                            object.sectionType = \"sectionId\";\n                    }\n                    if (message.sectionGroup != null && message.hasOwnProperty(\"sectionGroup\")) {\n                        object.sectionGroup = $root.tensorflow.magenta.NoteSequence.SectionGroup.toObject(message.sectionGroup, options);\n                        if (options.oneofs)\n                            object.sectionType = \"sectionGroup\";\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this Section to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                Section.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return Section;\n            })();\n\n            NoteSequence.SectionGroup = (function() {\n\n                /**\n                 * Properties of a SectionGroup.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface ISectionGroup\n                 * @property {Array.<tensorflow.magenta.NoteSequence.ISection>|null} [sections] SectionGroup sections\n                 * @property {number|null} [numTimes] SectionGroup numTimes\n                 */\n\n                /**\n                 * Constructs a new SectionGroup.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a SectionGroup.\n                 * @implements ISectionGroup\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.ISectionGroup=} [properties] Properties to set\n                 */\n                function SectionGroup(properties) {\n                    this.sections = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * SectionGroup sections.\n                 * @member {Array.<tensorflow.magenta.NoteSequence.ISection>} sections\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @instance\n                 */\n                SectionGroup.prototype.sections = $util.emptyArray;\n\n                /**\n                 * SectionGroup numTimes.\n                 * @member {number} numTimes\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @instance\n                 */\n                SectionGroup.prototype.numTimes = 0;\n\n                /**\n                 * Creates a new SectionGroup instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISectionGroup=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.SectionGroup} SectionGroup instance\n                 */\n                SectionGroup.create = function create(properties) {\n                    return new SectionGroup(properties);\n                };\n\n                /**\n                 * Encodes the specified SectionGroup message. Does not implicitly {@link tensorflow.magenta.NoteSequence.SectionGroup.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISectionGroup} message SectionGroup message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SectionGroup.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.sections != null && message.sections.length)\n                        for (var i = 0; i < message.sections.length; ++i)\n                            $root.tensorflow.magenta.NoteSequence.Section.encode(message.sections[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.numTimes != null && message.hasOwnProperty(\"numTimes\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.numTimes);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified SectionGroup message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.SectionGroup.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISectionGroup} message SectionGroup message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SectionGroup.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a SectionGroup message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.SectionGroup} SectionGroup\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SectionGroup.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.SectionGroup();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.sections && message.sections.length))\n                                message.sections = [];\n                            message.sections.push($root.tensorflow.magenta.NoteSequence.Section.decode(reader, reader.uint32()));\n                            break;\n                        case 2:\n                            message.numTimes = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a SectionGroup message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.SectionGroup} SectionGroup\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SectionGroup.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a SectionGroup message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                SectionGroup.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.sections != null && message.hasOwnProperty(\"sections\")) {\n                        if (!Array.isArray(message.sections))\n                            return \"sections: array expected\";\n                        for (var i = 0; i < message.sections.length; ++i) {\n                            var error = $root.tensorflow.magenta.NoteSequence.Section.verify(message.sections[i]);\n                            if (error)\n                                return \"sections.\" + error;\n                        }\n                    }\n                    if (message.numTimes != null && message.hasOwnProperty(\"numTimes\"))\n                        if (!$util.isInteger(message.numTimes))\n                            return \"numTimes: integer expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a SectionGroup message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.SectionGroup} SectionGroup\n                 */\n                SectionGroup.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.SectionGroup)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.SectionGroup();\n                    if (object.sections) {\n                        if (!Array.isArray(object.sections))\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.SectionGroup.sections: array expected\");\n                        message.sections = [];\n                        for (var i = 0; i < object.sections.length; ++i) {\n                            if (typeof object.sections[i] !== \"object\")\n                                throw TypeError(\".tensorflow.magenta.NoteSequence.SectionGroup.sections: object expected\");\n                            message.sections[i] = $root.tensorflow.magenta.NoteSequence.Section.fromObject(object.sections[i]);\n                        }\n                    }\n                    if (object.numTimes != null)\n                        message.numTimes = object.numTimes | 0;\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a SectionGroup message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.SectionGroup} message SectionGroup\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                SectionGroup.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.sections = [];\n                    if (options.defaults)\n                        object.numTimes = 0;\n                    if (message.sections && message.sections.length) {\n                        object.sections = [];\n                        for (var j = 0; j < message.sections.length; ++j)\n                            object.sections[j] = $root.tensorflow.magenta.NoteSequence.Section.toObject(message.sections[j], options);\n                    }\n                    if (message.numTimes != null && message.hasOwnProperty(\"numTimes\"))\n                        object.numTimes = message.numTimes;\n                    return object;\n                };\n\n                /**\n                 * Converts this SectionGroup to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                SectionGroup.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return SectionGroup;\n            })();\n\n            return NoteSequence;\n        })();\n\n        magenta.SequenceMetadata = (function() {\n\n            /**\n             * Properties of a SequenceMetadata.\n             * @memberof tensorflow.magenta\n             * @interface ISequenceMetadata\n             * @property {string|null} [title] SequenceMetadata title\n             * @property {string|null} [artist] SequenceMetadata artist\n             * @property {Array.<string>|null} [genre] SequenceMetadata genre\n             * @property {Array.<string>|null} [composers] SequenceMetadata composers\n             */\n\n            /**\n             * Constructs a new SequenceMetadata.\n             * @memberof tensorflow.magenta\n             * @classdesc Represents a SequenceMetadata.\n             * @implements ISequenceMetadata\n             * @constructor\n             * @param {tensorflow.magenta.ISequenceMetadata=} [properties] Properties to set\n             */\n            function SequenceMetadata(properties) {\n                this.genre = [];\n                this.composers = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * SequenceMetadata title.\n             * @member {string} title\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @instance\n             */\n            SequenceMetadata.prototype.title = \"\";\n\n            /**\n             * SequenceMetadata artist.\n             * @member {string} artist\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @instance\n             */\n            SequenceMetadata.prototype.artist = \"\";\n\n            /**\n             * SequenceMetadata genre.\n             * @member {Array.<string>} genre\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @instance\n             */\n            SequenceMetadata.prototype.genre = $util.emptyArray;\n\n            /**\n             * SequenceMetadata composers.\n             * @member {Array.<string>} composers\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @instance\n             */\n            SequenceMetadata.prototype.composers = $util.emptyArray;\n\n            /**\n             * Creates a new SequenceMetadata instance using the specified properties.\n             * @function create\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @static\n             * @param {tensorflow.magenta.ISequenceMetadata=} [properties] Properties to set\n             * @returns {tensorflow.magenta.SequenceMetadata} SequenceMetadata instance\n             */\n            SequenceMetadata.create = function create(properties) {\n                return new SequenceMetadata(properties);\n            };\n\n            /**\n             * Encodes the specified SequenceMetadata message. Does not implicitly {@link tensorflow.magenta.SequenceMetadata.verify|verify} messages.\n             * @function encode\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @static\n             * @param {tensorflow.magenta.ISequenceMetadata} message SequenceMetadata message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SequenceMetadata.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.title != null && message.hasOwnProperty(\"title\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);\n                if (message.artist != null && message.hasOwnProperty(\"artist\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.artist);\n                if (message.genre != null && message.genre.length)\n                    for (var i = 0; i < message.genre.length; ++i)\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.genre[i]);\n                if (message.composers != null && message.composers.length)\n                    for (var i = 0; i < message.composers.length; ++i)\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.composers[i]);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified SequenceMetadata message, length delimited. Does not implicitly {@link tensorflow.magenta.SequenceMetadata.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @static\n             * @param {tensorflow.magenta.ISequenceMetadata} message SequenceMetadata message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SequenceMetadata.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a SequenceMetadata message from the specified reader or buffer.\n             * @function decode\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {tensorflow.magenta.SequenceMetadata} SequenceMetadata\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SequenceMetadata.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.SequenceMetadata();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.title = reader.string();\n                        break;\n                    case 2:\n                        message.artist = reader.string();\n                        break;\n                    case 3:\n                        if (!(message.genre && message.genre.length))\n                            message.genre = [];\n                        message.genre.push(reader.string());\n                        break;\n                    case 4:\n                        if (!(message.composers && message.composers.length))\n                            message.composers = [];\n                        message.composers.push(reader.string());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a SequenceMetadata message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {tensorflow.magenta.SequenceMetadata} SequenceMetadata\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SequenceMetadata.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a SequenceMetadata message.\n             * @function verify\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            SequenceMetadata.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.title != null && message.hasOwnProperty(\"title\"))\n                    if (!$util.isString(message.title))\n                        return \"title: string expected\";\n                if (message.artist != null && message.hasOwnProperty(\"artist\"))\n                    if (!$util.isString(message.artist))\n                        return \"artist: string expected\";\n                if (message.genre != null && message.hasOwnProperty(\"genre\")) {\n                    if (!Array.isArray(message.genre))\n                        return \"genre: array expected\";\n                    for (var i = 0; i < message.genre.length; ++i)\n                        if (!$util.isString(message.genre[i]))\n                            return \"genre: string[] expected\";\n                }\n                if (message.composers != null && message.hasOwnProperty(\"composers\")) {\n                    if (!Array.isArray(message.composers))\n                        return \"composers: array expected\";\n                    for (var i = 0; i < message.composers.length; ++i)\n                        if (!$util.isString(message.composers[i]))\n                            return \"composers: string[] expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a SequenceMetadata message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {tensorflow.magenta.SequenceMetadata} SequenceMetadata\n             */\n            SequenceMetadata.fromObject = function fromObject(object) {\n                if (object instanceof $root.tensorflow.magenta.SequenceMetadata)\n                    return object;\n                var message = new $root.tensorflow.magenta.SequenceMetadata();\n                if (object.title != null)\n                    message.title = String(object.title);\n                if (object.artist != null)\n                    message.artist = String(object.artist);\n                if (object.genre) {\n                    if (!Array.isArray(object.genre))\n                        throw TypeError(\".tensorflow.magenta.SequenceMetadata.genre: array expected\");\n                    message.genre = [];\n                    for (var i = 0; i < object.genre.length; ++i)\n                        message.genre[i] = String(object.genre[i]);\n                }\n                if (object.composers) {\n                    if (!Array.isArray(object.composers))\n                        throw TypeError(\".tensorflow.magenta.SequenceMetadata.composers: array expected\");\n                    message.composers = [];\n                    for (var i = 0; i < object.composers.length; ++i)\n                        message.composers[i] = String(object.composers[i]);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a SequenceMetadata message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @static\n             * @param {tensorflow.magenta.SequenceMetadata} message SequenceMetadata\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SequenceMetadata.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults) {\n                    object.genre = [];\n                    object.composers = [];\n                }\n                if (options.defaults) {\n                    object.title = \"\";\n                    object.artist = \"\";\n                }\n                if (message.title != null && message.hasOwnProperty(\"title\"))\n                    object.title = message.title;\n                if (message.artist != null && message.hasOwnProperty(\"artist\"))\n                    object.artist = message.artist;\n                if (message.genre && message.genre.length) {\n                    object.genre = [];\n                    for (var j = 0; j < message.genre.length; ++j)\n                        object.genre[j] = message.genre[j];\n                }\n                if (message.composers && message.composers.length) {\n                    object.composers = [];\n                    for (var j = 0; j < message.composers.length; ++j)\n                        object.composers[j] = message.composers[j];\n                }\n                return object;\n            };\n\n            /**\n             * Converts this SequenceMetadata to JSON.\n             * @function toJSON\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SequenceMetadata.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return SequenceMetadata;\n        })();\n\n        magenta.VelocityRange = (function() {\n\n            /**\n             * Properties of a VelocityRange.\n             * @memberof tensorflow.magenta\n             * @interface IVelocityRange\n             * @property {number|null} [min] VelocityRange min\n             * @property {number|null} [max] VelocityRange max\n             */\n\n            /**\n             * Constructs a new VelocityRange.\n             * @memberof tensorflow.magenta\n             * @classdesc Represents a VelocityRange.\n             * @implements IVelocityRange\n             * @constructor\n             * @param {tensorflow.magenta.IVelocityRange=} [properties] Properties to set\n             */\n            function VelocityRange(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * VelocityRange min.\n             * @member {number} min\n             * @memberof tensorflow.magenta.VelocityRange\n             * @instance\n             */\n            VelocityRange.prototype.min = 0;\n\n            /**\n             * VelocityRange max.\n             * @member {number} max\n             * @memberof tensorflow.magenta.VelocityRange\n             * @instance\n             */\n            VelocityRange.prototype.max = 0;\n\n            /**\n             * Creates a new VelocityRange instance using the specified properties.\n             * @function create\n             * @memberof tensorflow.magenta.VelocityRange\n             * @static\n             * @param {tensorflow.magenta.IVelocityRange=} [properties] Properties to set\n             * @returns {tensorflow.magenta.VelocityRange} VelocityRange instance\n             */\n            VelocityRange.create = function create(properties) {\n                return new VelocityRange(properties);\n            };\n\n            /**\n             * Encodes the specified VelocityRange message. Does not implicitly {@link tensorflow.magenta.VelocityRange.verify|verify} messages.\n             * @function encode\n             * @memberof tensorflow.magenta.VelocityRange\n             * @static\n             * @param {tensorflow.magenta.IVelocityRange} message VelocityRange message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            VelocityRange.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.min != null && message.hasOwnProperty(\"min\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.min);\n                if (message.max != null && message.hasOwnProperty(\"max\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.max);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified VelocityRange message, length delimited. Does not implicitly {@link tensorflow.magenta.VelocityRange.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof tensorflow.magenta.VelocityRange\n             * @static\n             * @param {tensorflow.magenta.IVelocityRange} message VelocityRange message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            VelocityRange.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a VelocityRange message from the specified reader or buffer.\n             * @function decode\n             * @memberof tensorflow.magenta.VelocityRange\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {tensorflow.magenta.VelocityRange} VelocityRange\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            VelocityRange.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.VelocityRange();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.min = reader.int32();\n                        break;\n                    case 2:\n                        message.max = reader.int32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a VelocityRange message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof tensorflow.magenta.VelocityRange\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {tensorflow.magenta.VelocityRange} VelocityRange\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            VelocityRange.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a VelocityRange message.\n             * @function verify\n             * @memberof tensorflow.magenta.VelocityRange\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            VelocityRange.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.min != null && message.hasOwnProperty(\"min\"))\n                    if (!$util.isInteger(message.min))\n                        return \"min: integer expected\";\n                if (message.max != null && message.hasOwnProperty(\"max\"))\n                    if (!$util.isInteger(message.max))\n                        return \"max: integer expected\";\n                return null;\n            };\n\n            /**\n             * Creates a VelocityRange message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof tensorflow.magenta.VelocityRange\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {tensorflow.magenta.VelocityRange} VelocityRange\n             */\n            VelocityRange.fromObject = function fromObject(object) {\n                if (object instanceof $root.tensorflow.magenta.VelocityRange)\n                    return object;\n                var message = new $root.tensorflow.magenta.VelocityRange();\n                if (object.min != null)\n                    message.min = object.min | 0;\n                if (object.max != null)\n                    message.max = object.max | 0;\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a VelocityRange message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof tensorflow.magenta.VelocityRange\n             * @static\n             * @param {tensorflow.magenta.VelocityRange} message VelocityRange\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            VelocityRange.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.min = 0;\n                    object.max = 0;\n                }\n                if (message.min != null && message.hasOwnProperty(\"min\"))\n                    object.min = message.min;\n                if (message.max != null && message.hasOwnProperty(\"max\"))\n                    object.max = message.max;\n                return object;\n            };\n\n            /**\n             * Converts this VelocityRange to JSON.\n             * @function toJSON\n             * @memberof tensorflow.magenta.VelocityRange\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            VelocityRange.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return VelocityRange;\n        })();\n\n        return magenta;\n    })();\n\n    return tensorflow;\n})();\n\nmodule.exports = $root;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@magenta+music@1.23.1_@tensorflow+tfjs-core@2.8.6_seedrandom@2.4.4/node_modules/@magenta/music/esm/protobuf/proto.js\n");

/***/ })

};
;